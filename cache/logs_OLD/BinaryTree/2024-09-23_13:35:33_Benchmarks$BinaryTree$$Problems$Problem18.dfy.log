2024-09-23 13:35:34.5508 INFO Initial heuristic value is 0
2024-09-23 13:35:34.5508 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:35:34.5992 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_1_1_7: int, formal_1_1_8: int, formal_1_1_9: int, formal_1_1_10: int, formal_1_1_11: int, formal_1_1_12: int, formal_1_1_13: int, formal_1_1_14: int, formal_1_1_15: int, formal_1_1_16: int, formal_1_1_17: int, formal_1_1_18: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] && receiver.Height == 4);}
2024-09-23 13:35:34.5992 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_1_1_7: int, formal_1_1_8: int, formal_1_1_9: int, formal_1_1_10: int, formal_1_1_11: int, formal_1_1_12: int, formal_1_1_13: int, formal_1_1_14: int, formal_1_1_15: int, formal_1_1_16: int, formal_1_1_17: int, formal_1_1_18: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
      receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
      assume {:formal} formal_1_1_0 == 0;
      assume {:formal} formal_1_1_1 == 1;
      assume {:formal} formal_1_1_2 == 2;
      assume {:formal} formal_1_1_3 == 3;
      assume {:formal} formal_1_1_4 == 4;
      assume {:formal} formal_1_1_5 == 5;
      assume {:formal} formal_1_1_6 == 6;
      assume {:formal} formal_1_1_7 == 7;
      assume {:formal} formal_1_1_8 == 8;
      assume {:formal} formal_1_1_9 == 9;
      assume {:formal} formal_1_1_10 == 10;
      assume {:formal} formal_1_1_11 == 11;
      assume {:formal} formal_1_1_12 == 12;
      assume {:formal} formal_1_1_13 == 13;
      assume {:formal} formal_1_1_14 == 14;
      assume {:formal} formal_1_1_15 == 15;
      assume {:formal} formal_1_1_16 == 16;
      assume {:formal} formal_1_1_17 == 17;
      assume {:formal} formal_1_1_18 == 18;
      assume {:formal} formal_2_3_0 == 4;
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [formal_1_1_0, formal_1_1_1, formal_1_1_2, formal_1_1_3, formal_1_1_4, formal_1_1_5, formal_1_1_6, formal_1_1_7, formal_1_1_8, formal_1_1_9, formal_1_1_10, formal_1_1_11, formal_1_1_12, formal_1_1_13, formal_1_1_14, formal_1_1_15, formal_1_1_16, formal_1_1_17, formal_1_1_18] && receiver.Height == formal_2_3_0);
    }
2024-09-23 13:36:01.7510 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_1_1_7: int, formal_1_1_8: int, formal_1_1_9: int, formal_1_1_10: int, formal_1_1_11: int, formal_1_1_12: int, formal_1_1_13: int, formal_1_1_14: int, formal_1_1_15: int, formal_1_1_16: int, formal_1_1_17: int, formal_1_1_18: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int, formal_6_50_0: int, formal_7_52_0: int, formal_8_54_0: int, formal_9_56_0: int, formal_8_56_0: int, formal_10_58_0: int, formal_9_58_0: int, formal_11_60_0: int, formal_10_60_0: int, formal_12_62_0: int, formal_11_62_0: int, formal_13_64_0: int, formal_12_64_0: int, formal_14_66_0: int, formal_15_68_0: int, formal_16_70_0: int, formal_25_80_0: int, formal_21_80_0: int, formal_26_82_0: int, formal_22_82_0: int, formal_27_84_0: int, formal_23_84_0: int, formal_35_93_0: int, formal_33_93_0: int, formal_36_95_0: int, formal_34_95_0: int, formal_37_97_0: int, formal_35_97_0: int, formal_38_99_0: int, formal_39_101_0: int, formal_40_103_0: int, formal_41_105_0: int, formal_44_109_0: int, formal_47_113_0: int, formal_58_125_0: int, formal_41_125_0: int, formal_59_127_0: int, formal_60_129_0: int, formal_73_143_0: int, formal_38_143_0: int, formal_74_145_0: int, formal_75_147_0: int, formal_78_151_0: int, formal_81_155_0: int, formal_84_159_0: int, formal_87_163_0: int, formal_88_165_0: int, formal_89_167_0: int, formal_90_169_0: int, formal_91_171_0: int, formal_91_171_1: int, formal_92_173_0: int, formal_53_173_0: int, formal_93_175_0: int, formal_54_175_0: int, formal_94_177_0: int, formal_94_177_1: int, formal_95_179_0: int, formal_96_181_0: int, formal_97_183_0: int, formal_98_185_0: int, formal_99_187_0: int, formal_100_189_0: int, formal_100_189_1: int, formal_101_191_0: int, formal_101_191_1: int, formal_102_193_0: int, formal_102_193_1: int, formal_103_195_0: int, formal_103_195_1: int, formal_104_197_0: int, formal_104_197_1: int, formal_105_199_0: int, formal_105_199_1: int, formal_106_201_0: int, formal_106_201_1: int, formal_107_203_0: int, formal_107_203_1: int, formal_108_205_0: int, formal_108_205_1: int, formal_109_207_0: int, formal_61_207_0: int, formal_110_209_0: int, formal_110_209_1: int, formal_111_211_0: int, formal_111_211_1: int, formal_112_213_0: int, formal_113_215_0: int, formal_114_217_0: int, formal_115_219_0: int, formal_115_219_1: int, formal_116_221_0: int, formal_68_221_0: int, formal_117_223_0: int, formal_69_223_0: int, formal_118_225_0: int, formal_118_225_1: int, formal_119_227_0: int, formal_119_227_1: int, formal_120_229_0: int, formal_121_231_0: int, formal_122_233_0: int, formal_123_235_0: int, formal_124_237_0: int, formal_124_237_1: int, formal_125_239_0: int, formal_126_241_0: int, formal_126_241_1: int, formal_127_243_0: int, formal_128_245_0: int, formal_128_245_1: int, formal_129_247_0: int, formal_130_249_0: int, formal_130_249_1: int, formal_131_251_0: int, formal_131_251_1: int, formal_132_253_0: int, formal_132_253_1: int, formal_133_255_0: int, formal_134_257_0: int, formal_134_257_1: int, formal_135_259_0: int, formal_83_259_0: int, formal_136_261_0: int, formal_136_261_1: int, formal_137_263_0: int, formal_138_265_0: int, formal_139_267_0: int, formal_139_267_1: int, formal_140_269_0: int, formal_141_271_0: int, formal_141_271_1: int, formal_142_273_0: int, formal_142_273_1: int, formal_143_275_0: int, formal_144_277_0: int, formal_144_277_1: int, formal_145_279_0: int, formal_145_279_1: int, formal_146_281_0: int, formal_147_283_0: int, formal_147_283_1: int, formal_148_285_0: int, formal_148_285_1: int, formal_149_287_0: int, formal_150_289_0: int, formal_150_289_1: int, formal_151_291_0: int, formal_152_293_0: int, formal_153_295_0: int, formal_153_295_1: int, formal_48_357_0: int, formal_49_359_0: int, formal_50_361_0: int, formal_50_361_1: int, formal_51_363_0: int, formal_52_365_0: int, formal_55_369_0: int, formal_55_369_1: int, formal_56_371_0: int, formal_56_371_1: int, formal_57_373_0: int, formal_57_373_1: int, formal_58_375_0: int, formal_58_375_1: int, formal_59_377_0: int, formal_59_377_1: int, formal_60_379_0: int, formal_60_379_1: int, formal_62_382_0: int, formal_63_384_0: int, formal_63_384_1: int, formal_64_386_0: int, formal_64_386_1: int, formal_65_388_0: int, formal_65_388_1: int, formal_66_390_0: int, formal_67_392_0: int, formal_70_396_0: int, formal_71_398_0: int, formal_72_400_0: int, formal_72_400_1: int, formal_73_402_0: int, formal_74_404_0: int, formal_74_404_1: int, formal_75_406_0: int, formal_75_406_1: int, formal_76_408_0: int, formal_76_408_1: int, formal_77_410_0: int, formal_78_412_0: int, formal_79_414_0: int, formal_79_414_1: int, formal_80_416_0: int, formal_80_416_1: int, formal_81_418_0: int, formal_82_420_0: int, formal_82_420_1: int, formal_84_423_0: int, formal_85_425_0: int, formal_0_27_0: int) returns (receiver: BinaryTree) {assume {:attribute 26} !(argument_1_0_0 == null);
assume {:attribute 26} !(argument_1_0_0.left == null);
assume {:attribute 26} !(argument_1_0_0.right == null);
assume {:attribute 26} argument_1_0_0 in argument_1_0_0.Repr;
assume {:attribute 26} argument_1_0_0.right in argument_1_0_0.Repr;
assume {:attribute 26} argument_1_0_0.left in argument_1_0_0.Repr;
assume {:attribute 26} |argument_1_0_0.View| > 0;
assume {:attribute 26} |argument_1_0_0.View| > 1;
assume {:attribute 26} |argument_1_0_0.View| > 10;
assume {:attribute 26} |argument_1_0_0.View| > 2;
assume {:attribute 26} |argument_1_0_0.View| > 3;
assume {:attribute 26} |argument_1_0_0.View| > 4;
assume {:attribute 26} |argument_1_0_0.View| > 5;
assume {:attribute 26} |argument_1_0_0.View| > 6;
assume {:attribute 26} |argument_1_0_0.View| > 7;
assume {:attribute 26} |argument_1_0_0.View| > 8;
assume {:attribute 26} |argument_1_0_0.View| > 9;
assume {:attribute 26} argument_1_0_0.right.left in argument_1_0_0.Repr;
assume {:attribute 26} !(argument_1_0_0.right.left == null);
assume {:attribute 26} argument_1_0_0.right.right in argument_1_0_0.Repr;
assume {:attribute 26} !(argument_1_0_0.right.right == null);
assume {:attribute 26} argument_1_0_0.right in argument_1_0_0.right.Repr;
assume {:attribute 26} argument_1_0_0.right.Repr == {argument_1_0_0.right, argument_1_0_0.right.left, argument_1_0_0.right.right};
assume {:attribute 26} argument_1_0_0.right.left in argument_1_0_0.right.Repr;
assume {:attribute 26} argument_1_0_0.right.right in argument_1_0_0.right.Repr;
assume {:attribute 26} |argument_1_0_0.right.View| > 0;
assume {:attribute 26} |argument_1_0_0.right.View| > 1;
assume {:attribute 26} |argument_1_0_0.right.View| > 2;
assume {:attribute 26} argument_1_0_0.left.left in argument_1_0_0.Repr;
assume {:attribute 26} !(argument_1_0_0.left.left == null);
assume {:attribute 26} argument_1_0_0.left.right in argument_1_0_0.Repr;
assume {:attribute 26} !(argument_1_0_0.left.right == null);
assume {:attribute 26} argument_1_0_0.left in argument_1_0_0.left.Repr;
assume {:attribute 26} argument_1_0_0.left.right in argument_1_0_0.left.Repr;
assume {:attribute 26} argument_1_0_0.left.left in argument_1_0_0.left.Repr;
assume {:attribute 26} |argument_1_0_0.left.View| > 0;
assume {:attribute 26} |argument_1_0_0.left.View| > 1;
assume {:attribute 26} |argument_1_0_0.left.View| > 2;
assume {:attribute 26} |argument_1_0_0.left.View| > 3;
assume {:attribute 26} |argument_1_0_0.left.View| > 4;
assume {:attribute 26} |argument_1_0_0.left.View| > 5;
assume {:attribute 26} |argument_1_0_0.left.View| > 6;
assume {:attribute 26} argument_1_0_0.right.left in argument_1_0_0.right.left.Repr;
assume {:attribute 26} argument_1_0_0.right.left.Repr == {argument_1_0_0.right.left};
assume {:attribute 26} |argument_1_0_0.right.left.View| > 0;
assume {:attribute 26} argument_1_0_0.right.right in argument_1_0_0.right.right.Repr;
assume {:attribute 26} argument_1_0_0.right.right.Repr == {argument_1_0_0.right.right};
assume {:attribute 26} |argument_1_0_0.right.right.View| > 0;
assume {:attribute 26} argument_1_0_0.left.right.left in argument_1_0_0.left.Repr;
assume {:attribute 26} argument_1_0_0.left.right.left in argument_1_0_0.Repr;
assume {:attribute 26} !(argument_1_0_0.left.right.left == null);
assume {:attribute 26} argument_1_0_0.left.right.right in argument_1_0_0.left.Repr;
assume {:attribute 26} argument_1_0_0.left.right.right in argument_1_0_0.Repr;
assume {:attribute 26} !(argument_1_0_0.left.right.right == null);
assume {:attribute 26} argument_1_0_0.left.right in argument_1_0_0.left.right.Repr;
assume {:attribute 26} argument_1_0_0.left.right.Repr == {argument_1_0_0.left.right, argument_1_0_0.left.right.right, argument_1_0_0.left.right.left};
assume {:attribute 26} argument_1_0_0.left.right.right in argument_1_0_0.left.right.Repr;
assume {:attribute 26} argument_1_0_0.left.right.left in argument_1_0_0.left.right.Repr;
assume {:attribute 26} |argument_1_0_0.left.right.View| > 0;
assume {:attribute 26} |argument_1_0_0.left.right.View| > 1;
assume {:attribute 26} |argument_1_0_0.left.right.View| > 2;
assume {:attribute 26} argument_1_0_0.left.left.left in argument_1_0_0.left.Repr;
assume {:attribute 26} argument_1_0_0.left.left.left in argument_1_0_0.Repr;
assume {:attribute 26} !(argument_1_0_0.left.left.left == null);
assume {:attribute 26} argument_1_0_0.Repr == {argument_1_0_0.right, argument_1_0_0.left, argument_1_0_0.left.right, argument_1_0_0.left.left, argument_1_0_0.left.left.left, argument_1_0_0.left.left.right, argument_1_0_0.left.right.right, argument_1_0_0.left.right.left, argument_1_0_0.right.left, argument_1_0_0.right.right, argument_1_0_0};

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 3776 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume {:attribute 612} argument_18_0_0 == null;
      assume {:attribute 613} argument_18_0_1 == null;
      assume {:formal} formal_0_37_0 == 16;
      assume {:attribute 614} argument_18_0_2 == formal_0_37_0;
      assume true && (if argument_18_0_0 == null then {} else argument_18_0_0.Repr) * (if argument_18_0_1 == null then {} else argument_18_0_1.Repr) == {} && (argument_18_0_0 == null || argument_18_0_0.IsValid()) && (argument_18_0_1 == null || argument_18_0_1.IsValid());
      receiver := new BinaryTree(argument_18_0_0, argument_18_0_1, argument_18_0_2);
      assume {:formal} formal_3_50_0 == 0;
      assume {:formal} formal_6_907_0 == 0;
      assume {:formal} formal_7_1327_0 == 16;
      assume {:formal} formal_8_1208_0 == 16;
      assume {:formal} formal_8_1208_1 == 0;
      assume {:formal} formal_9_911_0 == 1;
      assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_50_0 && null == receiver.left && null == receiver.right && formal_6_907_0 == receiver.Height && formal_7_1327_0 == receiver.value && formal_8_1208_0 == receiver.View[formal_8_1208_1] && formal_9_911_0 == |receiver.View|;
    }
2024-09-23 13:36:35.7916 INFO Have found the following solution to a subproblem!
{
argument_17_0_0 := new BinaryTree(null, null, 16);
}
2024-09-23 13:36:35.7916 INFO Time spend on subproblem: 00:00:00.5242569
2024-09-23 13:36:35.7916 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.5227385)
2024-09-23 13:36:35.7916 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:36:35.7916 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:36:35.7916 INFO Initial heuristic value is 0
2024-09-23 13:36:35.7916 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:36:35.7948 TRACE Verifying the body of the following method:
static method synthesized(formal_3_50_0: int, formal_6_907_0: int, formal_7_1338_0: int, formal_8_1340_0: int, formal_8_1340_1: int, formal_9_911_0: int, argument_19_0_0: BinaryTree?, argument_19_0_1: BinaryTree?, argument_19_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_19_0_0 == null then {} else argument_19_0_0.Repr) * (if argument_19_0_1 == null then {} else argument_19_0_1.Repr) == {} && (argument_19_0_0 == null || argument_19_0_0.IsValid()) && (argument_19_0_1 == null || argument_19_0_1.IsValid());
receiver := new BinaryTree(argument_19_0_0, argument_19_0_1, argument_19_0_2);
assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 18 == receiver.value && 18 == receiver.View[0] && 1 == |receiver.View|);}
2024-09-23 13:36:35.7948 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_50_0: int, formal_6_907_0: int, formal_7_1338_0: int, formal_8_1340_0: int, formal_8_1340_1: int, formal_9_911_0: int, argument_19_0_0: BinaryTree?, argument_19_0_1: BinaryTree?, argument_19_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_19_0_0 == null then {} else argument_19_0_0.Repr) * (if argument_19_0_1 == null then {} else argument_19_0_1.Repr) == {} && (argument_19_0_0 == null || argument_19_0_0.IsValid()) && (argument_19_0_1 == null || argument_19_0_1.IsValid());
      receiver := new BinaryTree(argument_19_0_0, argument_19_0_1, argument_19_0_2);
      assume {:formal} formal_3_50_0 == 0;
      assume {:formal} formal_6_907_0 == 0;
      assume {:formal} formal_7_1338_0 == 18;
      assume {:formal} formal_8_1340_0 == 18;
      assume {:formal} formal_8_1340_1 == 0;
      assume {:formal} formal_9_911_0 == 1;
      assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_50_0 && null == receiver.left && null == receiver.right && formal_6_907_0 == receiver.Height && formal_7_1338_0 == receiver.value && formal_8_1340_0 == receiver.View[formal_8_1340_1] && formal_9_911_0 == |receiver.View|);
    }
2024-09-23 13:36:36.0898 TRACE Verifying the body of the following method:
static method synthesized(formal_3_50_0: int, formal_6_907_0: int, formal_7_1338_0: int, formal_8_1340_0: int, formal_8_1340_1: int, formal_9_911_0: int, argument_19_0_0: BinaryTree?, argument_19_0_1: BinaryTree?, argument_19_0_2: int, formal_0_41_0: int) returns (receiver: BinaryTree) {assume true && (if null == null then {} else null.Repr) * (if null == null then {} else null.Repr) == {} && (null == null || null.IsValid()) && (null == null || null.IsValid());
receiver := new BinaryTree(null, null, 18);
assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 18 == receiver.value && 18 == receiver.View[0] && 1 == |receiver.View|;}
2024-09-23 13:36:36.0898 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_50_0: int, formal_6_907_0: int, formal_7_1338_0: int, formal_8_1340_0: int, formal_8_1340_1: int, formal_9_911_0: int, argument_19_0_0: BinaryTree?, argument_19_0_1: BinaryTree?, argument_19_0_2: int, formal_0_41_0: int)
        returns (receiver: BinaryTree)
    {
      assume {:attribute 626} argument_19_0_0 == null;
      assume {:attribute 627} argument_19_0_1 == null;
      assume {:formal} formal_0_41_0 == 18;
      assume {:attribute 628} argument_19_0_2 == formal_0_41_0;
      assume true && (if argument_19_0_0 == null then {} else argument_19_0_0.Repr) * (if argument_19_0_1 == null then {} else argument_19_0_1.Repr) == {} && (argument_19_0_0 == null || argument_19_0_0.IsValid()) && (argument_19_0_1 == null || argument_19_0_1.IsValid());
      receiver := new BinaryTree(argument_19_0_0, argument_19_0_1, argument_19_0_2);
      assume {:formal} formal_3_50_0 == 0;
      assume {:formal} formal_6_907_0 == 0;
      assume {:formal} formal_7_1338_0 == 18;
      assume {:formal} formal_8_1340_0 == 18;
      assume {:formal} formal_8_1340_1 == 0;
      assume {:formal} formal_9_911_0 == 1;
      assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_50_0 && null == receiver.left && null == receiver.right && formal_6_907_0 == receiver.Height && formal_7_1338_0 == receiver.value && formal_8_1340_0 == receiver.View[formal_8_1340_1] && formal_9_911_0 == |receiver.View|;
    }
2024-09-23 13:36:36.3283 INFO Have found the following solution to a subproblem!
{
argument_17_0_1 := new BinaryTree(null, null, 18);
}
2024-09-23 13:36:36.3283 INFO Time spend on subproblem: 00:00:00.5358465
2024-09-23 13:36:36.3283 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.5346887)
2024-09-23 13:36:36.3283 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:36:36.3283 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:36:36.3283 INFO Have found the following solution!
static method solution() returns (result:BinaryTree)
ensures Goal(result)
{
var argument_4_0_0 := new BinaryTree(null, null, 0);
var argument_4_0_1 := new BinaryTree(null, null, 2);
var argument_3_0_0 := new BinaryTree(argument_4_0_0, argument_4_0_1, 1);
var argument_7_0_0 := new BinaryTree(null, null, 4);
var argument_7_0_1 := new BinaryTree(null, null, 6);
var argument_3_0_1 := new BinaryTree(argument_7_0_0, argument_7_0_1, 5);
var argument_2_0_0 := new BinaryTree(argument_3_0_0, argument_3_0_1, 3);
var argument_10_0_0 := new BinaryTree(null, null, 8);
var argument_10_0_1 := new BinaryTree(null, null, 10);
var argument_2_0_1 := new BinaryTree(argument_10_0_0, argument_10_0_1, 9);
var argument_1_0_0 := new BinaryTree(argument_2_0_0, argument_2_0_1, 7);
var argument_14_0_0 := new BinaryTree(null, null, 12);
var argument_14_0_1 := new BinaryTree(null, null, 14);
var argument_13_0_0 := new BinaryTree(argument_14_0_0, argument_14_0_1, 13);
var argument_17_0_0 := new BinaryTree(null, null, 16);
var argument_17_0_1 := new BinaryTree(null, null, 18);
var argument_13_0_1 := new BinaryTree(argument_17_0_0, argument_17_0_1, 17);
var argument_1_0_1 := new BinaryTree(argument_13_0_0, argument_13_0_1, 15);
result := new BinaryTree(argument_1_0_0, argument_1_0_1, 11);
}
2024-09-23 13:36:36.3283 INFO Total time spend on synthesis: 00:01:01.8995704
2024-09-23 13:36:36.3283 INFO Total number of Regular queries to Dafny: 38 (00:00:59.8264717)
2024-09-23 13:36:36.3283 INFO Total number of Simplify queries to Dafny: 0 (00:00:00)
2024-09-23 13:36:36.3283 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
