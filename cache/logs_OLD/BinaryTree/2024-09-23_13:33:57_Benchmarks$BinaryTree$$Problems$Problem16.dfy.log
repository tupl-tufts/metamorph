2024-09-23 13:33:57.8684 INFO Initial heuristic value is 0
2024-09-23 13:33:57.8708 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:33:57.9187 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_1_1_7: int, formal_1_1_8: int, formal_1_1_9: int, formal_1_1_10: int, formal_1_1_11: int, formal_1_1_12: int, formal_1_1_13: int, formal_1_1_14: int, formal_1_1_15: int, formal_1_1_16: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] && receiver.Height == 4);}
2024-09-23 13:33:57.9187 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_1_1_7: int, formal_1_1_8: int, formal_1_1_9: int, formal_1_1_10: int, formal_1_1_11: int, formal_1_1_12: int, formal_1_1_13: int, formal_1_1_14: int, formal_1_1_15: int, formal_1_1_16: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
      receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
      assume {:formal} formal_1_1_0 == 0;
      assume {:formal} formal_1_1_1 == 1;
      assume {:formal} formal_1_1_2 == 2;
      assume {:formal} formal_1_1_3 == 3;
      assume {:formal} formal_1_1_4 == 4;
      assume {:formal} formal_1_1_5 == 5;
      assume {:formal} formal_1_1_6 == 6;
      assume {:formal} formal_1_1_7 == 7;
      assume {:formal} formal_1_1_8 == 8;
      assume {:formal} formal_1_1_9 == 9;
      assume {:formal} formal_1_1_10 == 10;
      assume {:formal} formal_1_1_11 == 11;
      assume {:formal} formal_1_1_12 == 12;
      assume {:formal} formal_1_1_13 == 13;
      assume {:formal} formal_1_1_14 == 14;
      assume {:formal} formal_1_1_15 == 15;
      assume {:formal} formal_1_1_16 == 16;
      assume {:formal} formal_2_3_0 == 4;
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [formal_1_1_0, formal_1_1_1, formal_1_1_2, formal_1_1_3, formal_1_1_4, formal_1_1_5, formal_1_1_6, formal_1_1_7, formal_1_1_8, formal_1_1_9, formal_1_1_10, formal_1_1_11, formal_1_1_12, formal_1_1_13, formal_1_1_14, formal_1_1_15, formal_1_1_16] && receiver.Height == formal_2_3_0);
    }
2024-09-23 13:34:13.8921 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_1_1_7: int, formal_1_1_8: int, formal_1_1_9: int, formal_1_1_10: int, formal_1_1_11: int, formal_1_1_12: int, formal_1_1_13: int, formal_1_1_14: int, formal_1_1_15: int, formal_1_1_16: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int, formal_6_46_0: int, formal_7_48_0: int, formal_8_50_0: int, formal_9_52_0: int, formal_10_54_0: int, formal_11_56_0: int, formal_12_58_0: int, formal_13_60_0: int, formal_14_62_0: int, formal_15_64_0: int, formal_24_74_0: int, formal_29_74_0: int, formal_25_76_0: int, formal_30_76_0: int, formal_26_78_0: int, formal_34_87_0: int, formal_20_87_0: int, formal_35_89_0: int, formal_21_89_0: int, formal_36_91_0: int, formal_22_91_0: int, formal_37_93_0: int, formal_38_95_0: int, formal_39_97_0: int, formal_42_101_0: int, formal_45_105_0: int, formal_39_105_0: int, formal_56_117_0: int, formal_33_117_0: int, formal_57_119_0: int, formal_58_121_0: int, formal_67_131_0: int, formal_36_131_0: int, formal_68_133_0: int, formal_71_137_0: int, formal_74_141_0: int, formal_77_145_0: int, formal_78_147_0: int, formal_79_149_0: int, formal_80_151_0: int, formal_81_153_0: int, formal_81_153_1: int, formal_82_155_0: int, formal_83_157_0: int, formal_45_157_0: int, formal_84_159_0: int, formal_84_159_1: int, formal_85_161_0: int, formal_86_163_0: int, formal_87_165_0: int, formal_88_167_0: int, formal_89_169_0: int, formal_89_169_1: int, formal_90_171_0: int, formal_90_171_1: int, formal_91_173_0: int, formal_91_173_1: int, formal_92_175_0: int, formal_92_175_1: int, formal_93_177_0: int, formal_93_177_1: int, formal_94_179_0: int, formal_94_179_1: int, formal_95_181_0: int, formal_95_181_1: int, formal_96_183_0: int, formal_96_183_1: int, formal_97_185_0: int, formal_52_185_0: int, formal_98_187_0: int, formal_98_187_1: int, formal_99_189_0: int, formal_99_189_1: int, formal_100_191_0: int, formal_101_193_0: int, formal_102_195_0: int, formal_103_197_0: int, formal_103_197_1: int, formal_104_199_0: int, formal_105_201_0: int, formal_58_201_0: int, formal_106_203_0: int, formal_106_203_1: int, formal_107_205_0: int, formal_107_205_1: int, formal_108_207_0: int, formal_109_209_0: int, formal_110_211_0: int, formal_111_213_0: int, formal_112_215_0: int, formal_112_215_1: int, formal_113_217_0: int, formal_113_217_1: int, formal_114_219_0: int, formal_115_221_0: int, formal_115_221_1: int, formal_116_223_0: int, formal_116_223_1: int, formal_117_225_0: int, formal_118_227_0: int, formal_119_229_0: int, formal_119_229_1: int, formal_120_231_0: int, formal_121_233_0: int, formal_121_233_1: int, formal_122_235_0: int, formal_123_237_0: int, formal_123_237_1: int, formal_124_239_0: int, formal_125_241_0: int, formal_125_241_1: int, formal_126_243_0: int, formal_126_243_1: int, formal_127_245_0: int, formal_128_247_0: int, formal_128_247_1: int, formal_129_249_0: int, formal_129_249_1: int, formal_130_251_0: int, formal_131_253_0: int, formal_131_253_1: int, formal_132_255_0: int, formal_133_257_0: int, formal_134_259_0: int, formal_134_259_1: int, formal_135_261_0: int, formal_135_261_1: int, formal_136_263_0: int, formal_40_316_0: int, formal_41_318_0: int, formal_42_320_0: int, formal_42_320_1: int, formal_43_322_0: int, formal_44_324_0: int, formal_46_327_0: int, formal_46_327_1: int, formal_47_329_0: int, formal_47_329_1: int, formal_48_331_0: int, formal_48_331_1: int, formal_49_333_0: int, formal_49_333_1: int, formal_50_335_0: int, formal_50_335_1: int, formal_51_337_0: int, formal_53_340_0: int, formal_53_340_1: int, formal_54_342_0: int, formal_54_342_1: int, formal_55_344_0: int, formal_55_344_1: int, formal_56_346_0: int, formal_57_348_0: int, formal_59_351_0: int, formal_60_353_0: int, formal_61_355_0: int, formal_61_355_1: int, formal_62_357_0: int, formal_63_359_0: int, formal_63_359_1: int, formal_64_361_0: int, formal_64_361_1: int, formal_65_363_0: int, formal_65_363_1: int, formal_66_365_0: int, formal_67_367_0: int, formal_68_369_0: int, formal_68_369_1: int, formal_69_371_0: int, formal_70_373_0: int, formal_71_375_0: int, formal_0_25_0: int) returns (receiver: BinaryTree) {assume {:attribute 24} !(argument_1_0_0 == null);
assume {:attribute 24} !(argument_1_0_0.left == null);
assume {:attribute 24} !(argument_1_0_0.right == null);
assume {:attribute 24} argument_1_0_0 in argument_1_0_0.Repr;
assume {:attribute 24} argument_1_0_0.right in argument_1_0_0.Repr;
assume {:attribute 24} argument_1_0_0.left in argument_1_0_0.Repr;
assume {:attribute 24} |argument_1_0_0.View| > 0;
assume {:attribute 24} |argument_1_0_0.View| > 1;
assume {:attribute 24} |argument_1_0_0.View| > 2;
assume {:attribute 24} |argument_1_0_0.View| > 3;
assume {:attribute 24} |argument_1_0_0.View| > 4;
assume {:attribute 24} |argument_1_0_0.View| > 5;
assume {:attribute 24} |argument_1_0_0.View| > 6;
assume {:attribute 24} |argument_1_0_0.View| > 7;
assume {:attribute 24} |argument_1_0_0.View| > 8;
assume {:attribute 24} |argument_1_0_0.View| > 9;
assume {:attribute 24} argument_1_0_0.right.left in argument_1_0_0.Repr;
assume {:attribute 24} !(argument_1_0_0.right.left == null);
assume {:attribute 24} argument_1_0_0.right.right in argument_1_0_0.Repr;
assume {:attribute 24} !(argument_1_0_0.right.right == null);
assume {:attribute 24} argument_1_0_0.right in argument_1_0_0.right.Repr;
assume {:attribute 24} argument_1_0_0.right.Repr == {argument_1_0_0.right, argument_1_0_0.right.right, argument_1_0_0.right.left};
assume {:attribute 24} argument_1_0_0.right.right in argument_1_0_0.right.Repr;
assume {:attribute 24} argument_1_0_0.right.left in argument_1_0_0.right.Repr;
assume {:attribute 24} |argument_1_0_0.right.View| > 0;
assume {:attribute 24} |argument_1_0_0.right.View| > 1;
assume {:attribute 24} |argument_1_0_0.right.View| > 2;
assume {:attribute 24} argument_1_0_0.left.left in argument_1_0_0.Repr;
assume {:attribute 24} !(argument_1_0_0.left.left == null);
assume {:attribute 24} argument_1_0_0.left.right in argument_1_0_0.Repr;
assume {:attribute 24} !(argument_1_0_0.left.right == null);
assume {:attribute 24} argument_1_0_0.left in argument_1_0_0.left.Repr;
assume {:attribute 24} argument_1_0_0.left.left in argument_1_0_0.left.Repr;
assume {:attribute 24} argument_1_0_0.left.right in argument_1_0_0.left.Repr;
assume {:attribute 24} |argument_1_0_0.left.View| > 0;
assume {:attribute 24} |argument_1_0_0.left.View| > 1;
assume {:attribute 24} |argument_1_0_0.left.View| > 2;
assume {:attribute 24} |argument_1_0_0.left.View| > 3;
assume {:attribute 24} |argument_1_0_0.left.View| > 4;
assume {:attribute 24} |argument_1_0_0.left.View| > 5;
assume {:attribute 24} argument_1_0_0.right.right in argument_1_0_0.right.right.Repr;
assume {:attribute 24} argument_1_0_0.right.right.Repr == {argument_1_0_0.right.right};
assume {:attribute 24} |argument_1_0_0.right.right.View| > 0;
assume {:attribute 24} argument_1_0_0.right.left in argument_1_0_0.right.left.Repr;
assume {:attribute 24} argument_1_0_0.right.left.Repr == {argument_1_0_0.right.left};
assume {:attribute 24} |argument_1_0_0.right.left.View| > 0;
assume {:attribute 24} argument_1_0_0.left.left.left in argument_1_0_0.left.Repr;
assume {:attribute 24} argument_1_0_0.left.left.left in argument_1_0_0.Repr;
assume {:attribute 24} !(argument_1_0_0.left.left.left == null);
assume {:attribute 24} argument_1_0_0.left.left.right in argument_1_0_0.left.Repr;
assume {:attribute 24} argument_1_0_0.left.left.right in argument_1_0_0.Repr;
assume {:attribute 24} !(argument_1_0_0.left.left.right == null);
assume {:attribute 24} argument_1_0_0.left.left in argument_1_0_0.left.left.Repr;
assume {:attribute 24} argument_1_0_0.left.left.Repr == {argument_1_0_0.left.left, argument_1_0_0.left.left.right, argument_1_0_0.left.left.left};
assume {:attribute 24} argument_1_0_0.left.left.right in argument_1_0_0.left.left.Repr;
assume {:attribute 24} argument_1_0_0.left.left.left in argument_1_0_0.left.left.Repr;
assume {:attribute 24} |argument_1_0_0.left.left.View| > 0;
assume {:attribute 24} |argument_1_0_0.left.left.View| > 1;
assume {:attribute 24} |argument_1_0_0.left.left.View| > 2;
assume {:attribute 24} argument_1_0_0.Repr == {argument_1_0_0.right, argument_1_0_0.left, argument_1_0_0.left.left, argument_1_0_0.left.right, argument_1_0_0.left.left.right, argument_1_0_0.left.left.left, argument_1_0_0.left.right.left, argument_1_0_0.right.right, argument_1_0_0.right.left, argument_1_0_0};
assume {:attribute 24} argument_1_0_0.left.Repr == {argument_1_0_0.left, argument_1_0_0.left.left, argument_1_0_0.left.right, argument_1_0_0.left.left.right, argument_1_0_0.left.left.left, argument_1_0_0.left.right.left};
assume {:attribute 24} argument_1_0_0.left.right.left in argument_1_0_0.left.Repr;
assume {:attribute 24} argument_1_0_0.left.right.left in argument_1_0_0.Repr;
assume {:attribute 24} !(argument_1_0_0.left.right.left == null);
assume {:attribute 24} argument_1_0_0.left.right in argument_1_0_0.left.right.Repr;
assume {:attribute 24} argument_1_0_0.left.right.Repr == {argument_1_0_0.left.right, argument_1_0_0.left.right.left};
assume {:attribute 24} argument_1_0_0.left.right.left in argument_1_0_0.left.right.Repr;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 3233 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume {:formal} formal_16_1055_1 == 1;
      assume {:formal} formal_17_613_0 == 1;
      assume {:formal} formal_18_760_0 == 2;
      assume {:formal} formal_19_1059_0 == 15;
      assert {:keepAssertion} !(receiver == null) && !(receiver.left == null) && receiver in receiver.Repr && receiver.Repr == {receiver, receiver.left} && receiver.left in receiver.Repr && |receiver.View| > formal_5_46_0 && |receiver.View| > formal_6_48_0 && receiver.left in receiver.left.Repr && receiver.left.Repr == {receiver.left} && |receiver.left.View| > formal_9_87_0 && null == receiver.right && formal_11_607_0 == receiver.Height && formal_12_1048_0 == receiver.value && formal_13_631_0 == receiver.left.Height && formal_14_1051_0 == receiver.View[formal_14_1051_1] && formal_15_1053_0 == receiver.left.View[formal_15_1053_1] && formal_16_1055_0 == receiver.View[formal_16_1055_1] && formal_17_613_0 == |receiver.left.View| && formal_18_760_0 == |receiver.View| && formal_19_1059_0 == receiver.left.value && null == receiver.left.left && null == receiver.left.right;
    }
2024-09-23 13:34:40.5365 INFO Have found the following solution to a subproblem!
{
assume {:attribute 525} !(argument_16_0_0 == null);
assume {:attribute 525} argument_16_0_0 in argument_16_0_0.Repr;
assume {:attribute 525} argument_16_0_0.Repr == {argument_16_0_0};
assume {:attribute 525} |argument_16_0_0.View| > 0;
assume {:attribute 525} null == argument_16_0_0.left;
assume {:attribute 525} null == argument_16_0_0.right;
assume {:attribute 525} 0 == argument_16_0_0.Height;
assume {:attribute 525} 15 == argument_16_0_0.value;
assume {:attribute 525} 1 == |argument_16_0_0.View|;
assume {:attribute 525} 15 == argument_16_0_0.View[0];
argument_12_0_1 := new BinaryTree(argument_16_0_0, null, 16);
}
2024-09-23 13:34:40.5365 INFO Time spend on subproblem: 00:00:00.7018309
2024-09-23 13:34:40.5365 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.6967695)
2024-09-23 13:34:40.5365 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:34:40.5365 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:34:40.5365 INFO Initial heuristic value is 0
2024-09-23 13:34:40.5365 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:34:40.5396 TRACE Verifying the body of the following method:
static method synthesized(formal_3_46_0: int, formal_6_797_0: int, formal_7_1152_0: int, formal_8_801_0: int, formal_9_1051_0: int, formal_9_1051_1: int, argument_17_0_0: BinaryTree?, argument_17_0_1: BinaryTree?, argument_17_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_17_0_0 == null then {} else argument_17_0_0.Repr) * (if argument_17_0_1 == null then {} else argument_17_0_1.Repr) == {} && (argument_17_0_0 == null || argument_17_0_0.IsValid()) && (argument_17_0_1 == null || argument_17_0_1.IsValid());
receiver := new BinaryTree(argument_17_0_0, argument_17_0_1, argument_17_0_2);
assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 15 == receiver.value && 1 == |receiver.View| && 15 == receiver.View[0]);}
2024-09-23 13:34:40.5396 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_46_0: int, formal_6_797_0: int, formal_7_1152_0: int, formal_8_801_0: int, formal_9_1051_0: int, formal_9_1051_1: int, argument_17_0_0: BinaryTree?, argument_17_0_1: BinaryTree?, argument_17_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_17_0_0 == null then {} else argument_17_0_0.Repr) * (if argument_17_0_1 == null then {} else argument_17_0_1.Repr) == {} && (argument_17_0_0 == null || argument_17_0_0.IsValid()) && (argument_17_0_1 == null || argument_17_0_1.IsValid());
      receiver := new BinaryTree(argument_17_0_0, argument_17_0_1, argument_17_0_2);
      assume {:formal} formal_3_46_0 == 0;
      assume {:formal} formal_6_797_0 == 0;
      assume {:formal} formal_7_1152_0 == 15;
      assume {:formal} formal_8_801_0 == 1;
      assume {:formal} formal_9_1051_0 == 15;
      assume {:formal} formal_9_1051_1 == 0;
      assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_46_0 && null == receiver.left && null == receiver.right && formal_6_797_0 == receiver.Height && formal_7_1152_0 == receiver.value && formal_8_801_0 == |receiver.View| && formal_9_1051_0 == receiver.View[formal_9_1051_1]);
    }
2024-09-23 13:34:40.9665 TRACE Verifying the body of the following method:
static method synthesized(formal_3_46_0: int, formal_6_797_0: int, formal_7_1152_0: int, formal_8_801_0: int, formal_9_1051_0: int, formal_9_1051_1: int, argument_17_0_0: BinaryTree?, argument_17_0_1: BinaryTree?, argument_17_0_2: int, formal_0_35_0: int) returns (receiver: BinaryTree) {assume true && (if null == null then {} else null.Repr) * (if null == null then {} else null.Repr) == {} && (null == null || null.IsValid()) && (null == null || null.IsValid());
receiver := new BinaryTree(null, null, 15);
assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 15 == receiver.value && 1 == |receiver.View| && 15 == receiver.View[0];}
2024-09-23 13:34:40.9665 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_46_0: int, formal_6_797_0: int, formal_7_1152_0: int, formal_8_801_0: int, formal_9_1051_0: int, formal_9_1051_1: int, argument_17_0_0: BinaryTree?, argument_17_0_1: BinaryTree?, argument_17_0_2: int, formal_0_35_0: int)
        returns (receiver: BinaryTree)
    {
      assume {:attribute 539} argument_17_0_0 == null;
      assume {:attribute 540} argument_17_0_1 == null;
      assume {:formal} formal_0_35_0 == 15;
      assume {:attribute 541} argument_17_0_2 == formal_0_35_0;
      assume true && (if argument_17_0_0 == null then {} else argument_17_0_0.Repr) * (if argument_17_0_1 == null then {} else argument_17_0_1.Repr) == {} && (argument_17_0_0 == null || argument_17_0_0.IsValid()) && (argument_17_0_1 == null || argument_17_0_1.IsValid());
      receiver := new BinaryTree(argument_17_0_0, argument_17_0_1, argument_17_0_2);
      assume {:formal} formal_3_46_0 == 0;
      assume {:formal} formal_6_797_0 == 0;
      assume {:formal} formal_7_1152_0 == 15;
      assume {:formal} formal_8_801_0 == 1;
      assume {:formal} formal_9_1051_0 == 15;
      assume {:formal} formal_9_1051_1 == 0;
      assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_46_0 && null == receiver.left && null == receiver.right && formal_6_797_0 == receiver.Height && formal_7_1152_0 == receiver.value && formal_8_801_0 == |receiver.View| && formal_9_1051_0 == receiver.View[formal_9_1051_1];
    }
2024-09-23 13:34:41.3380 INFO Have found the following solution to a subproblem!
{
argument_16_0_0 := new BinaryTree(null, null, 15);
}
2024-09-23 13:34:41.3380 INFO Time spend on subproblem: 00:00:00.8010857
2024-09-23 13:34:41.3380 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.7997368)
2024-09-23 13:34:41.3380 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:34:41.3380 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:34:41.3387 INFO Have found the following solution!
static method solution() returns (result:BinaryTree)
ensures Goal(result)
{
var argument_4_0_0 := new BinaryTree(null, null, 0);
var argument_4_0_1 := new BinaryTree(null, null, 2);
var argument_3_0_0 := new BinaryTree(argument_4_0_0, argument_4_0_1, 1);
var argument_7_0_0 := new BinaryTree(null, null, 4);
var argument_3_0_1 := new BinaryTree(argument_7_0_0, null, 5);
var argument_2_0_0 := new BinaryTree(argument_3_0_0, argument_3_0_1, 3);
var argument_9_0_0 := new BinaryTree(null, null, 7);
var argument_9_0_1 := new BinaryTree(null, null, 9);
var argument_2_0_1 := new BinaryTree(argument_9_0_0, argument_9_0_1, 8);
var argument_1_0_0 := new BinaryTree(argument_2_0_0, argument_2_0_1, 6);
var argument_13_0_0 := new BinaryTree(null, null, 11);
var argument_13_0_1 := new BinaryTree(null, null, 13);
var argument_12_0_0 := new BinaryTree(argument_13_0_0, argument_13_0_1, 12);
var argument_16_0_0 := new BinaryTree(null, null, 15);
var argument_12_0_1 := new BinaryTree(argument_16_0_0, null, 16);
var argument_1_0_1 := new BinaryTree(argument_12_0_0, argument_12_0_1, 14);
result := new BinaryTree(argument_1_0_0, argument_1_0_1, 10);
}
2024-09-23 13:34:41.3387 INFO Total time spend on synthesis: 00:00:43.5697447
2024-09-23 13:34:41.3387 INFO Total number of Regular queries to Dafny: 34 (00:00:41.9813471)
2024-09-23 13:34:41.3387 INFO Total number of Simplify queries to Dafny: 0 (00:00:00)
2024-09-23 13:34:41.3387 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
