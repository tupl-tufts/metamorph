2024-09-23 13:30:45.1416 INFO Initial heuristic value is 0
2024-09-23 13:30:45.1440 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:30:45.1905 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_1_1_7: int, formal_1_1_8: int, formal_1_1_9: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] && receiver.Height == 3);}
2024-09-23 13:30:45.1909 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_1_1_7: int, formal_1_1_8: int, formal_1_1_9: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
      receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
      assume {:formal} formal_1_1_0 == 0;
      assume {:formal} formal_1_1_1 == 1;
      assume {:formal} formal_1_1_2 == 2;
      assume {:formal} formal_1_1_3 == 3;
      assume {:formal} formal_1_1_4 == 4;
      assume {:formal} formal_1_1_5 == 5;
      assume {:formal} formal_1_1_6 == 6;
      assume {:formal} formal_1_1_7 == 7;
      assume {:formal} formal_1_1_8 == 8;
      assume {:formal} formal_1_1_9 == 9;
      assume {:formal} formal_2_3_0 == 3;
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [formal_1_1_0, formal_1_1_1, formal_1_1_2, formal_1_1_3, formal_1_1_4, formal_1_1_5, formal_1_1_6, formal_1_1_7, formal_1_1_8, formal_1_1_9] && receiver.Height == formal_2_3_0);
    }
2024-09-23 13:30:48.8300 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_1_1_7: int, formal_1_1_8: int, formal_1_1_9: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int, formal_6_32_0: int, formal_5_32_0: int, formal_7_34_0: int, formal_6_34_0: int, formal_8_36_0: int, formal_9_38_0: int, formal_10_40_0: int, formal_11_42_0: int, formal_12_44_0: int, formal_21_54_0: int, formal_22_56_0: int, formal_23_58_0: int, formal_33_69_0: int, formal_9_69_0: int, formal_34_71_0: int, formal_35_73_0: int, formal_38_77_0: int, formal_41_81_0: int, formal_44_85_0: int, formal_47_89_0: int, formal_48_91_0: int, formal_49_93_0: int, formal_50_95_0: int, formal_51_97_0: int, formal_51_97_1: int, formal_52_99_0: int, formal_53_101_0: int, formal_54_103_0: int, formal_54_103_1: int, formal_55_105_0: int, formal_56_107_0: int, formal_57_109_0: int, formal_58_111_0: int, formal_58_111_1: int, formal_59_113_0: int, formal_59_113_1: int, formal_60_115_0: int, formal_60_115_1: int, formal_61_117_0: int, formal_61_117_1: int, formal_62_119_0: int, formal_62_119_1: int, formal_63_121_0: int, formal_64_123_0: int, formal_65_125_0: int, formal_66_127_0: int, formal_66_127_1: int, formal_67_129_0: int, formal_67_129_1: int, formal_68_131_0: int, formal_68_131_1: int, formal_69_133_0: int, formal_70_135_0: int, formal_71_137_0: int, formal_72_139_0: int, formal_73_141_0: int, formal_73_141_1: int, formal_74_143_0: int, formal_74_143_1: int, formal_75_145_0: int, formal_76_147_0: int, formal_76_147_1: int, formal_77_149_0: int, formal_77_149_1: int, formal_78_151_0: int, formal_79_153_0: int, formal_80_155_0: int, formal_80_155_1: int, formal_81_157_0: int, formal_82_159_0: int, formal_83_161_0: int, formal_83_161_1: int, formal_84_163_0: int, formal_84_163_1: int, formal_85_165_0: int, formal_11_186_0: int, formal_12_188_0: int, formal_13_190_0: int, formal_14_192_0: int, formal_14_192_1: int, formal_15_194_0: int, formal_15_194_1: int, formal_16_196_0: int, formal_16_196_1: int, formal_17_198_0: int, formal_18_200_0: int, formal_19_202_0: int, formal_0_19_0: int) returns (receiver: BinaryTree) {assume {:attribute 17} !(argument_1_0_0 == null);
assume {:attribute 17} !(argument_1_0_0.left == null);
assume {:attribute 17} !(argument_1_0_0.right == null);
assume {:attribute 17} argument_1_0_0 in argument_1_0_0.Repr;
assume {:attribute 17} argument_1_0_0.right in argument_1_0_0.Repr;
assume {:attribute 17} argument_1_0_0.left in argument_1_0_0.Repr;
assume {:attribute 17} |argument_1_0_0.View| > 0;
assume {:attribute 17} |argument_1_0_0.View| > 1;
assume {:attribute 17} |argument_1_0_0.View| > 2;
assume {:attribute 17} |argument_1_0_0.View| > 3;
assume {:attribute 17} |argument_1_0_0.View| > 4;
assume {:attribute 17} |argument_1_0_0.View| > 5;
assume {:attribute 17} |argument_1_0_0.View| > 6;
assume {:attribute 17} argument_1_0_0.right.left in argument_1_0_0.Repr;
assume {:attribute 17} !(argument_1_0_0.right.left == null);
assume {:attribute 17} argument_1_0_0.right.right in argument_1_0_0.Repr;
assume {:attribute 17} !(argument_1_0_0.right.right == null);
assume {:attribute 17} argument_1_0_0.right in argument_1_0_0.right.Repr;
assume {:attribute 17} argument_1_0_0.right.Repr == {argument_1_0_0.right, argument_1_0_0.right.right, argument_1_0_0.right.left};
assume {:attribute 17} argument_1_0_0.right.right in argument_1_0_0.right.Repr;
assume {:attribute 17} argument_1_0_0.right.left in argument_1_0_0.right.Repr;
assume {:attribute 17} |argument_1_0_0.right.View| > 0;
assume {:attribute 17} |argument_1_0_0.right.View| > 1;
assume {:attribute 17} |argument_1_0_0.right.View| > 2;
assume {:attribute 17} argument_1_0_0.left.left in argument_1_0_0.Repr;
assume {:attribute 17} !(argument_1_0_0.left.left == null);
assume {:attribute 17} argument_1_0_0.Repr == {argument_1_0_0.right, argument_1_0_0.left, argument_1_0_0.left.left, argument_1_0_0.left.right, argument_1_0_0.right.right, argument_1_0_0.right.left, argument_1_0_0};
assume {:attribute 17} argument_1_0_0.left.right in argument_1_0_0.Repr;
assume {:attribute 17} !(argument_1_0_0.left.right == null);
assume {:attribute 17} argument_1_0_0.left in argument_1_0_0.left.Repr;
assume {:attribute 17} argument_1_0_0.left.Repr == {argument_1_0_0.left, argument_1_0_0.left.left, argument_1_0_0.left.right};
assume {:attribute 17} argument_1_0_0.left.left in argument_1_0_0.left.Repr;
assume {:attribute 17} argument_1_0_0.left.right in argument_1_0_0.left.Repr;
assume {:attribute 17} |argument_1_0_0.left.View| > 0;
assume {:attribute 17} |argument_1_0_0.left.View| > 1;
assume {:attribute 17} |argument_1_0_0.left.View| > 2;
assume {:attribute 17} argument_1_0_0.right.right in argument_1_0_0.right.right.Repr;
assume {:attribute 17} argument_1_0_0.right.right.Repr == {argument_1_0_0.right.right};
assume {:attribute 17} |argument_1_0_0.right.right.View| > 0;
assume {:attribute 17} argument_1_0_0.right.left in argument_1_0_0.right.left.Repr;
assume {:attribute 17} argument_1_0_0.right.left.Repr == {argument_1_0_0.right.left};
assume {:attribute 17} |argument_1_0_0.right.left.View| > 0;
assume {:attribute 17} argument_1_0_0.left.left in argument_1_0_0.left.left.Repr;
assume {:attribute 17} argument_1_0_0.left.left.Repr == {argument_1_0_0.left.left};
assume {:attribute 17} |argument_1_0_0.left.left.View| > 0;
assume {:attribute 17} argument_1_0_0.left.right in argument_1_0_0.left.right.Repr;
assume {:attribute 17} argument_1_0_0.left.right.Repr == {argument_1_0_0.left.right};
assume {:attribute 17} |argument_1_0_0.left.right.View| > 0;
assume {:attribute 17} 2 == argument_1_0_0.Height;
assume {:attribute 17} 3 == argument_1_0_0.value;
assume {:attribute 17} 7 == |argument_1_0_0.View|;
assume {:attribute 17} 0 == argument_1_0_0.View[0];
assume {:attribute 17} 0 == argument_1_0_0.right.right.Height;
assume {:attribute 17} 0 == argument_1_0_0.right.left.Height;
assume {:attribute 17} 4 == argument_1_0_0.right.View[0];
assume {:attribute 17} 0 == argument_1_0_0.left.left.Height;
assume {:attribute 17} 0 == argument_1_0_0.left.left.value;
assume {:attribute 17} 0 == argument_1_0_0.left.right.Height;
assume {:attribute 17} 0 == argument_1_0_0.left.View[0];
assume {:attribute 17} 6 == argument_1_0_0.right.right.View[0];
assume {:attribute 17} 4 == argument_1_0_0.right.left.View[0];
assume {:attribute 17} 0 == argument_1_0_0.left.left.View[0];
assume {:attribute 17} 2 == argument_1_0_0.left.right.View[0];
assume {:attribute 17} 1 == argument_1_0_0.right.Height;
assume {:attribute 17} 1 == argument_1_0_0.left.Height;
assume {:attribute 17} 1 == argument_1_0_0.left.value;
assume {:attribute 17} 1 == argument_1_0_0.View[1];
assume {:attribute 17} 5 == argument_1_0_0.right.View[1];
assume {:attribute 17} 1 == argument_1_0_0.left.View[1];
assume {:attribute 17} 1 == |argument_1_0_0.right.right.View|;
assume {:attribute 17} 1 == |argument_1_0_0.right.left.View|;
assume {:attribute 17} 1 == |argument_1_0_0.left.left.View|;
assume {:attribute 17} 1 == |argument_1_0_0.left.right.View|;
assume {:attribute 17} 2 == argument_1_0_0.View[2];

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 1396 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume {:formal} formal_12_188_0 == 9;
      assume {:formal} formal_13_190_0 == 0;
      assume {:formal} formal_14_192_0 == 8;
      assume {:formal} formal_14_192_1 == 0;
      assume {:formal} formal_15_194_0 == 8;
      assume {:formal} formal_15_194_1 == 0;
      assume {:formal} formal_16_196_0 == 9;
      assume {:formal} formal_16_196_1 == 1;
      assume {:formal} formal_17_198_0 == 1;
      assume {:formal} formal_18_200_0 == 2;
      assume {:formal} formal_19_202_0 == 8;
      assert {:keepAssertion} !(receiver == null) && !(receiver.left == null) && receiver in receiver.Repr && receiver.Repr == {receiver.left, receiver} && receiver.left in receiver.Repr && |receiver.View| > formal_5_32_0 && |receiver.View| > formal_6_34_0 && receiver.left in receiver.left.Repr && receiver.left.Repr == {receiver.left} && |receiver.left.View| > formal_9_69_0 && null == receiver.right && formal_11_186_0 == receiver.Height && formal_12_188_0 == receiver.value && formal_13_190_0 == receiver.left.Height && formal_14_192_0 == receiver.View[formal_14_192_1] && formal_15_194_0 == receiver.left.View[formal_15_194_1] && formal_16_196_0 == receiver.View[formal_16_196_1] && formal_17_198_0 == |receiver.left.View| && formal_18_200_0 == |receiver.View| && formal_19_202_0 == receiver.left.value && null == receiver.left.left && null == receiver.left.right;
    }
2024-09-23 13:30:58.7192 INFO Have found the following solution to a subproblem!
{
assume {:attribute 240} !(argument_9_0_0 == null);
assume {:attribute 240} argument_9_0_0 in argument_9_0_0.Repr;
assume {:attribute 240} argument_9_0_0.Repr == {argument_9_0_0};
assume {:attribute 240} |argument_9_0_0.View| > 0;
assume {:attribute 240} null == argument_9_0_0.left;
assume {:attribute 240} null == argument_9_0_0.right;
assume {:attribute 240} 0 == argument_9_0_0.Height;
assume {:attribute 240} 8 == argument_9_0_0.value;
assume {:attribute 240} 1 == |argument_9_0_0.View|;
assume {:attribute 240} 8 == argument_9_0_0.View[0];
argument_1_0_1 := new BinaryTree(argument_9_0_0, null, 9);
}
2024-09-23 13:30:58.7192 INFO Time spend on subproblem: 00:00:00.6406272
2024-09-23 13:30:58.7192 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.6361085)
2024-09-23 13:30:58.7192 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:58.7192 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:58.7192 INFO Initial heuristic value is 0
2024-09-23 13:30:58.7192 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:30:58.7192 TRACE Verifying the body of the following method:
static method synthesized(formal_3_32_0: int, formal_6_393_0: int, formal_7_519_0: int, formal_8_397_0: int, formal_9_192_0: int, formal_9_192_1: int, argument_10_0_0: BinaryTree?, argument_10_0_1: BinaryTree?, argument_10_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_10_0_0 == null then {} else argument_10_0_0.Repr) * (if argument_10_0_1 == null then {} else argument_10_0_1.Repr) == {} && (argument_10_0_0 == null || argument_10_0_0.IsValid()) && (argument_10_0_1 == null || argument_10_0_1.IsValid());
receiver := new BinaryTree(argument_10_0_0, argument_10_0_1, argument_10_0_2);
assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 8 == receiver.value && 1 == |receiver.View| && 8 == receiver.View[0]);}
2024-09-23 13:30:58.7228 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_32_0: int, formal_6_393_0: int, formal_7_519_0: int, formal_8_397_0: int, formal_9_192_0: int, formal_9_192_1: int, argument_10_0_0: BinaryTree?, argument_10_0_1: BinaryTree?, argument_10_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_10_0_0 == null then {} else argument_10_0_0.Repr) * (if argument_10_0_1 == null then {} else argument_10_0_1.Repr) == {} && (argument_10_0_0 == null || argument_10_0_0.IsValid()) && (argument_10_0_1 == null || argument_10_0_1.IsValid());
      receiver := new BinaryTree(argument_10_0_0, argument_10_0_1, argument_10_0_2);
      assume {:formal} formal_3_32_0 == 0;
      assume {:formal} formal_6_393_0 == 0;
      assume {:formal} formal_7_519_0 == 8;
      assume {:formal} formal_8_397_0 == 1;
      assume {:formal} formal_9_192_0 == 8;
      assume {:formal} formal_9_192_1 == 0;
      assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_32_0 && null == receiver.left && null == receiver.right && formal_6_393_0 == receiver.Height && formal_7_519_0 == receiver.value && formal_8_397_0 == |receiver.View| && formal_9_192_0 == receiver.View[formal_9_192_1]);
    }
2024-09-23 13:30:59.0237 TRACE Verifying the body of the following method:
static method synthesized(formal_3_32_0: int, formal_6_393_0: int, formal_7_519_0: int, formal_8_397_0: int, formal_9_192_0: int, formal_9_192_1: int, argument_10_0_0: BinaryTree?, argument_10_0_1: BinaryTree?, argument_10_0_2: int, formal_0_21_0: int) returns (receiver: BinaryTree) {assume true && (if null == null then {} else null.Repr) * (if null == null then {} else null.Repr) == {} && (null == null || null.IsValid()) && (null == null || null.IsValid());
receiver := new BinaryTree(null, null, 8);
assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 8 == receiver.value && 1 == |receiver.View| && 8 == receiver.View[0];}
2024-09-23 13:30:59.0237 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_32_0: int, formal_6_393_0: int, formal_7_519_0: int, formal_8_397_0: int, formal_9_192_0: int, formal_9_192_1: int, argument_10_0_0: BinaryTree?, argument_10_0_1: BinaryTree?, argument_10_0_2: int, formal_0_21_0: int)
        returns (receiver: BinaryTree)
    {
      assume {:attribute 254} argument_10_0_0 == null;
      assume {:attribute 255} argument_10_0_1 == null;
      assume {:formal} formal_0_21_0 == 8;
      assume {:attribute 256} argument_10_0_2 == formal_0_21_0;
      assume true && (if argument_10_0_0 == null then {} else argument_10_0_0.Repr) * (if argument_10_0_1 == null then {} else argument_10_0_1.Repr) == {} && (argument_10_0_0 == null || argument_10_0_0.IsValid()) && (argument_10_0_1 == null || argument_10_0_1.IsValid());
      receiver := new BinaryTree(argument_10_0_0, argument_10_0_1, argument_10_0_2);
      assume {:formal} formal_3_32_0 == 0;
      assume {:formal} formal_6_393_0 == 0;
      assume {:formal} formal_7_519_0 == 8;
      assume {:formal} formal_8_397_0 == 1;
      assume {:formal} formal_9_192_0 == 8;
      assume {:formal} formal_9_192_1 == 0;
      assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_32_0 && null == receiver.left && null == receiver.right && formal_6_393_0 == receiver.Height && formal_7_519_0 == receiver.value && formal_8_397_0 == |receiver.View| && formal_9_192_0 == receiver.View[formal_9_192_1];
    }
2024-09-23 13:30:59.2566 INFO Have found the following solution to a subproblem!
{
argument_9_0_0 := new BinaryTree(null, null, 8);
}
2024-09-23 13:30:59.2566 INFO Time spend on subproblem: 00:00:00.5369666
2024-09-23 13:30:59.2566 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.5358120)
2024-09-23 13:30:59.2566 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:59.2566 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:59.2566 INFO Have found the following solution!
static method solution() returns (result:BinaryTree)
ensures Goal(result)
{
var argument_3_0_0 := new BinaryTree(null, null, 0);
var argument_3_0_1 := new BinaryTree(null, null, 2);
var argument_2_0_0 := new BinaryTree(argument_3_0_0, argument_3_0_1, 1);
var argument_6_0_0 := new BinaryTree(null, null, 4);
var argument_6_0_1 := new BinaryTree(null, null, 6);
var argument_2_0_1 := new BinaryTree(argument_6_0_0, argument_6_0_1, 5);
var argument_1_0_0 := new BinaryTree(argument_2_0_0, argument_2_0_1, 3);
var argument_9_0_0 := new BinaryTree(null, null, 8);
var argument_1_0_1 := new BinaryTree(argument_9_0_0, null, 9);
result := new BinaryTree(argument_1_0_0, argument_1_0_1, 7);
}
2024-09-23 13:30:59.2566 INFO Total time spend on synthesis: 00:00:14.2233785
2024-09-23 13:30:59.2566 INFO Total number of Regular queries to Dafny: 20 (00:00:13.7257164)
2024-09-23 13:30:59.2566 INFO Total number of Simplify queries to Dafny: 0 (00:00:00)
2024-09-23 13:30:59.2566 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
