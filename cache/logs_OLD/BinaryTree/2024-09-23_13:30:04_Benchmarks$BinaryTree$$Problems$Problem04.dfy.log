2024-09-23 13:30:05.2742 INFO Initial heuristic value is 0
2024-09-23 13:30:05.2766 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:30:05.3241 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [0, 1, 2, 3, 4] && receiver.Height == 2);}
2024-09-23 13:30:05.3241 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
      receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
      assume {:formal} formal_1_1_0 == 0;
      assume {:formal} formal_1_1_1 == 1;
      assume {:formal} formal_1_1_2 == 2;
      assume {:formal} formal_1_1_3 == 3;
      assume {:formal} formal_1_1_4 == 4;
      assume {:formal} formal_2_3_0 == 2;
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [formal_1_1_0, formal_1_1_1, formal_1_1_2, formal_1_1_3, formal_1_1_4] && receiver.Height == formal_2_3_0);
    }
2024-09-23 13:30:06.6858 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int, formal_7_23_0: int, formal_3_23_0: int, formal_8_25_0: int, formal_9_27_0: int, formal_12_31_0: int, formal_15_35_0: int, formal_16_37_0: int, formal_17_39_0: int, formal_18_41_0: int, formal_19_43_0: int, formal_20_45_0: int, formal_21_47_0: int, formal_22_49_0: int, formal_22_49_1: int, formal_23_51_0: int, formal_23_51_1: int, formal_24_53_0: int, formal_24_53_1: int, formal_25_55_0: int, formal_25_55_1: int, formal_26_57_0: int, formal_27_59_0: int, formal_28_61_0: int, formal_29_63_0: int, formal_29_63_1: int, formal_6_75_0: int, formal_7_77_0: int, formal_8_79_0: int, formal_8_79_1: int, formal_9_81_0: int, formal_0_11_0: int) returns (receiver: BinaryTree) {assume {:attribute 12} !(argument_1_0_0 == null);
assume {:attribute 12} !(argument_1_0_0.left == null);
assume {:attribute 12} !(argument_1_0_0.right == null);
assume {:attribute 12} argument_1_0_0 in argument_1_0_0.Repr;
assume {:attribute 12} argument_1_0_0.Repr == {argument_1_0_0.left, argument_1_0_0.right, argument_1_0_0};
assume {:attribute 12} argument_1_0_0.left in argument_1_0_0.Repr;
assume {:attribute 12} argument_1_0_0.right in argument_1_0_0.Repr;
assume {:attribute 12} |argument_1_0_0.View| > 0;
assume {:attribute 12} |argument_1_0_0.View| > 1;
assume {:attribute 12} |argument_1_0_0.View| > 2;
assume {:attribute 12} argument_1_0_0.left in argument_1_0_0.left.Repr;
assume {:attribute 12} argument_1_0_0.left.Repr == {argument_1_0_0.left};
assume {:attribute 12} |argument_1_0_0.left.View| > 0;
assume {:attribute 12} argument_1_0_0.right in argument_1_0_0.right.Repr;
assume {:attribute 12} argument_1_0_0.right.Repr == {argument_1_0_0.right};
assume {:attribute 12} |argument_1_0_0.right.View| > 0;
assume {:attribute 12} 1 == argument_1_0_0.Height;
assume {:attribute 12} 1 == argument_1_0_0.value;
assume {:attribute 12} 3 == |argument_1_0_0.View|;
assume {:attribute 12} 0 == argument_1_0_0.left.Height;
assume {:attribute 12} 0 == argument_1_0_0.left.value;
assume {:attribute 12} 0 == argument_1_0_0.right.Height;
assume {:attribute 12} 0 == argument_1_0_0.View[0];
assume {:attribute 12} 0 == argument_1_0_0.left.View[0];
assume {:attribute 12} 2 == argument_1_0_0.right.View[0];
assume {:attribute 12} 1 == argument_1_0_0.View[1];
assume {:attribute 12} 1 == |argument_1_0_0.left.View|;
assume {:attribute 12} 1 == |argument_1_0_0.right.View|;
assume {:attribute 12} 2 == argument_1_0_0.right.value;
assume {:attribute 12} 2 == argument_1_0_0.View[2];
assume {:attribute 12} null == argument_1_0_0.left.left;
assume {:attribute 12} null == argument_1_0_0.left.right;
assume {:attribute 12} null == argument_1_0_0.right.left;
assume {:attribute 12} null == argument_1_0_0.right.right;
assume {:attribute 13} !(argument_1_0_1 == null);
assume {:attribute 13} argument_1_0_1 in argument_1_0_1.Repr;
assume {:attribute 13} argument_1_0_1.Repr == {argument_1_0_1};
assume {:attribute 13} |argument_1_0_1.View| > 0;
assume {:attribute 13} null == argument_1_0_1.left;
assume {:attribute 13} null == argument_1_0_1.right;
assume {:attribute 13} 0 == argument_1_0_1.Height;
assume {:attribute 13} 4 == argument_1_0_1.value;
assume {:attribute 13} 4 == argument_1_0_1.View[0];
assume {:attribute 13} 1 == |argument_1_0_1.View|;
assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, 3);
assert {:keepAssertion} receiver.IsValid() && receiver.View == [0, 1, 2, 3, 4] && receiver.Height == 2;}
2024-09-23 13:30:06.6866 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int, formal_7_23_0: int, formal_3_23_0: int, formal_8_25_0: int, formal_9_27_0: int, formal_12_31_0: int, formal_15_35_0: int, formal_16_37_0: int, formal_17_39_0: int, formal_18_41_0: int, formal_19_43_0: int, formal_20_45_0: int, formal_21_47_0: int, formal_22_49_0: int, formal_22_49_1: int, formal_23_51_0: int, formal_23_51_1: int, formal_24_53_0: int, formal_24_53_1: int, formal_25_55_0: int, formal_25_55_1: int, formal_26_57_0: int, formal_27_59_0: int, formal_28_61_0: int, formal_29_63_0: int, formal_29_63_1: int, formal_6_75_0: int, formal_7_77_0: int, formal_8_79_0: int, formal_8_79_1: int, formal_9_81_0: int, formal_0_11_0: int)
        returns (receiver: BinaryTree)
    {
      assume {:formal} formal_7_23_0 == 0;
      assume {:formal} formal_8_25_0 == 1;
      assume {:formal} formal_9_27_0 == 2;
      assume {:formal} formal_12_31_0 == 0;
      assume {:formal} formal_15_35_0 == 0;
      assume {:formal} formal_16_37_0 == 1;
      assume {:formal} formal_17_39_0 == 1;
      assume {:formal} formal_18_41_0 == 3;
      assume {:formal} formal_19_43_0 == 0;
      assume {:formal} formal_20_45_0 == 0;
      assume {:formal} formal_21_47_0 == 0;
      assume {:formal} formal_22_49_0 == 0;
      assume {:formal} formal_22_49_1 == 0;
      assume {:formal} formal_23_51_0 == 0;
      assume {:formal} formal_23_51_1 == 0;
      assume {:formal} formal_24_53_0 == 2;
      assume {:formal} formal_24_53_1 == 0;
      assume {:formal} formal_25_55_0 == 1;
      assume {:formal} formal_25_55_1 == 1;
      assume {:formal} formal_26_57_0 == 1;
      assume {:formal} formal_27_59_0 == 1;
      assume {:formal} formal_28_61_0 == 2;
      assume {:formal} formal_29_63_0 == 2;
      assume {:formal} formal_29_63_1 == 2;
      assume {:attribute 12} !(argument_1_0_0 == null);
      assume {:attribute 12} !(argument_1_0_0.left == null);
      assume {:attribute 12} !(argument_1_0_0.right == null);
      assume {:attribute 12} argument_1_0_0 in argument_1_0_0.Repr;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 327 LINES OF LOGS TO SAVE DISK SPACE ***************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume {:formal} formal_7_126_0 == 2;
      assume {:formal} formal_8_81_0 == 1;
      assume {:formal} formal_9_129_0 == 2;
      assume {:formal} formal_9_129_1 == 0;
      assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_23_0 && null == receiver.left && null == receiver.right && formal_6_75_0 == receiver.Height && formal_7_126_0 == receiver.value && formal_8_81_0 == |receiver.View| && formal_9_129_0 == receiver.View[formal_9_129_1]);
    }
2024-09-23 13:30:08.9189 TRACE Verifying the body of the following method:
static method synthesized(formal_3_23_0: int, formal_6_75_0: int, formal_7_126_0: int, formal_8_81_0: int, formal_9_129_0: int, formal_9_129_1: int, argument_4_0_0: BinaryTree?, argument_4_0_1: BinaryTree?, argument_4_0_2: int, formal_0_9_0: int) returns (receiver: BinaryTree) {assume true && (if null == null then {} else null.Repr) * (if null == null then {} else null.Repr) == {} && (null == null || null.IsValid()) && (null == null || null.IsValid());
receiver := new BinaryTree(null, null, 2);
assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 2 == receiver.value && 1 == |receiver.View| && 2 == receiver.View[0];}
2024-09-23 13:30:08.9189 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_23_0: int, formal_6_75_0: int, formal_7_126_0: int, formal_8_81_0: int, formal_9_129_0: int, formal_9_129_1: int, argument_4_0_0: BinaryTree?, argument_4_0_1: BinaryTree?, argument_4_0_2: int, formal_0_9_0: int)
        returns (receiver: BinaryTree)
    {
      assume {:attribute 72} argument_4_0_0 == null;
      assume {:attribute 73} argument_4_0_1 == null;
      assume {:formal} formal_0_9_0 == 2;
      assume {:attribute 74} argument_4_0_2 == formal_0_9_0;
      assume true && (if argument_4_0_0 == null then {} else argument_4_0_0.Repr) * (if argument_4_0_1 == null then {} else argument_4_0_1.Repr) == {} && (argument_4_0_0 == null || argument_4_0_0.IsValid()) && (argument_4_0_1 == null || argument_4_0_1.IsValid());
      receiver := new BinaryTree(argument_4_0_0, argument_4_0_1, argument_4_0_2);
      assume {:formal} formal_3_23_0 == 0;
      assume {:formal} formal_6_75_0 == 0;
      assume {:formal} formal_7_126_0 == 2;
      assume {:formal} formal_8_81_0 == 1;
      assume {:formal} formal_9_129_0 == 2;
      assume {:formal} formal_9_129_1 == 0;
      assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_23_0 && null == receiver.left && null == receiver.right && formal_6_75_0 == receiver.Height && formal_7_126_0 == receiver.value && formal_8_81_0 == |receiver.View| && formal_9_129_0 == receiver.View[formal_9_129_1];
    }
2024-09-23 13:30:09.1631 INFO Have found the following solution to a subproblem!
{
argument_2_0_1 := new BinaryTree(null, null, 2);
}
2024-09-23 13:30:09.1631 INFO Time spend on subproblem: 00:00:00.5516448
2024-09-23 13:30:09.1631 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.5503423)
2024-09-23 13:30:09.1631 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:09.1631 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:09.1631 INFO Initial heuristic value is 0
2024-09-23 13:30:09.1631 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:30:09.1631 TRACE Verifying the body of the following method:
static method synthesized(formal_3_23_0: int, formal_6_75_0: int, formal_7_77_0: int, formal_8_79_0: int, formal_8_79_1: int, formal_9_81_0: int, argument_5_0_0: BinaryTree?, argument_5_0_1: BinaryTree?, argument_5_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_5_0_0 == null then {} else argument_5_0_0.Repr) * (if argument_5_0_1 == null then {} else argument_5_0_1.Repr) == {} && (argument_5_0_0 == null || argument_5_0_0.IsValid()) && (argument_5_0_1 == null || argument_5_0_1.IsValid());
receiver := new BinaryTree(argument_5_0_0, argument_5_0_1, argument_5_0_2);
assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 4 == receiver.value && 4 == receiver.View[0] && 1 == |receiver.View|);}
2024-09-23 13:30:09.1631 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_23_0: int, formal_6_75_0: int, formal_7_77_0: int, formal_8_79_0: int, formal_8_79_1: int, formal_9_81_0: int, argument_5_0_0: BinaryTree?, argument_5_0_1: BinaryTree?, argument_5_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_5_0_0 == null then {} else argument_5_0_0.Repr) * (if argument_5_0_1 == null then {} else argument_5_0_1.Repr) == {} && (argument_5_0_0 == null || argument_5_0_0.IsValid()) && (argument_5_0_1 == null || argument_5_0_1.IsValid());
      receiver := new BinaryTree(argument_5_0_0, argument_5_0_1, argument_5_0_2);
      assume {:formal} formal_3_23_0 == 0;
      assume {:formal} formal_6_75_0 == 0;
      assume {:formal} formal_7_77_0 == 4;
      assume {:formal} formal_8_79_0 == 4;
      assume {:formal} formal_8_79_1 == 0;
      assume {:formal} formal_9_81_0 == 1;
      assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_23_0 && null == receiver.left && null == receiver.right && formal_6_75_0 == receiver.Height && formal_7_77_0 == receiver.value && formal_8_79_0 == receiver.View[formal_8_79_1] && formal_9_81_0 == |receiver.View|);
    }
2024-09-23 13:30:09.4581 TRACE Verifying the body of the following method:
static method synthesized(formal_3_23_0: int, formal_6_75_0: int, formal_7_77_0: int, formal_8_79_0: int, formal_8_79_1: int, formal_9_81_0: int, argument_5_0_0: BinaryTree?, argument_5_0_1: BinaryTree?, argument_5_0_2: int, formal_0_13_0: int) returns (receiver: BinaryTree) {assume true && (if null == null then {} else null.Repr) * (if null == null then {} else null.Repr) == {} && (null == null || null.IsValid()) && (null == null || null.IsValid());
receiver := new BinaryTree(null, null, 4);
assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 4 == receiver.value && 4 == receiver.View[0] && 1 == |receiver.View|;}
2024-09-23 13:30:09.4581 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_23_0: int, formal_6_75_0: int, formal_7_77_0: int, formal_8_79_0: int, formal_8_79_1: int, formal_9_81_0: int, argument_5_0_0: BinaryTree?, argument_5_0_1: BinaryTree?, argument_5_0_2: int, formal_0_13_0: int)
        returns (receiver: BinaryTree)
    {
      assume {:attribute 86} argument_5_0_0 == null;
      assume {:attribute 87} argument_5_0_1 == null;
      assume {:formal} formal_0_13_0 == 4;
      assume {:attribute 88} argument_5_0_2 == formal_0_13_0;
      assume true && (if argument_5_0_0 == null then {} else argument_5_0_0.Repr) * (if argument_5_0_1 == null then {} else argument_5_0_1.Repr) == {} && (argument_5_0_0 == null || argument_5_0_0.IsValid()) && (argument_5_0_1 == null || argument_5_0_1.IsValid());
      receiver := new BinaryTree(argument_5_0_0, argument_5_0_1, argument_5_0_2);
      assume {:formal} formal_3_23_0 == 0;
      assume {:formal} formal_6_75_0 == 0;
      assume {:formal} formal_7_77_0 == 4;
      assume {:formal} formal_8_79_0 == 4;
      assume {:formal} formal_8_79_1 == 0;
      assume {:formal} formal_9_81_0 == 1;
      assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_23_0 && null == receiver.left && null == receiver.right && formal_6_75_0 == receiver.Height && formal_7_77_0 == receiver.value && formal_8_79_0 == receiver.View[formal_8_79_1] && formal_9_81_0 == |receiver.View|;
    }
2024-09-23 13:30:09.7501 INFO Have found the following solution to a subproblem!
{
argument_1_0_1 := new BinaryTree(null, null, 4);
}
2024-09-23 13:30:09.7501 INFO Time spend on subproblem: 00:00:00.5868868
2024-09-23 13:30:09.7501 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.5856857)
2024-09-23 13:30:09.7501 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:09.7506 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:09.7506 INFO Have found the following solution!
static method solution() returns (result:BinaryTree)
ensures Goal(result)
{
var argument_2_0_0 := new BinaryTree(null, null, 0);
var argument_2_0_1 := new BinaryTree(null, null, 2);
var argument_1_0_0 := new BinaryTree(argument_2_0_0, argument_2_0_1, 1);
var argument_1_0_1 := new BinaryTree(null, null, 4);
result := new BinaryTree(argument_1_0_0, argument_1_0_1, 3);
}
2024-09-23 13:30:09.7506 INFO Total time spend on synthesis: 00:00:04.5967639
2024-09-23 13:30:09.7506 INFO Total number of Regular queries to Dafny: 10 (00:00:04.3852270)
2024-09-23 13:30:09.7506 INFO Total number of Simplify queries to Dafny: 0 (00:00:00)
2024-09-23 13:30:09.7506 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
