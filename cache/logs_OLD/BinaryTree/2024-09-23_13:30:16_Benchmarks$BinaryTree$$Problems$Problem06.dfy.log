2024-09-23 13:30:17.3728 INFO Initial heuristic value is 0
2024-09-23 13:30:17.3752 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:30:17.4249 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [0, 1, 2, 3, 4, 5, 6] && receiver.Height == 2);}
2024-09-23 13:30:17.4249 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
      receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, argument_1_0_2);
      assume {:formal} formal_1_1_0 == 0;
      assume {:formal} formal_1_1_1 == 1;
      assume {:formal} formal_1_1_2 == 2;
      assume {:formal} formal_1_1_3 == 3;
      assume {:formal} formal_1_1_4 == 4;
      assume {:formal} formal_1_1_5 == 5;
      assume {:formal} formal_1_1_6 == 6;
      assume {:formal} formal_2_3_0 == 2;
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View == [formal_1_1_0, formal_1_1_1, formal_1_1_2, formal_1_1_3, formal_1_1_4, formal_1_1_5, formal_1_1_6] && receiver.Height == formal_2_3_0);
    }
2024-09-23 13:30:19.0050 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int, formal_7_27_0: int, formal_8_29_0: int, formal_9_31_0: int, formal_12_35_0: int, formal_15_39_0: int, formal_16_41_0: int, formal_17_43_0: int, formal_18_45_0: int, formal_19_47_0: int, formal_20_49_0: int, formal_21_51_0: int, formal_22_53_0: int, formal_22_53_1: int, formal_23_55_0: int, formal_23_55_1: int, formal_24_57_0: int, formal_24_57_1: int, formal_25_59_0: int, formal_25_59_1: int, formal_26_61_0: int, formal_25_61_0: int, formal_27_63_0: int, formal_26_63_0: int, formal_28_65_0: int, formal_29_67_0: int, formal_29_67_1: int, formal_17_90_0: int, formal_21_95_0: int, formal_21_95_1: int, formal_22_97_0: int, formal_22_97_1: int, formal_23_99_0: int, formal_23_99_1: int, formal_24_101_0: int, formal_24_101_1: int, formal_27_105_0: int, formal_27_105_1: int, formal_28_107_0: int, formal_29_109_0: int, formal_0_11_0: int) returns (receiver: BinaryTree) {assume {:attribute 14} !(argument_1_0_0 == null);
assume {:attribute 14} !(argument_1_0_0.left == null);
assume {:attribute 14} !(argument_1_0_0.right == null);
assume {:attribute 14} argument_1_0_0 in argument_1_0_0.Repr;
assume {:attribute 14} argument_1_0_0.Repr == {argument_1_0_0.right, argument_1_0_0.left, argument_1_0_0};
assume {:attribute 14} argument_1_0_0.right in argument_1_0_0.Repr;
assume {:attribute 14} argument_1_0_0.left in argument_1_0_0.Repr;
assume {:attribute 14} |argument_1_0_0.View| > 0;
assume {:attribute 14} |argument_1_0_0.View| > 1;
assume {:attribute 14} |argument_1_0_0.View| > 2;
assume {:attribute 14} argument_1_0_0.right in argument_1_0_0.right.Repr;
assume {:attribute 14} argument_1_0_0.right.Repr == {argument_1_0_0.right};
assume {:attribute 14} |argument_1_0_0.right.View| > 0;
assume {:attribute 14} argument_1_0_0.left in argument_1_0_0.left.Repr;
assume {:attribute 14} argument_1_0_0.left.Repr == {argument_1_0_0.left};
assume {:attribute 14} |argument_1_0_0.left.View| > 0;
assume {:attribute 14} 1 == argument_1_0_0.Height;
assume {:attribute 14} 1 == argument_1_0_0.value;
assume {:attribute 14} 3 == |argument_1_0_0.View|;
assume {:attribute 14} 0 == argument_1_0_0.right.Height;
assume {:attribute 14} 0 == argument_1_0_0.left.Height;
assume {:attribute 14} 0 == argument_1_0_0.left.value;
assume {:attribute 14} 0 == argument_1_0_0.View[0];
assume {:attribute 14} 2 == argument_1_0_0.right.View[0];
assume {:attribute 14} 0 == argument_1_0_0.left.View[0];
assume {:attribute 14} 1 == argument_1_0_0.View[1];
assume {:attribute 14} 1 == |argument_1_0_0.right.View|;
assume {:attribute 14} 1 == |argument_1_0_0.left.View|;
assume {:attribute 14} 2 == argument_1_0_0.right.value;
assume {:attribute 14} 2 == argument_1_0_0.View[2];
assume {:attribute 14} null == argument_1_0_0.right.left;
assume {:attribute 14} null == argument_1_0_0.right.right;
assume {:attribute 14} null == argument_1_0_0.left.left;
assume {:attribute 14} null == argument_1_0_0.left.right;
assume {:attribute 15} !(argument_1_0_1 == null);
assume {:attribute 15} !(argument_1_0_1.left == null);
assume {:attribute 15} !(argument_1_0_1.right == null);
assume {:attribute 15} argument_1_0_1 in argument_1_0_1.Repr;
assume {:attribute 15} argument_1_0_1.Repr == {argument_1_0_1.right, argument_1_0_1.left, argument_1_0_1};
assume {:attribute 15} argument_1_0_1.right in argument_1_0_1.Repr;
assume {:attribute 15} argument_1_0_1.left in argument_1_0_1.Repr;
assume {:attribute 15} |argument_1_0_1.View| > 0;
assume {:attribute 15} |argument_1_0_1.View| > 1;
assume {:attribute 15} |argument_1_0_1.View| > 2;
assume {:attribute 15} argument_1_0_1.right in argument_1_0_1.right.Repr;
assume {:attribute 15} argument_1_0_1.right.Repr == {argument_1_0_1.right};
assume {:attribute 15} |argument_1_0_1.right.View| > 0;
assume {:attribute 15} argument_1_0_1.left in argument_1_0_1.left.Repr;
assume {:attribute 15} argument_1_0_1.left.Repr == {argument_1_0_1.left};
assume {:attribute 15} |argument_1_0_1.left.View| > 0;
assume {:attribute 15} 1 == argument_1_0_1.Height;
assume {:attribute 15} 5 == argument_1_0_1.value;
assume {:attribute 15} 3 == |argument_1_0_1.View|;
assume {:attribute 15} 0 == argument_1_0_1.right.Height;
assume {:attribute 15} 0 == argument_1_0_1.left.Height;
assume {:attribute 15} 4 == argument_1_0_1.View[0];
assume {:attribute 15} 6 == argument_1_0_1.right.View[0];
assume {:attribute 15} 4 == argument_1_0_1.left.View[0];
assume {:attribute 15} 5 == argument_1_0_1.View[1];
assume {:attribute 15} 1 == |argument_1_0_1.right.View|;
assume {:attribute 15} 1 == |argument_1_0_1.left.View|;
assume {:attribute 15} 6 == argument_1_0_1.View[2];
assume {:attribute 15} 4 == argument_1_0_1.left.value;
assume {:attribute 15} 6 == argument_1_0_1.right.value;
assume {:attribute 15} null == argument_1_0_1.right.left;
assume {:attribute 15} null == argument_1_0_1.right.right;
assume {:attribute 15} null == argument_1_0_1.left.left;
assume {:attribute 15} null == argument_1_0_1.left.right;
assume true && (if argument_1_0_0 == null then {} else argument_1_0_0.Repr) * (if argument_1_0_1 == null then {} else argument_1_0_1.Repr) == {} && (argument_1_0_0 == null || argument_1_0_0.IsValid()) && (argument_1_0_1 == null || argument_1_0_1.IsValid());
receiver := new BinaryTree(argument_1_0_0, argument_1_0_1, 3);
assert {:keepAssertion} receiver.IsValid() && receiver.View == [0, 1, 2, 3, 4, 5, 6] && receiver.Height == 2;}
2024-09-23 13:30:19.0050 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_1_0: int, formal_1_1_1: int, formal_1_1_2: int, formal_1_1_3: int, formal_1_1_4: int, formal_1_1_5: int, formal_1_1_6: int, formal_2_3_0: int, argument_1_0_0: BinaryTree?, argument_1_0_1: BinaryTree?, argument_1_0_2: int, formal_7_27_0: int, formal_8_29_0: int, formal_9_31_0: int, formal_12_35_0: int, formal_15_39_0: int, formal_16_41_0: int, formal_17_43_0: int, formal_18_45_0: int, formal_19_47_0: int, formal_20_49_0: int, formal_21_51_0: int, formal_22_53_0: int, formal_22_53_1: int, formal_23_55_0: int, formal_23_55_1: int, formal_24_57_0: int, formal_24_57_1: int, formal_25_59_0: int, formal_25_59_1: int, formal_26_61_0: int, formal_25_61_0: int, formal_27_63_0: int, formal_26_63_0: int, formal_28_65_0: int, formal_29_67_0: int, formal_29_67_1: int, formal_17_90_0: int, formal_21_95_0: int, formal_21_95_1: int, formal_22_97_0: int, formal_22_97_1: int, formal_23_99_0: int, formal_23_99_1: int, formal_24_101_0: int, formal_24_101_1: int, formal_27_105_0: int, formal_27_105_1: int, formal_28_107_0: int, formal_29_109_0: int, formal_0_11_0: int)
        returns (receiver: BinaryTree)
    {
      assume {:formal} formal_7_27_0 == 0;
      assume {:formal} formal_8_29_0 == 1;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 617 LINES OF LOGS TO SAVE DISK SPACE ***************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume {:formal} formal_8_95_1 == 0;
      assume {:formal} formal_9_150_0 == 1;
      assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_27_0 && null == receiver.left && null == receiver.right && formal_6_146_0 == receiver.Height && formal_7_215_0 == receiver.value && formal_8_95_0 == receiver.View[formal_8_95_1] && formal_9_150_0 == |receiver.View|);
    }
2024-09-23 13:30:22.9480 TRACE Verifying the body of the following method:
static method synthesized(formal_3_27_0: int, formal_6_146_0: int, formal_7_215_0: int, formal_8_95_0: int, formal_8_95_1: int, formal_9_150_0: int, argument_6_0_0: BinaryTree?, argument_6_0_1: BinaryTree?, argument_6_0_2: int, formal_0_13_0: int) returns (receiver: BinaryTree) {assume true && (if null == null then {} else null.Repr) * (if null == null then {} else null.Repr) == {} && (null == null || null.IsValid()) && (null == null || null.IsValid());
receiver := new BinaryTree(null, null, 4);
assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 4 == receiver.value && 4 == receiver.View[0] && 1 == |receiver.View|;}
2024-09-23 13:30:22.9480 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_27_0: int, formal_6_146_0: int, formal_7_215_0: int, formal_8_95_0: int, formal_8_95_1: int, formal_9_150_0: int, argument_6_0_0: BinaryTree?, argument_6_0_1: BinaryTree?, argument_6_0_2: int, formal_0_13_0: int)
        returns (receiver: BinaryTree)
    {
      assume {:attribute 120} argument_6_0_0 == null;
      assume {:attribute 121} argument_6_0_1 == null;
      assume {:formal} formal_0_13_0 == 4;
      assume {:attribute 122} argument_6_0_2 == formal_0_13_0;
      assume true && (if argument_6_0_0 == null then {} else argument_6_0_0.Repr) * (if argument_6_0_1 == null then {} else argument_6_0_1.Repr) == {} && (argument_6_0_0 == null || argument_6_0_0.IsValid()) && (argument_6_0_1 == null || argument_6_0_1.IsValid());
      receiver := new BinaryTree(argument_6_0_0, argument_6_0_1, argument_6_0_2);
      assume {:formal} formal_3_27_0 == 0;
      assume {:formal} formal_6_146_0 == 0;
      assume {:formal} formal_7_215_0 == 4;
      assume {:formal} formal_8_95_0 == 4;
      assume {:formal} formal_8_95_1 == 0;
      assume {:formal} formal_9_150_0 == 1;
      assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_27_0 && null == receiver.left && null == receiver.right && formal_6_146_0 == receiver.Height && formal_7_215_0 == receiver.value && formal_8_95_0 == receiver.View[formal_8_95_1] && formal_9_150_0 == |receiver.View|;
    }
2024-09-23 13:30:23.1847 INFO Have found the following solution to a subproblem!
{
argument_5_0_0 := new BinaryTree(null, null, 4);
}
2024-09-23 13:30:23.1847 INFO Time spend on subproblem: 00:00:00.5353586
2024-09-23 13:30:23.1847 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.5340236)
2024-09-23 13:30:23.1847 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:23.1847 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:23.1847 INFO Initial heuristic value is 0
2024-09-23 13:30:23.1847 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:30:23.1877 TRACE Verifying the body of the following method:
static method synthesized(formal_3_27_0: int, formal_6_146_0: int, formal_7_226_0: int, formal_8_228_0: int, formal_8_228_1: int, formal_9_150_0: int, argument_7_0_0: BinaryTree?, argument_7_0_1: BinaryTree?, argument_7_0_2: int) returns (receiver: BinaryTree) {assume true && (if argument_7_0_0 == null then {} else argument_7_0_0.Repr) * (if argument_7_0_1 == null then {} else argument_7_0_1.Repr) == {} && (argument_7_0_0 == null || argument_7_0_0.IsValid()) && (argument_7_0_1 == null || argument_7_0_1.IsValid());
receiver := new BinaryTree(argument_7_0_0, argument_7_0_1, argument_7_0_2);
assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 6 == receiver.value && 6 == receiver.View[0] && 1 == |receiver.View|);}
2024-09-23 13:30:23.1877 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_27_0: int, formal_6_146_0: int, formal_7_226_0: int, formal_8_228_0: int, formal_8_228_1: int, formal_9_150_0: int, argument_7_0_0: BinaryTree?, argument_7_0_1: BinaryTree?, argument_7_0_2: int)
        returns (receiver: BinaryTree)
    {
      assume true && (if argument_7_0_0 == null then {} else argument_7_0_0.Repr) * (if argument_7_0_1 == null then {} else argument_7_0_1.Repr) == {} && (argument_7_0_0 == null || argument_7_0_0.IsValid()) && (argument_7_0_1 == null || argument_7_0_1.IsValid());
      receiver := new BinaryTree(argument_7_0_0, argument_7_0_1, argument_7_0_2);
      assume {:formal} formal_3_27_0 == 0;
      assume {:formal} formal_6_146_0 == 0;
      assume {:formal} formal_7_226_0 == 6;
      assume {:formal} formal_8_228_0 == 6;
      assume {:formal} formal_8_228_1 == 0;
      assume {:formal} formal_9_150_0 == 1;
      assert {:keepAssertion} !(!(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_27_0 && null == receiver.left && null == receiver.right && formal_6_146_0 == receiver.Height && formal_7_226_0 == receiver.value && formal_8_228_0 == receiver.View[formal_8_228_1] && formal_9_150_0 == |receiver.View|);
    }
2024-09-23 13:30:23.4867 TRACE Verifying the body of the following method:
static method synthesized(formal_3_27_0: int, formal_6_146_0: int, formal_7_226_0: int, formal_8_228_0: int, formal_8_228_1: int, formal_9_150_0: int, argument_7_0_0: BinaryTree?, argument_7_0_1: BinaryTree?, argument_7_0_2: int, formal_0_17_0: int) returns (receiver: BinaryTree) {assume true && (if null == null then {} else null.Repr) * (if null == null then {} else null.Repr) == {} && (null == null || null.IsValid()) && (null == null || null.IsValid());
receiver := new BinaryTree(null, null, 6);
assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > 0 && null == receiver.left && null == receiver.right && 0 == receiver.Height && 6 == receiver.value && 6 == receiver.View[0] && 1 == |receiver.View|;}
2024-09-23 13:30:23.4867 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_27_0: int, formal_6_146_0: int, formal_7_226_0: int, formal_8_228_0: int, formal_8_228_1: int, formal_9_150_0: int, argument_7_0_0: BinaryTree?, argument_7_0_1: BinaryTree?, argument_7_0_2: int, formal_0_17_0: int)
        returns (receiver: BinaryTree)
    {
      assume {:attribute 134} argument_7_0_0 == null;
      assume {:attribute 135} argument_7_0_1 == null;
      assume {:formal} formal_0_17_0 == 6;
      assume {:attribute 136} argument_7_0_2 == formal_0_17_0;
      assume true && (if argument_7_0_0 == null then {} else argument_7_0_0.Repr) * (if argument_7_0_1 == null then {} else argument_7_0_1.Repr) == {} && (argument_7_0_0 == null || argument_7_0_0.IsValid()) && (argument_7_0_1 == null || argument_7_0_1.IsValid());
      receiver := new BinaryTree(argument_7_0_0, argument_7_0_1, argument_7_0_2);
      assume {:formal} formal_3_27_0 == 0;
      assume {:formal} formal_6_146_0 == 0;
      assume {:formal} formal_7_226_0 == 6;
      assume {:formal} formal_8_228_0 == 6;
      assume {:formal} formal_8_228_1 == 0;
      assume {:formal} formal_9_150_0 == 1;
      assert {:keepAssertion} !(receiver == null) && receiver in receiver.Repr && receiver.Repr == {receiver} && |receiver.View| > formal_3_27_0 && null == receiver.left && null == receiver.right && formal_6_146_0 == receiver.Height && formal_7_226_0 == receiver.value && formal_8_228_0 == receiver.View[formal_8_228_1] && formal_9_150_0 == |receiver.View|;
    }
2024-09-23 13:30:23.7426 INFO Have found the following solution to a subproblem!
{
argument_5_0_1 := new BinaryTree(null, null, 6);
}
2024-09-23 13:30:23.7426 INFO Time spend on subproblem: 00:00:00.5574688
2024-09-23 13:30:23.7426 INFO Number of Regular queries to Dafny used to solve subproblem: 2 (00:00:00.5561443)
2024-09-23 13:30:23.7426 INFO Number of Simplify queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:23.7426 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:30:23.7426 INFO Have found the following solution!
static method solution() returns (result:BinaryTree)
ensures Goal(result)
{
var argument_2_0_0 := new BinaryTree(null, null, 0);
var argument_2_0_1 := new BinaryTree(null, null, 2);
var argument_1_0_0 := new BinaryTree(argument_2_0_0, argument_2_0_1, 1);
var argument_5_0_0 := new BinaryTree(null, null, 4);
var argument_5_0_1 := new BinaryTree(null, null, 6);
var argument_1_0_1 := new BinaryTree(argument_5_0_0, argument_5_0_1, 5);
result := new BinaryTree(argument_1_0_0, argument_1_0_1, 3);
}
2024-09-23 13:30:23.7426 INFO Total time spend on synthesis: 00:00:06.4846181
2024-09-23 13:30:23.7426 INFO Total number of Regular queries to Dafny: 14 (00:00:06.2397832)
2024-09-23 13:30:23.7426 INFO Total number of Simplify queries to Dafny: 0 (00:00:00)
2024-09-23 13:30:23.7426 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
