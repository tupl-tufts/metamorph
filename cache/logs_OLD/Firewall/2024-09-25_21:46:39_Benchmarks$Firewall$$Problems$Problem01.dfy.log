2024-09-25 21:46:40.4791 DEBUG Using integer programming to estimating the distance to this.D == {1, 2}, this.CS == {(1, 2)}, this.C == {1}
2024-09-25 21:46:40.4971 TRACE Adding solver constraint for property this.C == {default0} from False to True: (((MakeCentral * 1) + (MakeCentral * 0)) + ((DeleteDevice * 1) + (DeleteDevice * 0))) >= 1
2024-09-25 21:46:40.4971 TRACE Adding solver constraint for property this.C == {default0} from False to True: (((MakeCentral * 1) + (MakeCentral * 0)) + ((DeleteDevice * 1) + (DeleteDevice * 0))) >= 1
2024-09-25 21:46:40.5003 TRACE Minimizing value: ((((AddDevice + DiffDevice) + AddConnection) + MakeCentral) + DeleteDevice)
2024-09-25 21:46:40.5003 DEBUG The integer programming gives the lower bound of 1 methods.
2024-09-25 21:46:40.5003 DEBUG In particular, need at least -0 calls to AddDevice
2024-09-25 21:46:40.5003 DEBUG In particular, need at least -0 calls to DiffDevice
2024-09-25 21:46:40.5003 DEBUG In particular, need at least -0 calls to AddConnection
2024-09-25 21:46:40.5026 DEBUG In particular, need at least 1 calls to MakeCentral
2024-09-25 21:46:40.5026 DEBUG In particular, need at least -0 calls to DeleteDevice
2024-09-25 21:46:40.5026 INFO Initial heuristic value is 1
2024-09-25 21:46:40.5026 INFO Expanding method sequence  -- estimated distance to start = 1, distance to end = 0
2024-09-25 21:46:40.5026 DEBUG Trying method sequence: AddDevice
2024-09-25 21:46:40.5771 TRACE Verifying the body of the following method:
static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_1_288_0: int, formal_1_288_1: int, formal_2_290_0: int, argument_1_0_0: int, receiver: Database)
    modifies receiver {assume !(receiver.D == {1, 2} && receiver.CS == {(1, 2)} && receiver.C == {1});
assume true && receiver.IsValid() && argument_1_0_0 !in receiver.D;
receiver.AddDevice(argument_1_0_0);
assert {:keepAssertion} !(receiver.D == {1, 2} && receiver.CS == {(1, 2)} && receiver.C == {1});}
2024-09-25 21:46:40.5771 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_1_288_0: int, formal_1_288_1: int, formal_2_290_0: int, argument_1_0_0: int, receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_0_286_0 == 1;
      assume {:formal} formal_0_286_1 == 2;
      assume {:formal} formal_1_288_0 == 1;
      assume {:formal} formal_1_288_1 == 2;
      assume {:formal} formal_2_290_0 == 1;
      assume !(receiver.D == {formal_0_286_0, formal_0_286_1} && receiver.CS == {(formal_1_288_0, formal_1_288_1)} && receiver.C == {formal_2_290_0});
      assume true && receiver.IsValid() && argument_1_0_0 !in receiver.D;
      receiver.AddDevice(argument_1_0_0);
      assert {:keepAssertion} !(receiver.D == {formal_0_286_0, formal_0_286_1} && receiver.CS == {(formal_1_288_0, formal_1_288_1)} && receiver.C == {formal_2_290_0});
    }
2024-09-25 21:46:41.6607 DEBUG Trying method sequence: DiffDevice
2024-09-25 21:46:41.6646 TRACE Verifying the body of the following method:
static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_1_288_0: int, formal_1_288_1: int, formal_2_290_0: int, argument_2_0_0: int, receiver: Database)
    modifies  {assume !(receiver.D == {1, 2} && receiver.CS == {(1, 2)} && receiver.C == {1});
assume true && exists v: int {:trigger v in receiver.D} :: v in receiver.D && v != argument_2_0_0;
var _ := receiver.DiffDevice(argument_2_0_0);
assert {:keepAssertion} !(receiver.D == {1, 2} && receiver.CS == {(1, 2)} && receiver.C == {1});}
2024-09-25 21:46:41.6646 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_1_288_0: int, formal_1_288_1: int, formal_2_290_0: int, argument_2_0_0: int, receiver: Database)
    {
      assume {:formal} formal_0_286_0 == 1;
      assume {:formal} formal_0_286_1 == 2;
      assume {:formal} formal_1_288_0 == 1;
      assume {:formal} formal_1_288_1 == 2;
      assume {:formal} formal_2_290_0 == 1;
      assume !(receiver.D == {formal_0_286_0, formal_0_286_1} && receiver.CS == {(formal_1_288_0, formal_1_288_1)} && receiver.C == {formal_2_290_0});
      assume true && exists v: int {:trigger v in receiver.D} :: v in receiver.D && v != argument_2_0_0;
      var _ := receiver.DiffDevice(argument_2_0_0);
      assert {:keepAssertion} !(receiver.D == {formal_0_286_0, formal_0_286_1} && receiver.CS == {(formal_1_288_0, formal_1_288_1)} && receiver.C == {formal_2_290_0});
    }
2024-09-25 21:46:41.9956 DEBUG Trying method sequence: AddConnection
2024-09-25 21:46:41.9956 TRACE Verifying the body of the following method:
static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_1_288_0: int, formal_1_288_1: int, formal_2_290_0: int, argument_3_0_0: (int, int), receiver: Database)
    modifies receiver {assume !(receiver.D == {1, 2} && receiver.CS == {(1, 2)} && receiver.C == {1});
assume true && receiver.IsValid() && argument_3_0_0.0 in receiver.D && argument_3_0_0.1 in receiver.D;
receiver.AddConnection(argument_3_0_0);
assert {:keepAssertion} !(receiver.D == {1, 2} && receiver.CS == {(1, 2)} && receiver.C == {1});}
2024-09-25 21:46:41.9988 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_1_288_0: int, formal_1_288_1: int, formal_2_290_0: int, argument_3_0_0: (int, int), receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_0_286_0 == 1;
      assume {:formal} formal_0_286_1 == 2;
      assume {:formal} formal_1_288_0 == 1;
      assume {:formal} formal_1_288_1 == 2;
      assume {:formal} formal_2_290_0 == 1;
      assume !(receiver.D == {formal_0_286_0, formal_0_286_1} && receiver.CS == {(formal_1_288_0, formal_1_288_1)} && receiver.C == {formal_2_290_0});
      assume true && receiver.IsValid() && argument_3_0_0.0 in receiver.D && argument_3_0_0.1 in receiver.D;
      receiver.AddConnection(argument_3_0_0);
      assert {:keepAssertion} !(receiver.D == {formal_0_286_0, formal_0_286_1} && receiver.CS == {(formal_1_288_0, formal_1_288_1)} && receiver.C == {formal_2_290_0});
    }
2024-09-25 21:46:42.4270 TRACE Verifying the body of the following method:
static method synthesized(formal_1_302_0: int, formal_2_286_0: int, formal_2_286_1: int, formal_0_286_0: int, formal_0_286_1: int, formal_3_305_0: int, formal_5_308_0: int, formal_6_290_0: int, formal_2_290_0: int, formal_8_245_0: bool, formal_1_288_0: int, formal_1_288_1: int, argument_3_0_0: (int, int), receiver: Database, formal_0_299_0: int, formal_0_299_1: int)
    modifies receiver {assume {:attribute 16} argument_3_0_0 == (1, 2);
assume !(receiver == null);
assume 1 in receiver.D;
assume receiver.D == {1, 2};
assume 2 in receiver.D;
assume receiver.CS == {};
assume 1 in receiver.C;
assume receiver.C == {1};
assume receiver.IsValid.requires();
assume true == receiver.IsValid();
receiver.AddConnection(argument_3_0_0);
assert {:keepAssertion} receiver.D == {1, 2} && receiver.CS == {(1, 2)} && receiver.C == {1};}
2024-09-25 21:46:42.4270 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_302_0: int, formal_2_286_0: int, formal_2_286_1: int, formal_0_286_0: int, formal_0_286_1: int, formal_3_305_0: int, formal_5_308_0: int, formal_6_290_0: int, formal_2_290_0: int, formal_8_245_0: bool, formal_1_288_0: int, formal_1_288_1: int, argument_3_0_0: (int, int), receiver: Database, formal_0_299_0: int, formal_0_299_1: int)
      modifies receiver
    {
      assume {:formal} formal_0_299_0 == 1;
      assume {:formal} formal_0_299_1 == 2;
      assume {:attribute 16} argument_3_0_0 == (formal_0_299_0, formal_0_299_1);
      assume {:formal} formal_1_302_0 == 1;
      assume {:formal} formal_2_286_0 == 1;
      assume {:formal} formal_2_286_1 == 2;
      assume {:formal} formal_3_305_0 == 2;
      assume {:formal} formal_5_308_0 == 1;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 859 LINES OF LOGS TO SAVE DISK SPACE ***************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

    {
      assume {:formal} formal_1_305_0 == 2;
      assume {:formal} formal_2_378_0 == 2;
      assume {:formal} formal_4_245_0 == true;
      assume !(!(receiver == null) && formal_1_305_0 in receiver.D && receiver.D == {formal_2_378_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
      assume true && receiver.IsValid() && argument_18_0_0.0 in receiver.D && argument_18_0_0.1 in receiver.D;
      receiver.AddConnection(argument_18_0_0);
      assert {:keepAssertion} !(!(receiver == null) && formal_1_305_0 in receiver.D && receiver.D == {formal_2_378_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
    }
2024-09-25 21:46:50.9110 DEBUG Trying method sequence: MakeCentral, AddDevice, AddConnection, MakeCentral
2024-09-25 21:46:50.9110 TRACE Verifying the body of the following method:
static method synthesized(formal_1_305_0: int, formal_2_378_0: int, formal_4_245_0: bool, argument_19_0_0: int, receiver: Database)
    modifies receiver {assume !(!(receiver == null) && 2 in receiver.D && receiver.D == {2} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
assume true && receiver.IsValid() && argument_19_0_0 in receiver.D;
receiver.MakeCentral(argument_19_0_0);
assert {:keepAssertion} !(!(receiver == null) && 2 in receiver.D && receiver.D == {2} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);}
2024-09-25 21:46:50.9110 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_305_0: int, formal_2_378_0: int, formal_4_245_0: bool, argument_19_0_0: int, receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_1_305_0 == 2;
      assume {:formal} formal_2_378_0 == 2;
      assume {:formal} formal_4_245_0 == true;
      assume !(!(receiver == null) && formal_1_305_0 in receiver.D && receiver.D == {formal_2_378_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
      assume true && receiver.IsValid() && argument_19_0_0 in receiver.D;
      receiver.MakeCentral(argument_19_0_0);
      assert {:keepAssertion} !(!(receiver == null) && formal_1_305_0 in receiver.D && receiver.D == {formal_2_378_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
    }
2024-09-25 21:46:51.1780 DEBUG Trying method sequence: DeleteDevice, AddDevice, AddConnection, MakeCentral
2024-09-25 21:46:51.1807 TRACE Verifying the body of the following method:
static method synthesized(formal_1_305_0: int, formal_2_378_0: int, formal_4_245_0: bool, argument_20_0_0: int, argument_20_0_1: int, receiver: Database)
    modifies receiver {assume !(!(receiver == null) && 2 in receiver.D && receiver.D == {2} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
assume true && receiver.IsValid() && argument_20_0_0 in receiver.D && argument_20_0_1 in receiver.D && argument_20_0_1 != argument_20_0_0 && argument_20_0_1 in receiver.C;
receiver.DeleteDevice(argument_20_0_0, argument_20_0_1);
assert {:keepAssertion} !(!(receiver == null) && 2 in receiver.D && receiver.D == {2} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);}
2024-09-25 21:46:51.1807 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_305_0: int, formal_2_378_0: int, formal_4_245_0: bool, argument_20_0_0: int, argument_20_0_1: int, receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_1_305_0 == 2;
      assume {:formal} formal_2_378_0 == 2;
      assume {:formal} formal_4_245_0 == true;
      assume !(!(receiver == null) && formal_1_305_0 in receiver.D && receiver.D == {formal_2_378_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
      assume true && receiver.IsValid() && argument_20_0_0 in receiver.D && argument_20_0_1 in receiver.D && argument_20_0_1 != argument_20_0_0 && argument_20_0_1 in receiver.C;
      receiver.DeleteDevice(argument_20_0_0, argument_20_0_1);
      assert {:keepAssertion} !(!(receiver == null) && formal_1_305_0 in receiver.D && receiver.D == {formal_2_378_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
    }
2024-09-25 21:46:51.4651 INFO Expanding method sequence AddDevice, AddDevice, AddConnection, MakeCentral -- estimated distance to start = 0, distance to end = 4
2024-09-25 21:46:51.4700 TRACE Verifying the body of the following method:
static method synthesized(formal_3_245_0: bool) returns (receiver: Database) {assume true;
receiver := new Database();
assert {:keepAssertion} !(!(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);}
2024-09-25 21:46:51.4700 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_245_0: bool) returns (receiver: Database)
    {
      assume true;
      receiver := new Database();
      assume {:formal} formal_3_245_0 == true;
      assert {:keepAssertion} !(!(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && formal_3_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
    }
2024-09-25 21:46:51.7616 TRACE Verifying the body of the following method:
static method synthesized(formal_3_245_0: bool) returns (receiver: Database) {assume true;
receiver := new Database();
assert {:keepAssertion} !(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C;}
2024-09-25 21:46:51.7616 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_245_0: bool) returns (receiver: Database)
    {
      assume true;
      receiver := new Database();
      assume {:formal} formal_3_245_0 == true;
      assert {:keepAssertion} !(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && formal_3_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C;
    }
2024-09-25 21:46:52.0164 INFO Have found the following solution to a subproblem!
{
result := new Database();
result.AddDevice(2);
result.AddDevice(1);
assume {:attribute 68} argument_8_0_0 == (1, 2);
result.AddConnection(argument_8_0_0);
result.MakeCentral(1);
}
2024-09-25 21:46:52.0164 INFO Time spend on subproblem: 00:00:11.5520349
2024-09-25 21:46:52.0192 INFO Number of Regular queries to Dafny used to solve subproblem: 28 (00:00:09.2068580)
2024-09-25 21:46:52.0192 INFO Number of Simplify queries to Dafny used to solve subproblem: 6 (00:00:02.1812758)
2024-09-25 21:46:52.0192 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-25 21:46:52.0192 INFO Have found the following solution!
static method solution() returns (result:Database)
ensures Goal(result)
{
result := new Database();
result.AddDevice(2);
result.AddDevice(1);
assume {:attribute 68} argument_8_0_0 == (1, 2);
result.AddConnection(argument_8_0_0);
result.MakeCentral(1);
}
2024-09-25 21:46:52.0192 INFO Total time spend on synthesis: 00:00:11.7273014
2024-09-25 21:46:52.0192 INFO Total number of Regular queries to Dafny: 28 (00:00:09.2068580)
2024-09-25 21:46:52.0192 INFO Total number of Simplify queries to Dafny: 6 (00:00:02.1812758)
2024-09-25 21:46:52.0192 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
