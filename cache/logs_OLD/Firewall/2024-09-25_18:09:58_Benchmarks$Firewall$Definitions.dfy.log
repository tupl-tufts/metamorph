2024-09-25 18:09:58.9071 INFO Starting heuristic learning for classes: Definitions.Database
2024-09-25 18:09:58.9162 INFO Trying out AddDevice
2024-09-25 18:09:59.0018 TRACE Verifying the body of the following method:
static method synthesized(argument_1_0_0: int, receiver: Database)
    modifies receiver {assume true && receiver.IsValid() && argument_1_0_0 !in receiver.D;
receiver.AddDevice(argument_1_0_0);
assert {:keepAssertion} false;}
2024-09-25 18:09:59.0018 TRACE Verifying the body of the following method (literal):
 static method synthesized(argument_1_0_0: int, receiver: Database)
      modifies receiver
    {
      assume true && receiver.IsValid() && argument_1_0_0 !in receiver.D;
      receiver.AddDevice(argument_1_0_0);
      assert {:keepAssertion} false;
    }
2024-09-25 18:10:00.1464 TRACE Verifying the body of the following method:
static method synthesized(formal_4_6_0: bool, argument_1_0_0: int, receiver: Database, formal_0_0_0: int)
    modifies receiver {assume !(receiver == null);
assume receiver.CS == {};
assume receiver.C == {};
assume receiver.IsValid.requires();
assume true == receiver.IsValid();
receiver.AddDevice(14);
assert {:keepAssertion} !false;}
2024-09-25 18:10:00.1466 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_4_6_0: bool, argument_1_0_0: int, receiver: Database, formal_0_0_0: int)
      modifies receiver
    {
      assume {:formal} formal_0_0_0 == 14;
      assume {:attribute 7} argument_1_0_0 == formal_0_0_0;
      assume {:formal} formal_4_6_0 == true;
      assume !(receiver == null);
      assume receiver.CS == {};
      assume receiver.C == {};
      assume receiver.IsValid.requires();
      assume formal_4_6_0 == receiver.IsValid();
      receiver.AddDevice(argument_1_0_0);
      assert {:keepAssertion} !false;
    }
2024-09-25 18:10:00.4663 INFO Trying out DiffDevice
2024-09-25 18:10:00.4698 TRACE Verifying the body of the following method:
static method synthesized(argument_2_0_0: int, receiver: Database)
    modifies  {assume true && exists v: int {:trigger v in receiver.D} :: v in receiver.D && v != argument_2_0_0;
var _ := receiver.DiffDevice(argument_2_0_0);
assert {:keepAssertion} false;}
2024-09-25 18:10:00.4698 TRACE Verifying the body of the following method (literal):
 static method synthesized(argument_2_0_0: int, receiver: Database)
    {
      assume true && exists v: int {:trigger v in receiver.D} :: v in receiver.D && v != argument_2_0_0;
      var _ := receiver.DiffDevice(argument_2_0_0);
      assert {:keepAssertion} false;
    }
2024-09-25 18:10:00.7538 TRACE Verifying the body of the following method:
static method synthesized(formal_1_11_0: int, formal_2_13_0: int, formal_2_13_1: int, formal_2_13_2: int, formal_3_15_0: int, formal_4_17_0: int, argument_2_0_0: int, receiver: Database, formal_0_8_0: int)
    modifies  {assume !(receiver == null);
assume 18 in receiver.D;
assume receiver.D == {17, 15, 18};
assume 15 in receiver.D;
assume 17 in receiver.D;
var _ := receiver.DiffDevice(16);
assert {:keepAssertion} !false;}
2024-09-25 18:10:00.7538 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_11_0: int, formal_2_13_0: int, formal_2_13_1: int, formal_2_13_2: int, formal_3_15_0: int, formal_4_17_0: int, argument_2_0_0: int, receiver: Database, formal_0_8_0: int)
    {
      assume {:formal} formal_0_8_0 == 16;
      assume {:attribute 14} argument_2_0_0 == formal_0_8_0;
      assume {:formal} formal_1_11_0 == 18;
      assume {:formal} formal_2_13_0 == 17;
      assume {:formal} formal_2_13_1 == 15;
      assume {:formal} formal_2_13_2 == 18;
      assume {:formal} formal_3_15_0 == 15;
      assume {:formal} formal_4_17_0 == 17;
      assume !(receiver == null);
      assume formal_1_11_0 in receiver.D;
      assume receiver.D == {formal_2_13_0, formal_2_13_1, formal_2_13_2};
      assume formal_3_15_0 in receiver.D;
      assume formal_4_17_0 in receiver.D;
      var _ := receiver.DiffDevice(argument_2_0_0);
      assert {:keepAssertion} !false;
    }
2024-09-25 18:10:01.0404 INFO New state is this.D == {17, 15, 18}, Â¬(receiver == null), 15 in this.D, 17 in this.D, 18 in this.D
2024-09-25 18:10:01.0404 INFO Trying out AddConnection
2024-09-25 18:10:01.0427 TRACE Verifying the body of the following method:
static method synthesized(argument_3_0_0: (int, int), receiver: Database)
    modifies receiver {assume true && receiver.IsValid() && argument_3_0_0.0 in receiver.D && argument_3_0_0.1 in receiver.D;
receiver.AddConnection(argument_3_0_0);
assert {:keepAssertion} false;}
2024-09-25 18:10:01.0427 TRACE Verifying the body of the following method (literal):
 static method synthesized(argument_3_0_0: (int, int), receiver: Database)
      modifies receiver
    {
      assume true && receiver.IsValid() && argument_3_0_0.0 in receiver.D && argument_3_0_0.1 in receiver.D;
      receiver.AddConnection(argument_3_0_0);
      assert {:keepAssertion} false;
    }
2024-09-25 18:10:01.3488 TRACE Verifying the body of the following method:
static method synthesized(formal_3_6_0: bool, argument_3_0_0: (int, int), receiver: Database)
    modifies receiver {assume !(receiver == null);
assume receiver.C == {};
assume receiver.IsValid.requires();
assume true == receiver.IsValid();
receiver.AddConnection(argument_3_0_0);
assert {:keepAssertion} !false;}
2024-09-25 18:10:01.3488 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_6_0: bool, argument_3_0_0: (int, int), receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_3_6_0 == true;
      assume !(receiver == null);
      assume receiver.C == {};
      assume receiver.IsValid.requires();
      assume formal_3_6_0 == receiver.IsValid();
      receiver.AddConnection(argument_3_0_0);
      assert {:keepAssertion} !false;
    }
2024-09-25 18:10:01.6457 INFO Trying out MakeCentral
2024-09-25 18:10:01.6469 TRACE Verifying the body of the following method:
static method synthesized(argument_4_0_0: int, receiver: Database)
    modifies receiver {assume true && receiver.IsValid() && argument_4_0_0 in receiver.D;
receiver.MakeCentral(argument_4_0_0);
assert {:keepAssertion} false;}
2024-09-25 18:10:01.6469 TRACE Verifying the body of the following method (literal):
 static method synthesized(argument_4_0_0: int, receiver: Database)
      modifies receiver
    {
      assume true && receiver.IsValid() && argument_4_0_0 in receiver.D;
      receiver.MakeCentral(argument_4_0_0);
      assert {:keepAssertion} false;
    }
2024-09-25 18:10:01.9203 TRACE Verifying the body of the following method:
static method synthesized(formal_1_31_0: int, formal_2_33_0: int, formal_4_36_0: int, formal_5_38_0: int, formal_7_6_0: bool, argument_4_0_0: int, receiver: Database, formal_0_0_0: int)
    modifies receiver {assume !(receiver == null);
assume 14 in receiver.D;
assume receiver.D == {14};
assume receiver.CS == {};
assume 14 in receiver.C;
assume receiver.C == {14};
assume receiver.IsValid.requires();
assume true == receiver.IsValid();
receiver.MakeCentral(14);
assert {:keepAssertion} !false;}
2024-09-25 18:10:01.9203 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_31_0: int, formal_2_33_0: int, formal_4_36_0: int, formal_5_38_0: int, formal_7_6_0: bool, argument_4_0_0: int, receiver: Database, formal_0_0_0: int)
      modifies receiver
    {
      assume {:formal} formal_0_0_0 == 14;
      assume {:attribute 31} argument_4_0_0 == formal_0_0_0;
      assume {:formal} formal_1_31_0 == 14;
      assume {:formal} formal_2_33_0 == 14;
      assume {:formal} formal_4_36_0 == 14;
      assume {:formal} formal_5_38_0 == 14;
      assume {:formal} formal_7_6_0 == true;
      assume !(receiver == null);
      assume formal_1_31_0 in receiver.D;
      assume receiver.D == {formal_2_33_0};
      assume receiver.CS == {};
      assume formal_4_36_0 in receiver.C;
      assume receiver.C == {formal_5_38_0};
      assume receiver.IsValid.requires();
      assume formal_7_6_0 == receiver.IsValid();
      receiver.MakeCentral(argument_4_0_0);
      assert {:keepAssertion} !false;
    }
