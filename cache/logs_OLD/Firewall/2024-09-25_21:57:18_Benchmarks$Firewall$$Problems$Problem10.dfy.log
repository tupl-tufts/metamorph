2024-09-25 21:57:19.5338 DEBUG Using integer programming to estimating the distance to this.D == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, this.CS == {(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 1)}, this.C == {1}
2024-09-25 21:57:19.5525 TRACE Adding solver constraint for property this.C == {default0} from False to True: (((MakeCentral * 1) + (MakeCentral * 0)) + ((DeleteDevice * 1) + (DeleteDevice * 0))) >= 1
2024-09-25 21:57:19.5525 TRACE Adding solver constraint for property this.C == {default0} from False to True: (((MakeCentral * 1) + (MakeCentral * 0)) + ((DeleteDevice * 1) + (DeleteDevice * 0))) >= 1
2024-09-25 21:57:19.5558 TRACE Minimizing value: ((((AddDevice + DiffDevice) + AddConnection) + MakeCentral) + DeleteDevice)
2024-09-25 21:57:19.5558 DEBUG The integer programming gives the lower bound of 1 methods.
2024-09-25 21:57:19.5558 DEBUG In particular, need at least -0 calls to AddDevice
2024-09-25 21:57:19.5558 DEBUG In particular, need at least -0 calls to DiffDevice
2024-09-25 21:57:19.5558 DEBUG In particular, need at least -0 calls to AddConnection
2024-09-25 21:57:19.5558 DEBUG In particular, need at least 1 calls to MakeCentral
2024-09-25 21:57:19.5558 DEBUG In particular, need at least -0 calls to DeleteDevice
2024-09-25 21:57:19.5558 INFO Initial heuristic value is 1
2024-09-25 21:57:19.5600 INFO Expanding method sequence  -- estimated distance to start = 1, distance to end = 0
2024-09-25 21:57:19.5600 DEBUG Trying method sequence: AddDevice
2024-09-25 21:57:19.6345 TRACE Verifying the body of the following method:
static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_0_286_3: int, formal_0_286_4: int, formal_0_286_5: int, formal_0_286_6: int, formal_0_286_7: int, formal_0_286_8: int, formal_0_286_9: int, formal_0_286_10: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_1_288_6: int, formal_1_288_7: int, formal_1_288_8: int, formal_1_288_9: int, formal_1_288_10: int, formal_1_288_11: int, formal_1_288_12: int, formal_1_288_13: int, formal_1_288_14: int, formal_1_288_15: int, formal_1_288_16: int, formal_1_288_17: int, formal_1_288_18: int, formal_1_288_19: int, formal_1_288_20: int, formal_1_288_21: int, formal_2_290_0: int, argument_1_0_0: int, receiver: Database)
    modifies receiver {assume !(receiver.D == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11} && receiver.CS == {(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 1)} && receiver.C == {1});
assume true && receiver.IsValid() && argument_1_0_0 !in receiver.D;
receiver.AddDevice(argument_1_0_0);
assert {:keepAssertion} !(receiver.D == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11} && receiver.CS == {(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 1)} && receiver.C == {1});}
2024-09-25 21:57:19.6353 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_0_286_3: int, formal_0_286_4: int, formal_0_286_5: int, formal_0_286_6: int, formal_0_286_7: int, formal_0_286_8: int, formal_0_286_9: int, formal_0_286_10: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_1_288_6: int, formal_1_288_7: int, formal_1_288_8: int, formal_1_288_9: int, formal_1_288_10: int, formal_1_288_11: int, formal_1_288_12: int, formal_1_288_13: int, formal_1_288_14: int, formal_1_288_15: int, formal_1_288_16: int, formal_1_288_17: int, formal_1_288_18: int, formal_1_288_19: int, formal_1_288_20: int, formal_1_288_21: int, formal_2_290_0: int, argument_1_0_0: int, receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_0_286_0 == 1;
      assume {:formal} formal_0_286_1 == 2;
      assume {:formal} formal_0_286_2 == 3;
      assume {:formal} formal_0_286_3 == 4;
      assume {:formal} formal_0_286_4 == 5;
      assume {:formal} formal_0_286_5 == 6;
      assume {:formal} formal_0_286_6 == 7;
      assume {:formal} formal_0_286_7 == 8;
      assume {:formal} formal_0_286_8 == 9;
      assume {:formal} formal_0_286_9 == 10;
      assume {:formal} formal_0_286_10 == 11;
      assume {:formal} formal_1_288_0 == 1;
      assume {:formal} formal_1_288_1 == 2;
      assume {:formal} formal_1_288_2 == 2;
      assume {:formal} formal_1_288_3 == 3;
      assume {:formal} formal_1_288_4 == 3;
      assume {:formal} formal_1_288_5 == 4;
      assume {:formal} formal_1_288_6 == 4;
      assume {:formal} formal_1_288_7 == 5;
      assume {:formal} formal_1_288_8 == 5;
      assume {:formal} formal_1_288_9 == 6;
      assume {:formal} formal_1_288_10 == 6;
      assume {:formal} formal_1_288_11 == 7;
      assume {:formal} formal_1_288_12 == 7;
      assume {:formal} formal_1_288_13 == 8;
      assume {:formal} formal_1_288_14 == 8;
      assume {:formal} formal_1_288_15 == 9;
      assume {:formal} formal_1_288_16 == 9;
      assume {:formal} formal_1_288_17 == 10;
      assume {:formal} formal_1_288_18 == 10;
      assume {:formal} formal_1_288_19 == 11;
      assume {:formal} formal_1_288_20 == 11;
      assume {:formal} formal_1_288_21 == 1;
      assume {:formal} formal_2_290_0 == 1;
      assume !(receiver.D == {formal_0_286_0, formal_0_286_1, formal_0_286_2, formal_0_286_3, formal_0_286_4, formal_0_286_5, formal_0_286_6, formal_0_286_7, formal_0_286_8, formal_0_286_9, formal_0_286_10} && receiver.CS == {(formal_1_288_0, formal_1_288_1), (formal_1_288_2, formal_1_288_3), (formal_1_288_4, formal_1_288_5), (formal_1_288_6, formal_1_288_7), (formal_1_288_8, formal_1_288_9), (formal_1_288_10, formal_1_288_11), (formal_1_288_12, formal_1_288_13), (formal_1_288_14, formal_1_288_15), (formal_1_288_16, formal_1_288_17), (formal_1_288_18, formal_1_288_19), (formal_1_288_20, formal_1_288_21)} && receiver.C == {formal_2_290_0});
      assume true && receiver.IsValid() && argument_1_0_0 !in receiver.D;
      receiver.AddDevice(argument_1_0_0);
      assert {:keepAssertion} !(receiver.D == {formal_0_286_0, formal_0_286_1, formal_0_286_2, formal_0_286_3, formal_0_286_4, formal_0_286_5, formal_0_286_6, formal_0_286_7, formal_0_286_8, formal_0_286_9, formal_0_286_10} && receiver.CS == {(formal_1_288_0, formal_1_288_1), (formal_1_288_2, formal_1_288_3), (formal_1_288_4, formal_1_288_5), (formal_1_288_6, formal_1_288_7), (formal_1_288_8, formal_1_288_9), (formal_1_288_10, formal_1_288_11), (formal_1_288_12, formal_1_288_13), (formal_1_288_14, formal_1_288_15), (formal_1_288_16, formal_1_288_17), (formal_1_288_18, formal_1_288_19), (formal_1_288_20, formal_1_288_21)} && receiver.C == {formal_2_290_0});
    }
2024-09-25 21:57:20.7742 DEBUG Trying method sequence: DiffDevice
2024-09-25 21:57:20.7865 TRACE Verifying the body of the following method:
static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_0_286_3: int, formal_0_286_4: int, formal_0_286_5: int, formal_0_286_6: int, formal_0_286_7: int, formal_0_286_8: int, formal_0_286_9: int, formal_0_286_10: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_1_288_6: int, formal_1_288_7: int, formal_1_288_8: int, formal_1_288_9: int, formal_1_288_10: int, formal_1_288_11: int, formal_1_288_12: int, formal_1_288_13: int, formal_1_288_14: int, formal_1_288_15: int, formal_1_288_16: int, formal_1_288_17: int, formal_1_288_18: int, formal_1_288_19: int, formal_1_288_20: int, formal_1_288_21: int, formal_2_290_0: int, argument_2_0_0: int, receiver: Database)
    modifies  {assume !(receiver.D == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11} && receiver.CS == {(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 1)} && receiver.C == {1});
assume true && exists v: int {:trigger v in receiver.D} :: v in receiver.D && v != argument_2_0_0;
var _ := receiver.DiffDevice(argument_2_0_0);
assert {:keepAssertion} !(receiver.D == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11} && receiver.CS == {(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 1)} && receiver.C == {1});}
2024-09-25 21:57:20.7869 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_0_286_3: int, formal_0_286_4: int, formal_0_286_5: int, formal_0_286_6: int, formal_0_286_7: int, formal_0_286_8: int, formal_0_286_9: int, formal_0_286_10: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_1_288_6: int, formal_1_288_7: int, formal_1_288_8: int, formal_1_288_9: int, formal_1_288_10: int, formal_1_288_11: int, formal_1_288_12: int, formal_1_288_13: int, formal_1_288_14: int, formal_1_288_15: int, formal_1_288_16: int, formal_1_288_17: int, formal_1_288_18: int, formal_1_288_19: int, formal_1_288_20: int, formal_1_288_21: int, formal_2_290_0: int, argument_2_0_0: int, receiver: Database)
    {
      assume {:formal} formal_0_286_0 == 1;
      assume {:formal} formal_0_286_1 == 2;
      assume {:formal} formal_0_286_2 == 3;
      assume {:formal} formal_0_286_3 == 4;
      assume {:formal} formal_0_286_4 == 5;
      assume {:formal} formal_0_286_5 == 6;
      assume {:formal} formal_0_286_6 == 7;
      assume {:formal} formal_0_286_7 == 8;
      assume {:formal} formal_0_286_8 == 9;
      assume {:formal} formal_0_286_9 == 10;
      assume {:formal} formal_0_286_10 == 11;
      assume {:formal} formal_1_288_0 == 1;
      assume {:formal} formal_1_288_1 == 2;
      assume {:formal} formal_1_288_2 == 2;
      assume {:formal} formal_1_288_3 == 3;
      assume {:formal} formal_1_288_4 == 3;
      assume {:formal} formal_1_288_5 == 4;
      assume {:formal} formal_1_288_6 == 4;
      assume {:formal} formal_1_288_7 == 5;
      assume {:formal} formal_1_288_8 == 5;
      assume {:formal} formal_1_288_9 == 6;
      assume {:formal} formal_1_288_10 == 6;
      assume {:formal} formal_1_288_11 == 7;
      assume {:formal} formal_1_288_12 == 7;
      assume {:formal} formal_1_288_13 == 8;
      assume {:formal} formal_1_288_14 == 8;
      assume {:formal} formal_1_288_15 == 9;
      assume {:formal} formal_1_288_16 == 9;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 36502 LINES OF LOGS TO SAVE DISK SPACE *************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assert {:keepAssertion} !(!(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && formal_3_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
    }
2024-09-25 22:00:35.1582 TRACE Verifying the body of the following method:
static method synthesized(formal_3_245_0: bool) returns (receiver: Database) {assume true;
receiver := new Database();
assert {:keepAssertion} !(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C;}
2024-09-25 22:00:35.1582 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_245_0: bool) returns (receiver: Database)
    {
      assume true;
      receiver := new Database();
      assume {:formal} formal_3_245_0 == true;
      assert {:keepAssertion} !(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && formal_3_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C;
    }
2024-09-25 22:00:35.4270 INFO Have found the following solution to a subproblem!
{
result := new Database();
result.AddDevice(2);
result.AddDevice(1);
assume {:attribute 4179} argument_248_0_0 == (1, 2);
result.AddConnection(argument_248_0_0);
result.AddDevice(7);
result.AddDevice(6);
assume {:attribute 4057} argument_233_0_0 == (6, 7);
result.AddConnection(argument_233_0_0);
result.AddDevice(3);
assume {:attribute 3961} argument_223_0_0 == (2, 3);
result.AddConnection(argument_223_0_0);
result.AddDevice(4);
assume {:attribute 3847} argument_213_0_0 == (3, 4);
result.AddConnection(argument_213_0_0);
result.AddDevice(8);
assume {:attribute 3715} argument_203_0_0 == (7, 8);
result.AddConnection(argument_203_0_0);
result.AddDevice(9);
assume {:attribute 3565} argument_193_0_0 == (8, 9);
result.AddConnection(argument_193_0_0);
result.AddDevice(5);
result.AddDevice(10);
assume {:attribute 1409} argument_68_0_0 == (4, 5);
result.AddConnection(argument_68_0_0);
assume {:attribute 1023} argument_43_0_0 == (5, 6);
result.AddConnection(argument_43_0_0);
assume {:attribute 817} argument_33_0_0 == (9, 10);
result.AddConnection(argument_33_0_0);
result.AddDevice(11);
assume {:attribute 293} argument_13_0_0 == (10, 11);
result.AddConnection(argument_13_0_0);
assume {:attribute 213} argument_8_0_0 == (11, 1);
result.AddConnection(argument_8_0_0);
result.MakeCentral(1);
}
2024-09-25 22:00:35.4270 INFO Time spend on subproblem: 00:03:15.9080144
2024-09-25 22:00:35.4270 INFO Number of Regular queries to Dafny used to solve subproblem: 339 (00:02:38.7090206)
2024-09-25 22:00:35.4270 INFO Number of Simplify queries to Dafny used to solve subproblem: 77 (00:00:34.0061312)
2024-09-25 22:00:35.4306 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-25 22:00:35.4306 INFO Have found the following solution!
static method solution() returns (result:Database)
ensures Goal(result)
{
result := new Database();
result.AddDevice(2);
result.AddDevice(1);
assume {:attribute 4179} argument_248_0_0 == (1, 2);
result.AddConnection(argument_248_0_0);
result.AddDevice(7);
result.AddDevice(6);
assume {:attribute 4057} argument_233_0_0 == (6, 7);
result.AddConnection(argument_233_0_0);
result.AddDevice(3);
assume {:attribute 3961} argument_223_0_0 == (2, 3);
result.AddConnection(argument_223_0_0);
result.AddDevice(4);
assume {:attribute 3847} argument_213_0_0 == (3, 4);
result.AddConnection(argument_213_0_0);
result.AddDevice(8);
assume {:attribute 3715} argument_203_0_0 == (7, 8);
result.AddConnection(argument_203_0_0);
result.AddDevice(9);
assume {:attribute 3565} argument_193_0_0 == (8, 9);
result.AddConnection(argument_193_0_0);
result.AddDevice(5);
result.AddDevice(10);
assume {:attribute 1409} argument_68_0_0 == (4, 5);
result.AddConnection(argument_68_0_0);
assume {:attribute 1023} argument_43_0_0 == (5, 6);
result.AddConnection(argument_43_0_0);
assume {:attribute 817} argument_33_0_0 == (9, 10);
result.AddConnection(argument_33_0_0);
result.AddDevice(11);
assume {:attribute 293} argument_13_0_0 == (10, 11);
result.AddConnection(argument_13_0_0);
assume {:attribute 213} argument_8_0_0 == (11, 1);
result.AddConnection(argument_8_0_0);
result.MakeCentral(1);
}
2024-09-25 22:00:35.4306 INFO Total time spend on synthesis: 00:03:16.0891798
2024-09-25 22:00:35.4306 INFO Total number of Regular queries to Dafny: 339 (00:02:38.7090206)
2024-09-25 22:00:35.4306 INFO Total number of Simplify queries to Dafny: 77 (00:00:34.0061312)
2024-09-25 22:00:35.4306 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
