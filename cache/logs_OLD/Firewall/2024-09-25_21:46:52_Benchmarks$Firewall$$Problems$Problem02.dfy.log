2024-09-25 21:46:53.1896 DEBUG Using integer programming to estimating the distance to this.D == {1, 2, 3}, this.CS == {(1, 2), (2, 3), (3, 1)}, this.C == {1}
2024-09-25 21:46:53.2080 TRACE Adding solver constraint for property this.D == {default0, default1, default2} from False to True: (((AddDevice * 10000) + (AddDevice * 0)) + ((DeleteDevice * 10000) + (DeleteDevice * 0))) >= 1
2024-09-25 21:46:53.2080 TRACE Adding solver constraint for property this.D == {default0, default1, default2} from False to True: (((AddDevice * 10000) + (AddDevice * 0)) + ((DeleteDevice * 10000) + (DeleteDevice * 0))) >= 1
2024-09-25 21:46:53.2112 TRACE Adding solver constraint for property this.C == {default0} from False to True: (((MakeCentral * 1) + (MakeCentral * 0)) + ((DeleteDevice * 1) + (DeleteDevice * 0))) >= 1
2024-09-25 21:46:53.2112 TRACE Adding solver constraint for property this.C == {default0} from False to True: (((MakeCentral * 1) + (MakeCentral * 0)) + ((DeleteDevice * 1) + (DeleteDevice * 0))) >= 1
2024-09-25 21:46:53.2112 TRACE Minimizing value: ((((AddDevice + DiffDevice) + AddConnection) + MakeCentral) + DeleteDevice)
2024-09-25 21:46:53.2112 DEBUG The integer programming gives the lower bound of 1 methods.
2024-09-25 21:46:53.2112 DEBUG In particular, need at least 0 calls to AddDevice
2024-09-25 21:46:53.2112 DEBUG In particular, need at least -0 calls to DiffDevice
2024-09-25 21:46:53.2112 DEBUG In particular, need at least -0 calls to AddConnection
2024-09-25 21:46:53.2112 DEBUG In particular, need at least 0 calls to MakeCentral
2024-09-25 21:46:53.2112 DEBUG In particular, need at least 1 calls to DeleteDevice
2024-09-25 21:46:53.2112 INFO Initial heuristic value is 1
2024-09-25 21:46:53.2156 INFO Expanding method sequence  -- estimated distance to start = 1, distance to end = 0
2024-09-25 21:46:53.2156 DEBUG Trying method sequence: AddDevice
2024-09-25 21:46:53.2882 TRACE Verifying the body of the following method:
static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_2_290_0: int, argument_1_0_0: int, receiver: Database)
    modifies receiver {assume !(receiver.D == {1, 2, 3} && receiver.CS == {(1, 2), (2, 3), (3, 1)} && receiver.C == {1});
assume true && receiver.IsValid() && argument_1_0_0 !in receiver.D;
receiver.AddDevice(argument_1_0_0);
assert {:keepAssertion} !(receiver.D == {1, 2, 3} && receiver.CS == {(1, 2), (2, 3), (3, 1)} && receiver.C == {1});}
2024-09-25 21:46:53.2882 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_2_290_0: int, argument_1_0_0: int, receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_0_286_0 == 1;
      assume {:formal} formal_0_286_1 == 2;
      assume {:formal} formal_0_286_2 == 3;
      assume {:formal} formal_1_288_0 == 1;
      assume {:formal} formal_1_288_1 == 2;
      assume {:formal} formal_1_288_2 == 2;
      assume {:formal} formal_1_288_3 == 3;
      assume {:formal} formal_1_288_4 == 3;
      assume {:formal} formal_1_288_5 == 1;
      assume {:formal} formal_2_290_0 == 1;
      assume !(receiver.D == {formal_0_286_0, formal_0_286_1, formal_0_286_2} && receiver.CS == {(formal_1_288_0, formal_1_288_1), (formal_1_288_2, formal_1_288_3), (formal_1_288_4, formal_1_288_5)} && receiver.C == {formal_2_290_0});
      assume true && receiver.IsValid() && argument_1_0_0 !in receiver.D;
      receiver.AddDevice(argument_1_0_0);
      assert {:keepAssertion} !(receiver.D == {formal_0_286_0, formal_0_286_1, formal_0_286_2} && receiver.CS == {(formal_1_288_0, formal_1_288_1), (formal_1_288_2, formal_1_288_3), (formal_1_288_4, formal_1_288_5)} && receiver.C == {formal_2_290_0});
    }
2024-09-25 21:46:54.3818 DEBUG Trying method sequence: DiffDevice
2024-09-25 21:46:54.3857 TRACE Verifying the body of the following method:
static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_2_290_0: int, argument_2_0_0: int, receiver: Database)
    modifies  {assume !(receiver.D == {1, 2, 3} && receiver.CS == {(1, 2), (2, 3), (3, 1)} && receiver.C == {1});
assume true && exists v: int {:trigger v in receiver.D} :: v in receiver.D && v != argument_2_0_0;
var _ := receiver.DiffDevice(argument_2_0_0);
assert {:keepAssertion} !(receiver.D == {1, 2, 3} && receiver.CS == {(1, 2), (2, 3), (3, 1)} && receiver.C == {1});}
2024-09-25 21:46:54.3857 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_2_290_0: int, argument_2_0_0: int, receiver: Database)
    {
      assume {:formal} formal_0_286_0 == 1;
      assume {:formal} formal_0_286_1 == 2;
      assume {:formal} formal_0_286_2 == 3;
      assume {:formal} formal_1_288_0 == 1;
      assume {:formal} formal_1_288_1 == 2;
      assume {:formal} formal_1_288_2 == 2;
      assume {:formal} formal_1_288_3 == 3;
      assume {:formal} formal_1_288_4 == 3;
      assume {:formal} formal_1_288_5 == 1;
      assume {:formal} formal_2_290_0 == 1;
      assume !(receiver.D == {formal_0_286_0, formal_0_286_1, formal_0_286_2} && receiver.CS == {(formal_1_288_0, formal_1_288_1), (formal_1_288_2, formal_1_288_3), (formal_1_288_4, formal_1_288_5)} && receiver.C == {formal_2_290_0});
      assume true && exists v: int {:trigger v in receiver.D} :: v in receiver.D && v != argument_2_0_0;
      var _ := receiver.DiffDevice(argument_2_0_0);
      assert {:keepAssertion} !(receiver.D == {formal_0_286_0, formal_0_286_1, formal_0_286_2} && receiver.CS == {(formal_1_288_0, formal_1_288_1), (formal_1_288_2, formal_1_288_3), (formal_1_288_4, formal_1_288_5)} && receiver.C == {formal_2_290_0});
    }
2024-09-25 21:46:54.7141 DEBUG Trying method sequence: AddConnection
2024-09-25 21:46:54.7168 TRACE Verifying the body of the following method:
static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_2_290_0: int, argument_3_0_0: (int, int), receiver: Database)
    modifies receiver {assume !(receiver.D == {1, 2, 3} && receiver.CS == {(1, 2), (2, 3), (3, 1)} && receiver.C == {1});
assume true && receiver.IsValid() && argument_3_0_0.0 in receiver.D && argument_3_0_0.1 in receiver.D;
receiver.AddConnection(argument_3_0_0);
assert {:keepAssertion} !(receiver.D == {1, 2, 3} && receiver.CS == {(1, 2), (2, 3), (3, 1)} && receiver.C == {1});}
2024-09-25 21:46:54.7168 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, formal_2_290_0: int, argument_3_0_0: (int, int), receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_0_286_0 == 1;
      assume {:formal} formal_0_286_1 == 2;
      assume {:formal} formal_0_286_2 == 3;
      assume {:formal} formal_1_288_0 == 1;
      assume {:formal} formal_1_288_1 == 2;
      assume {:formal} formal_1_288_2 == 2;
      assume {:formal} formal_1_288_3 == 3;
      assume {:formal} formal_1_288_4 == 3;
      assume {:formal} formal_1_288_5 == 1;
      assume {:formal} formal_2_290_0 == 1;
      assume !(receiver.D == {formal_0_286_0, formal_0_286_1, formal_0_286_2} && receiver.CS == {(formal_1_288_0, formal_1_288_1), (formal_1_288_2, formal_1_288_3), (formal_1_288_4, formal_1_288_5)} && receiver.C == {formal_2_290_0});
      assume true && receiver.IsValid() && argument_3_0_0.0 in receiver.D && argument_3_0_0.1 in receiver.D;
      receiver.AddConnection(argument_3_0_0);
      assert {:keepAssertion} !(receiver.D == {formal_0_286_0, formal_0_286_1, formal_0_286_2} && receiver.CS == {(formal_1_288_0, formal_1_288_1), (formal_1_288_2, formal_1_288_3), (formal_1_288_4, formal_1_288_5)} && receiver.C == {formal_2_290_0});
    }
2024-09-25 21:46:55.1283 TRACE Verifying the body of the following method:
static method synthesized(formal_1_308_0: int, formal_2_286_0: int, formal_2_286_1: int, formal_2_286_2: int, formal_0_286_0: int, formal_0_286_1: int, formal_0_286_2: int, formal_3_311_0: int, formal_4_313_0: int, formal_5_315_0: int, formal_5_315_1: int, formal_6_317_0: int, formal_6_317_1: int, formal_7_319_0: int, formal_7_319_1: int, formal_7_319_2: int, formal_7_319_3: int, formal_8_321_0: int, formal_9_290_0: int, formal_2_290_0: int, formal_11_245_0: bool, formal_1_288_0: int, formal_1_288_1: int, formal_1_288_2: int, formal_1_288_3: int, formal_1_288_4: int, formal_1_288_5: int, argument_3_0_0: (int, int), receiver: Database, formal_0_305_0: int, formal_0_305_1: int)
    modifies receiver {assume {:attribute 21} argument_3_0_0 == (3, 1);
assume !(receiver == null);
assume 1 in receiver.D;
assume receiver.D == {1, 2, 3};
assume 2 in receiver.D;
assume 3 in receiver.D;
assume (1, 2) in receiver.CS;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 2919 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

2024-09-25 21:47:16.8328 TRACE Verifying the body of the following method:
static method synthesized(formal_1_313_0: int, formal_2_635_0: int, formal_4_245_0: bool, argument_44_0_0: int, receiver: Database)
    modifies receiver {assume !(!(receiver == null) && 3 in receiver.D && receiver.D == {3} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
assume true && receiver.IsValid() && argument_44_0_0 in receiver.D;
receiver.MakeCentral(argument_44_0_0);
assert {:keepAssertion} !(!(receiver == null) && 3 in receiver.D && receiver.D == {3} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);}
2024-09-25 21:47:16.8328 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_313_0: int, formal_2_635_0: int, formal_4_245_0: bool, argument_44_0_0: int, receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_1_313_0 == 3;
      assume {:formal} formal_2_635_0 == 3;
      assume {:formal} formal_4_245_0 == true;
      assume !(!(receiver == null) && formal_1_313_0 in receiver.D && receiver.D == {formal_2_635_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
      assume true && receiver.IsValid() && argument_44_0_0 in receiver.D;
      receiver.MakeCentral(argument_44_0_0);
      assert {:keepAssertion} !(!(receiver == null) && formal_1_313_0 in receiver.D && receiver.D == {formal_2_635_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
    }
2024-09-25 21:47:17.1208 DEBUG Trying method sequence: DeleteDevice, AddDevice, AddConnection, AddDevice, AddConnection, AddConnection, MakeCentral
2024-09-25 21:47:17.1226 TRACE Verifying the body of the following method:
static method synthesized(formal_1_313_0: int, formal_2_635_0: int, formal_4_245_0: bool, argument_45_0_0: int, argument_45_0_1: int, receiver: Database)
    modifies receiver {assume !(!(receiver == null) && 3 in receiver.D && receiver.D == {3} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
assume true && receiver.IsValid() && argument_45_0_0 in receiver.D && argument_45_0_1 in receiver.D && argument_45_0_1 != argument_45_0_0 && argument_45_0_1 in receiver.C;
receiver.DeleteDevice(argument_45_0_0, argument_45_0_1);
assert {:keepAssertion} !(!(receiver == null) && 3 in receiver.D && receiver.D == {3} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);}
2024-09-25 21:47:17.1226 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_313_0: int, formal_2_635_0: int, formal_4_245_0: bool, argument_45_0_0: int, argument_45_0_1: int, receiver: Database)
      modifies receiver
    {
      assume {:formal} formal_1_313_0 == 3;
      assume {:formal} formal_2_635_0 == 3;
      assume {:formal} formal_4_245_0 == true;
      assume !(!(receiver == null) && formal_1_313_0 in receiver.D && receiver.D == {formal_2_635_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
      assume true && receiver.IsValid() && argument_45_0_0 in receiver.D && argument_45_0_1 in receiver.D && argument_45_0_1 != argument_45_0_0 && argument_45_0_1 in receiver.C;
      receiver.DeleteDevice(argument_45_0_0, argument_45_0_1);
      assert {:keepAssertion} !(!(receiver == null) && formal_1_313_0 in receiver.D && receiver.D == {formal_2_635_0} && receiver.IsValid.requires() && formal_4_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
    }
2024-09-25 21:47:17.3926 INFO Expanding method sequence AddDevice, AddDevice, AddConnection, AddDevice, AddConnection, AddConnection, MakeCentral -- estimated distance to start = 0, distance to end = 7
2024-09-25 21:47:17.3975 TRACE Verifying the body of the following method:
static method synthesized(formal_3_245_0: bool) returns (receiver: Database) {assume true;
receiver := new Database();
assert {:keepAssertion} !(!(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);}
2024-09-25 21:47:17.3975 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_245_0: bool) returns (receiver: Database)
    {
      assume true;
      receiver := new Database();
      assume {:formal} formal_3_245_0 == true;
      assert {:keepAssertion} !(!(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && formal_3_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C);
    }
2024-09-25 21:47:17.7050 TRACE Verifying the body of the following method:
static method synthesized(formal_3_245_0: bool) returns (receiver: Database) {assume true;
receiver := new Database();
assert {:keepAssertion} !(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.CS && {} == receiver.C;}
2024-09-25 21:47:17.7050 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_245_0: bool) returns (receiver: Database)
    {
      assume true;
      receiver := new Database();
      assume {:formal} formal_3_245_0 == true;
      assert {:keepAssertion} !(receiver == null) && receiver.D == {} && receiver.IsValid.requires() && formal_3_245_0 == receiver.IsValid() && {} == receiver.CS && {} == receiver.C;
    }
2024-09-25 21:47:17.9594 INFO Have found the following solution to a subproblem!
{
result := new Database();
result.AddDevice(3);
result.AddDevice(2);
assume {:attribute 313} argument_33_0_0 == (2, 3);
result.AddConnection(argument_33_0_0);
result.AddDevice(1);
assume {:attribute 125} argument_13_0_0 == (1, 2);
result.AddConnection(argument_13_0_0);
assume {:attribute 93} argument_8_0_0 == (3, 1);
result.AddConnection(argument_8_0_0);
result.MakeCentral(1);
}
2024-09-25 21:47:17.9594 INFO Time spend on subproblem: 00:00:24.7846614
2024-09-25 21:47:17.9594 INFO Number of Regular queries to Dafny used to solve subproblem: 61 (00:00:19.5847751)
2024-09-25 21:47:17.9625 INFO Number of Simplify queries to Dafny used to solve subproblem: 14 (00:00:04.9611748)
2024-09-25 21:47:17.9625 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-25 21:47:17.9625 INFO Have found the following solution!
static method solution() returns (result:Database)
ensures Goal(result)
{
result := new Database();
result.AddDevice(3);
result.AddDevice(2);
assume {:attribute 313} argument_33_0_0 == (2, 3);
result.AddConnection(argument_33_0_0);
result.AddDevice(1);
assume {:attribute 125} argument_13_0_0 == (1, 2);
result.AddConnection(argument_13_0_0);
assume {:attribute 93} argument_8_0_0 == (3, 1);
result.AddConnection(argument_8_0_0);
result.MakeCentral(1);
}
2024-09-25 21:47:17.9625 INFO Total time spend on synthesis: 00:00:24.9642131
2024-09-25 21:47:17.9625 INFO Total number of Regular queries to Dafny: 61 (00:00:19.5847751)
2024-09-25 21:47:17.9625 INFO Total number of Simplify queries to Dafny: 14 (00:00:04.9611748)
2024-09-25 21:47:17.9625 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
