2024-10-02 00:42:24.7202 DEBUG Using integer programming to estimating the distance to this.View() == [0, 1, 2, 4, 5], receiver.IsValid()
2024-10-02 00:42:24.7348 TRACE Minimizing value: ((((Rotate + IsEmpty) + Enqueue) + Front) + Dequeue)
2024-10-02 00:42:24.7348 DEBUG The integer programming gives the lower bound of 0 methods.
2024-10-02 00:42:24.7348 DEBUG In particular, need at least -0 calls to Rotate
2024-10-02 00:42:24.7348 DEBUG In particular, need at least -0 calls to IsEmpty
2024-10-02 00:42:24.7348 DEBUG In particular, need at least -0 calls to Enqueue
2024-10-02 00:42:24.7348 DEBUG In particular, need at least -0 calls to Front
2024-10-02 00:42:24.7348 DEBUG In particular, need at least -0 calls to Dequeue
2024-10-02 00:42:24.7348 INFO Initial heuristic value is 0
2024-10-02 00:42:24.7404 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-10-02 00:42:24.7800 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1492_0: int, formal_1_1492_1: int, formal_1_1492_2: int, formal_1_1492_3: int, formal_1_1492_4: int) returns (receiver: Queue) {assume true;
receiver := new Queue();
assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [0, 1, 2, 4, 5]);}
2024-10-02 00:42:24.7800 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_1492_0: int, formal_1_1492_1: int, formal_1_1492_2: int, formal_1_1492_3: int, formal_1_1492_4: int)
        returns (receiver: Queue)
    {
      assume true;
      receiver := new Queue();
      assume {:formal} formal_1_1492_0 == 0;
      assume {:formal} formal_1_1492_1 == 1;
      assume {:formal} formal_1_1492_2 == 2;
      assume {:formal} formal_1_1492_3 == 4;
      assume {:formal} formal_1_1492_4 == 5;
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [formal_1_1492_0, formal_1_1492_1, formal_1_1492_2, formal_1_1492_3, formal_1_1492_4]);
    }
2024-10-02 00:42:25.8390 DEBUG Trying method sequence: Rotate
2024-10-02 00:42:25.8390 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1492_0: int, formal_1_1492_1: int, formal_1_1492_2: int, formal_1_1492_3: int, formal_1_1492_4: int, receiver: Queue)
    modifies receiver, receiver.Repr {assume !(receiver.IsValid() && receiver.View() == [0, 1, 2, 4, 5]);
assume true && receiver.IsValid() && 0 < |receiver.Repr|;
receiver.Rotate();
assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [0, 1, 2, 4, 5]);}
2024-10-02 00:42:25.8390 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_1492_0: int, formal_1_1492_1: int, formal_1_1492_2: int, formal_1_1492_3: int, formal_1_1492_4: int, receiver: Queue)
      modifies receiver, receiver.Repr
    {
      assume {:formal} formal_1_1492_0 == 0;
      assume {:formal} formal_1_1492_1 == 1;
      assume {:formal} formal_1_1492_2 == 2;
      assume {:formal} formal_1_1492_3 == 4;
      assume {:formal} formal_1_1492_4 == 5;
      assume !(receiver.IsValid() && receiver.View() == [formal_1_1492_0, formal_1_1492_1, formal_1_1492_2, formal_1_1492_3, formal_1_1492_4]);
      assume true && receiver.IsValid() && 0 < |receiver.Repr|;
      receiver.Rotate();
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [formal_1_1492_0, formal_1_1492_1, formal_1_1492_2, formal_1_1492_3, formal_1_1492_4]);
    }
2024-10-02 00:42:26.3029 TRACE Verifying the body of the following method:
static method synthesized(formal_3_1010_0: int, formal_4_1012_0: int, formal_5_1034_0: int, formal_6_1082_0: int, formal_7_1060_0: int, formal_8_1512_0: int, formal_9_1142_0: int, formal_10_1515_0: int, formal_11_1517_0: int, formal_11_1517_1: int, formal_12_1218_0: int, formal_13_1520_0: int, formal_13_1520_1: int, formal_14_1522_0: int, formal_14_1522_1: int, formal_15_1524_0: int, formal_16_1526_0: int, formal_17_1528_0: int, formal_18_1530_0: int, formal_20_734_0: bool, formal_21_1534_0: int, formal_21_1534_1: int, formal_22_1536_0: int, formal_23_1538_0: int, formal_24_1540_0: int, formal_24_1540_1: int, formal_1_1492_0: int, formal_1_1492_1: int, formal_1_1492_2: int, formal_1_1492_3: int, formal_1_1492_4: int, receiver: Queue)
    modifies receiver, receiver.Repr {assume !(receiver == null);
assume !(receiver.head == null);
assume !(receiver.tail == null);
assume |receiver.Repr| > 0;
assume |receiver.Repr| > 1;
assume |receiver.Repr| > 2;
assume |receiver.Repr| > 4;
assume |receiver.Repr| > 3;
assume !(receiver.Repr[1] == null);
assume !(receiver.Repr[2] == null);
assume !(receiver.Repr[2].next == null);
assume 0 == receiver.Repr[1].data;
assume receiver.head == receiver.Repr[0];
assume 1 == receiver.Repr[2].data;
assume 2 == receiver.Repr[2].next.data;
assume 4 == receiver.tail.data;
assume receiver.tail == receiver.Repr[4];
assume 5 == receiver.head.data;
assume 5 == |receiver.Repr|;
assume receiver.IsValid.requires();
assume true == receiver.IsValid();
assume receiver.Repr[2] == receiver.Repr[1].next;
assume receiver.Repr[1] == receiver.head.next;
assume receiver.tail == receiver.Repr[2].next.next;
assume receiver.Repr[2].next == receiver.Repr[3];
assume null == receiver.tail.next;
receiver.Rotate();
assert {:keepAssertion} receiver.IsValid() && receiver.View() == [0, 1, 2, 4, 5];}
2024-10-02 00:42:26.3029 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_3_1010_0: int, formal_4_1012_0: int, formal_5_1034_0: int, formal_6_1082_0: int, formal_7_1060_0: int, formal_8_1512_0: int, formal_9_1142_0: int, formal_10_1515_0: int, formal_11_1517_0: int, formal_11_1517_1: int, formal_12_1218_0: int, formal_13_1520_0: int, formal_13_1520_1: int, formal_14_1522_0: int, formal_14_1522_1: int, formal_15_1524_0: int, formal_16_1526_0: int, formal_17_1528_0: int, formal_18_1530_0: int, formal_20_734_0: bool, formal_21_1534_0: int, formal_21_1534_1: int, formal_22_1536_0: int, formal_23_1538_0: int, formal_24_1540_0: int, formal_24_1540_1: int, formal_1_1492_0: int, formal_1_1492_1: int, formal_1_1492_2: int, formal_1_1492_3: int, formal_1_1492_4: int, receiver: Queue)
      modifies receiver, receiver.Repr
    {
      assume {:formal} formal_3_1010_0 == 0;
      assume {:formal} formal_4_1012_0 == 1;
      assume {:formal} formal_5_1034_0 == 2;
      assume {:formal} formal_6_1082_0 == 4;
      assume {:formal} formal_7_1060_0 == 3;
      assume {:formal} formal_8_1512_0 == 1;
      assume {:formal} formal_9_1142_0 == 2;
      assume {:formal} formal_10_1515_0 == 2;
      assume {:formal} formal_11_1517_0 == 0;
      assume {:formal} formal_11_1517_1 == 1;
      assume {:formal} formal_12_1218_0 == 0;
      assume {:formal} formal_13_1520_0 == 1;
      assume {:formal} formal_13_1520_1 == 2;
      assume {:formal} formal_14_1522_0 == 2;
      assume {:formal} formal_14_1522_1 == 2;
      assume {:formal} formal_15_1524_0 == 4;
      assume {:formal} formal_16_1526_0 == 4;
      assume {:formal} formal_17_1528_0 == 5;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 3241 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

 static method synthesized(formal_3_1010_0: int, formal_2_1010_0: int, formal_6_1218_0: int, formal_5_1218_0: int, formal_9_734_0: bool, formal_7_734_0: bool, formal_3_279_0: int, formal_4_1558_0: int, receiver: Queue)
      modifies receiver, receiver.Repr
    {
      assume {:formal} formal_3_1010_0 == 0;
      assume {:formal} formal_6_1218_0 == 0;
      assume {:formal} formal_9_734_0 == true;
      assume !(receiver == null);
      assume !(receiver.head == null);
      assume |receiver.Repr| > formal_3_1010_0;
      assume receiver.head == receiver.Repr[formal_6_1218_0];
      assume receiver.IsValid.requires();
      assume formal_9_734_0 == receiver.IsValid();
      var _ := receiver.Dequeue();
      assume {:formal} formal_2_1010_0 == 0;
      assume {:formal} formal_3_279_0 == 1;
      assume {:formal} formal_4_1558_0 == 0;
      assume {:formal} formal_5_1218_0 == 0;
      assume {:formal} formal_7_734_0 == true;
      assert {:keepAssertion} !(receiver == null);
      assert {:keepAssertion} !(receiver.head == null);
      assert {:keepAssertion} |receiver.Repr| > formal_2_1010_0;
      assert {:keepAssertion} formal_3_279_0 == |receiver.Repr|;
      assert {:keepAssertion} formal_4_1558_0 == receiver.head.data;
      assert {:keepAssertion} receiver.head == receiver.Repr[formal_5_1218_0];
      assert {:keepAssertion} receiver.IsValid.requires();
      assert {:keepAssertion} formal_7_734_0 == receiver.IsValid();
      assert {:keepAssertion} receiver.head == receiver.tail;
      assert {:keepAssertion} null == receiver.head.next;
    }
2024-10-02 00:45:41.4254 DEBUG Using integer programming to estimating the distance to |this.Repr| > 0, |this.Repr| > 1, receiver.tail == receiver.head.next, this.tail == this.Repr[1], ¬(receiver.tail == null), this.head == this.Repr[0], ¬(receiver.head == null), receiver.IsValid.requires(), ¬(receiver == null), null == receiver.tail.next, 2 == |this.Repr|, 0 == this.tail.data, 46 == this.head.data, true == this.IsValid()
2024-10-02 00:45:41.4274 TRACE Adding solver constraint for property |this.Repr| > default0 from False to True: ((Enqueue * 1) + (Enqueue * 0)) >= 2
2024-10-02 00:45:41.4274 TRACE Adding solver constraint for property |this.Repr| > default0 from False to True: ((Enqueue * 1) + (Enqueue * 0)) >= 2
2024-10-02 00:45:41.4274 TRACE Adding solver constraint for property this.tail == this.Repr[default0] from Undefined to True: (((Enqueue * 1) + (Enqueue * 0)) + ((Dequeue * 0) + (Dequeue * 0))) >= 1
2024-10-02 00:45:41.4274 TRACE Adding solver constraint for property this.tail == this.Repr[default0] from Undefined to True: (((Enqueue * 1) + (Enqueue * 0)) + ((Dequeue * 0) + (Dequeue * 1))) >= 1
2024-10-02 00:45:41.4274 TRACE Adding solver constraint for property this.head == this.Repr[default0] from Undefined to True: ((((Rotate * 0) + (Rotate * 0)) + ((Enqueue * 1) + (Enqueue * 1))) + ((Dequeue * 0) + (Dequeue * 0))) >= 1
2024-10-02 00:45:41.4274 TRACE Adding solver constraint for property this.head == this.Repr[default0] from Undefined to True: ((((Rotate * 0) + (Rotate * 10000)) + ((Enqueue * 1) + (Enqueue * 0))) + ((Dequeue * 0) + (Dequeue * 10000))) >= 1
2024-10-02 00:45:41.4274 TRACE Adding solver constraint for property default0 == |this.Repr| from False to True: (((Enqueue * 1) + (Enqueue * 0)) + ((Dequeue * 1) + (Dequeue * 0))) >= 1
2024-10-02 00:45:41.4274 TRACE Adding solver constraint for property default0 == |this.Repr| from False to True: (((Enqueue * 1) + (Enqueue * 0)) + ((Dequeue * 1) + (Dequeue * 0))) >= 1
2024-10-02 00:45:41.4274 TRACE Minimizing value: ((((Rotate + IsEmpty) + Enqueue) + Front) + Dequeue)
2024-10-02 00:45:41.4274 DEBUG The integer programming gives the lower bound of 2 methods.
2024-10-02 00:45:41.4274 DEBUG In particular, need at least -0 calls to Rotate
2024-10-02 00:45:41.4274 DEBUG In particular, need at least -0 calls to IsEmpty
2024-10-02 00:45:41.4274 DEBUG In particular, need at least 2 calls to Enqueue
2024-10-02 00:45:41.4274 DEBUG In particular, need at least -0 calls to Front
2024-10-02 00:45:41.4274 DEBUG In particular, need at least -0 calls to Dequeue
2024-10-02 00:45:41.4274 INFO The following method sequence is possible (heuristic=2): Dequeue, Enqueue, Enqueue, Enqueue, Enqueue
2024-10-02 00:45:41.4274 INFO New state is |this.Repr| > 0, |this.Repr| > 1, receiver.tail == receiver.head.next, this.tail == this.Repr[1], ¬(receiver.tail == null), this.head == this.Repr[0], ¬(receiver.head == null), receiver.IsValid.requires(), ¬(receiver == null), null == receiver.tail.next, 2 == |this.Repr|, 0 == this.tail.data, 46 == this.head.data, true == this.IsValid()
2024-10-02 00:45:41.4274 INFO Expanding method sequence Enqueue, Enqueue, Enqueue, Enqueue, Enqueue -- estimated distance to start = 0, distance to end = 5
2024-10-02 00:45:41.4274 TRACE Verifying the body of the following method:
static method synthesized(formal_2_734_0: bool) returns (receiver: Queue) {assume true;
receiver := new Queue();
assert {:keepAssertion} !(!(receiver == null) && receiver.IsValid.requires() && true == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr);}
2024-10-02 00:45:41.4274 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_734_0: bool) returns (receiver: Queue)
    {
      assume true;
      receiver := new Queue();
      assume {:formal} formal_2_734_0 == true;
      assert {:keepAssertion} !(!(receiver == null) && receiver.IsValid.requires() && formal_2_734_0 == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr);
    }
2024-10-02 00:45:41.7155 TRACE Verifying the body of the following method:
static method synthesized(formal_2_734_0: bool) returns (receiver: Queue) {assume true;
receiver := new Queue();
assert {:keepAssertion} !(receiver == null) && receiver.IsValid.requires() && true == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr;}
2024-10-02 00:45:41.7155 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_734_0: bool) returns (receiver: Queue)
    {
      assume true;
      receiver := new Queue();
      assume {:formal} formal_2_734_0 == true;
      assert {:keepAssertion} !(receiver == null) && receiver.IsValid.requires() && formal_2_734_0 == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr;
    }
2024-10-02 00:45:41.9618 INFO Have found the following solution to a subproblem!
{
result := new Queue();
result.Enqueue(0);
result.Enqueue(1);
result.Enqueue(2);
result.Enqueue(4);
result.Enqueue(5);
}
2024-10-02 00:45:41.9634 INFO Time spend on subproblem: 00:03:17.2537440
2024-10-02 00:45:41.9634 INFO Number of Regular queries to Dafny used to solve subproblem: 43 (00:00:17.2026204)
2024-10-02 00:45:41.9634 INFO Number of Simplify queries to Dafny used to solve subproblem: 10 (00:02:45.7463914)
2024-10-02 00:45:41.9634 INFO Number of Heuristic queries to Dafny used to solve subproblem: 52 (00:00:13.9082218)
2024-10-02 00:45:41.9634 INFO Have found the following solution!
static method solution() returns (result:Queue)
ensures Goal(result)
{
result := new Queue();
result.Enqueue(0);
result.Enqueue(1);
result.Enqueue(2);
result.Enqueue(4);
result.Enqueue(5);
}
2024-10-02 00:45:41.9634 INFO Total time spend on synthesis: 00:03:17.8547270
2024-10-02 00:45:41.9634 INFO Total number of Regular queries to Dafny: 43 (00:00:17.2026204)
2024-10-02 00:45:41.9634 INFO Total number of Simplify queries to Dafny: 10 (00:02:45.7463914)
2024-10-02 00:45:41.9634 INFO Total number of Heuristic queries to Dafny: 52 (00:00:13.9082218)
