2024-09-24 12:55:22.8891 DEBUG Using integer programming to estimating the distance to this.users.Keys == {0, 1, 2}, 0 in this.users[1].friends, 0 in this.users[2].friends, 1 in this.users[0].friends, 1 in this.users[2].friends, 2 in this.users[0].friends, 2 in this.users[1].friends
2024-09-24 12:55:22.9090 TRACE Adding solver constraint for property default0 in this.users[default1].friends from Undefined to True: (((AddUser * 0) + (AddUser * 10000)) + ((RequestResponse * 0) + (RequestResponse * 0))) >= 6
2024-09-24 12:55:22.9090 TRACE Adding solver constraint for property default0 in this.users[default1].friends from Undefined to True: (((AddUser * 0) + (AddUser * 0)) + ((RequestResponse * 0) + (RequestResponse * 2))) >= 6
2024-09-24 12:55:22.9121 TRACE Minimizing value: (((AddUser + RequestConnect) + RemoveUser) + RequestResponse)
2024-09-24 12:55:22.9121 DEBUG The integer programming gives the lower bound of 4 methods.
2024-09-24 12:55:22.9121 DEBUG In particular, need at least 1 calls to AddUser
2024-09-24 12:55:22.9121 DEBUG In particular, need at least -0 calls to RequestConnect
2024-09-24 12:55:22.9121 DEBUG In particular, need at least -0 calls to RemoveUser
2024-09-24 12:55:22.9121 DEBUG In particular, need at least 3 calls to RequestResponse
2024-09-24 12:55:22.9121 INFO Initial heuristic value is 4
2024-09-24 12:55:22.9161 INFO Expanding method sequence  -- estimated distance to start = 4, distance to end = 0
2024-09-24 12:55:22.9161 DEBUG Trying method sequence: AddUser
2024-09-24 12:55:22.9856 TRACE Verifying the body of the following method:
static method synthesized(formal_0_337_0: int, formal_0_337_1: int, formal_0_337_2: int, formal_1_339_0: int, formal_1_339_1: int, formal_2_341_0: int, formal_2_341_1: int, formal_3_343_0: int, formal_3_343_1: int, formal_4_345_0: int, formal_4_345_1: int, formal_5_347_0: int, formal_5_347_1: int, formal_6_349_0: int, formal_6_349_1: int, argument_1_0_0: nat, receiver: SocialNetwork)
    modifies receiver {assume !(receiver.users.Keys == {0, 1, 2} && 1 in receiver.users[0].friends && 0 in receiver.users[1].friends && 1 in receiver.users[2].friends && 2 in receiver.users[1].friends && 2 in receiver.users[0].friends && 0 in receiver.users[2].friends);
assume true && receiver.IsValid() && argument_1_0_0 !in receiver.users;
receiver.AddUser(argument_1_0_0);
assert {:keepAssertion} !(receiver.users.Keys == {0, 1, 2} && 1 in receiver.users[0].friends && 0 in receiver.users[1].friends && 1 in receiver.users[2].friends && 2 in receiver.users[1].friends && 2 in receiver.users[0].friends && 0 in receiver.users[2].friends);}
2024-09-24 12:55:22.9856 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_337_0: int, formal_0_337_1: int, formal_0_337_2: int, formal_1_339_0: int, formal_1_339_1: int, formal_2_341_0: int, formal_2_341_1: int, formal_3_343_0: int, formal_3_343_1: int, formal_4_345_0: int, formal_4_345_1: int, formal_5_347_0: int, formal_5_347_1: int, formal_6_349_0: int, formal_6_349_1: int, argument_1_0_0: nat, receiver: SocialNetwork)
      modifies receiver
    {
      assume {:formal} formal_0_337_0 == 0;
      assume {:formal} formal_0_337_1 == 1;
      assume {:formal} formal_0_337_2 == 2;
      assume {:formal} formal_1_339_0 == 1;
      assume {:formal} formal_1_339_1 == 0;
      assume {:formal} formal_2_341_0 == 0;
      assume {:formal} formal_2_341_1 == 1;
      assume {:formal} formal_3_343_0 == 1;
      assume {:formal} formal_3_343_1 == 2;
      assume {:formal} formal_4_345_0 == 2;
      assume {:formal} formal_4_345_1 == 1;
      assume {:formal} formal_5_347_0 == 2;
      assume {:formal} formal_5_347_1 == 0;
      assume {:formal} formal_6_349_0 == 0;
      assume {:formal} formal_6_349_1 == 2;
      assume !(receiver.users.Keys == {formal_0_337_0, formal_0_337_1, formal_0_337_2} && formal_1_339_0 in receiver.users[formal_1_339_1].friends && formal_2_341_0 in receiver.users[formal_2_341_1].friends && formal_3_343_0 in receiver.users[formal_3_343_1].friends && formal_4_345_0 in receiver.users[formal_4_345_1].friends && formal_5_347_0 in receiver.users[formal_5_347_1].friends && formal_6_349_0 in receiver.users[formal_6_349_1].friends);
      assume true && receiver.IsValid() && argument_1_0_0 !in receiver.users;
      receiver.AddUser(argument_1_0_0);
      assert {:keepAssertion} !(receiver.users.Keys == {formal_0_337_0, formal_0_337_1, formal_0_337_2} && formal_1_339_0 in receiver.users[formal_1_339_1].friends && formal_2_341_0 in receiver.users[formal_2_341_1].friends && formal_3_343_0 in receiver.users[formal_3_343_1].friends && formal_4_345_0 in receiver.users[formal_4_345_1].friends && formal_5_347_0 in receiver.users[formal_5_347_1].friends && formal_6_349_0 in receiver.users[formal_6_349_1].friends);
    }
2024-09-24 12:55:24.1899 DEBUG Trying method sequence: RequestConnect
2024-09-24 12:55:24.1918 TRACE Verifying the body of the following method:
static method synthesized(formal_0_337_0: int, formal_0_337_1: int, formal_0_337_2: int, formal_1_339_0: int, formal_1_339_1: int, formal_2_341_0: int, formal_2_341_1: int, formal_3_343_0: int, formal_3_343_1: int, formal_4_345_0: int, formal_4_345_1: int, formal_5_347_0: int, formal_5_347_1: int, formal_6_349_0: int, formal_6_349_1: int, argument_2_0_0: nat, argument_2_0_1: nat, receiver: SocialNetwork)
    modifies receiver {assume !(receiver.users.Keys == {0, 1, 2} && 1 in receiver.users[0].friends && 0 in receiver.users[1].friends && 1 in receiver.users[2].friends && 2 in receiver.users[1].friends && 2 in receiver.users[0].friends && 0 in receiver.users[2].friends);
assume true && receiver.IsValid() && argument_2_0_0 != argument_2_0_1 && argument_2_0_0 in receiver.users && argument_2_0_1 in receiver.users && argument_2_0_0 !in receiver.users[argument_2_0_1].friends && argument_2_0_1 !in receiver.users[argument_2_0_0].friends && argument_2_0_1 !in receiver.users[argument_2_0_0].requests;
receiver.RequestConnect(argument_2_0_0, argument_2_0_1);
assert {:keepAssertion} !(receiver.users.Keys == {0, 1, 2} && 1 in receiver.users[0].friends && 0 in receiver.users[1].friends && 1 in receiver.users[2].friends && 2 in receiver.users[1].friends && 2 in receiver.users[0].friends && 0 in receiver.users[2].friends);}
2024-09-24 12:55:24.1918 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_337_0: int, formal_0_337_1: int, formal_0_337_2: int, formal_1_339_0: int, formal_1_339_1: int, formal_2_341_0: int, formal_2_341_1: int, formal_3_343_0: int, formal_3_343_1: int, formal_4_345_0: int, formal_4_345_1: int, formal_5_347_0: int, formal_5_347_1: int, formal_6_349_0: int, formal_6_349_1: int, argument_2_0_0: nat, argument_2_0_1: nat, receiver: SocialNetwork)
      modifies receiver
    {
      assume {:formal} formal_0_337_0 == 0;
      assume {:formal} formal_0_337_1 == 1;
      assume {:formal} formal_0_337_2 == 2;
      assume {:formal} formal_1_339_0 == 1;
      assume {:formal} formal_1_339_1 == 0;
      assume {:formal} formal_2_341_0 == 0;
      assume {:formal} formal_2_341_1 == 1;
      assume {:formal} formal_3_343_0 == 1;
      assume {:formal} formal_3_343_1 == 2;
      assume {:formal} formal_4_345_0 == 2;
      assume {:formal} formal_4_345_1 == 1;
      assume {:formal} formal_5_347_0 == 2;
      assume {:formal} formal_5_347_1 == 0;
      assume {:formal} formal_6_349_0 == 0;
      assume {:formal} formal_6_349_1 == 2;
      assume !(receiver.users.Keys == {formal_0_337_0, formal_0_337_1, formal_0_337_2} && formal_1_339_0 in receiver.users[formal_1_339_1].friends && formal_2_341_0 in receiver.users[formal_2_341_1].friends && formal_3_343_0 in receiver.users[formal_3_343_1].friends && formal_4_345_0 in receiver.users[formal_4_345_1].friends && formal_5_347_0 in receiver.users[formal_5_347_1].friends && formal_6_349_0 in receiver.users[formal_6_349_1].friends);
      assume true && receiver.IsValid() && argument_2_0_0 != argument_2_0_1 && argument_2_0_0 in receiver.users && argument_2_0_1 in receiver.users && argument_2_0_0 !in receiver.users[argument_2_0_1].friends && argument_2_0_1 !in receiver.users[argument_2_0_0].friends && argument_2_0_1 !in receiver.users[argument_2_0_0].requests;
      receiver.RequestConnect(argument_2_0_0, argument_2_0_1);
      assert {:keepAssertion} !(receiver.users.Keys == {formal_0_337_0, formal_0_337_1, formal_0_337_2} && formal_1_339_0 in receiver.users[formal_1_339_1].friends && formal_2_341_0 in receiver.users[formal_2_341_1].friends && formal_3_343_0 in receiver.users[formal_3_343_1].friends && formal_4_345_0 in receiver.users[formal_4_345_1].friends && formal_5_347_0 in receiver.users[formal_5_347_1].friends && formal_6_349_0 in receiver.users[formal_6_349_1].friends);
    }
2024-09-24 12:55:24.6189 DEBUG Trying method sequence: RemoveUser
2024-09-24 12:55:24.6272 TRACE Verifying the body of the following method:
static method synthesized(formal_0_337_0: int, formal_0_337_1: int, formal_0_337_2: int, formal_1_339_0: int, formal_1_339_1: int, formal_2_341_0: int, formal_2_341_1: int, formal_3_343_0: int, formal_3_343_1: int, formal_4_345_0: int, formal_4_345_1: int, formal_5_347_0: int, formal_5_347_1: int, formal_6_349_0: int, formal_6_349_1: int, argument_3_0_0: nat, receiver: SocialNetwork)
    modifies receiver {assume !(receiver.users.Keys == {0, 1, 2} && 1 in receiver.users[0].friends && 0 in receiver.users[1].friends && 1 in receiver.users[2].friends && 2 in receiver.users[1].friends && 2 in receiver.users[0].friends && 0 in receiver.users[2].friends);
assume true && receiver.IsValid() && (forall other: int {:trigger receiver.users[other]} {:trigger other in receiver.users} :: (other in receiver.users ==> argument_3_0_0 !in receiver.users[other].friends) && (other in receiver.users ==> argument_3_0_0 !in receiver.users[other].requests)) && argument_3_0_0 in receiver.users && receiver.users[argument_3_0_0].friends == {} && receiver.users[argument_3_0_0].requests == {};
receiver.RemoveUser(argument_3_0_0);
assert {:keepAssertion} !(receiver.users.Keys == {0, 1, 2} && 1 in receiver.users[0].friends && 0 in receiver.users[1].friends && 1 in receiver.users[2].friends && 2 in receiver.users[1].friends && 2 in receiver.users[0].friends && 0 in receiver.users[2].friends);}
2024-09-24 12:55:24.6272 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_337_0: int, formal_0_337_1: int, formal_0_337_2: int, formal_1_339_0: int, formal_1_339_1: int, formal_2_341_0: int, formal_2_341_1: int, formal_3_343_0: int, formal_3_343_1: int, formal_4_345_0: int, formal_4_345_1: int, formal_5_347_0: int, formal_5_347_1: int, formal_6_349_0: int, formal_6_349_1: int, argument_3_0_0: nat, receiver: SocialNetwork)
      modifies receiver
    {
      assume {:formal} formal_0_337_0 == 0;
      assume {:formal} formal_0_337_1 == 1;
      assume {:formal} formal_0_337_2 == 2;
      assume {:formal} formal_1_339_0 == 1;
      assume {:formal} formal_1_339_1 == 0;
      assume {:formal} formal_2_341_0 == 0;
      assume {:formal} formal_2_341_1 == 1;
      assume {:formal} formal_3_343_0 == 1;
      assume {:formal} formal_3_343_1 == 2;
      assume {:formal} formal_4_345_0 == 2;
      assume {:formal} formal_4_345_1 == 1;
      assume {:formal} formal_5_347_0 == 2;
      assume {:formal} formal_5_347_1 == 0;
      assume {:formal} formal_6_349_0 == 0;
      assume {:formal} formal_6_349_1 == 2;
      assume !(receiver.users.Keys == {formal_0_337_0, formal_0_337_1, formal_0_337_2} && formal_1_339_0 in receiver.users[formal_1_339_1].friends && formal_2_341_0 in receiver.users[formal_2_341_1].friends && formal_3_343_0 in receiver.users[formal_3_343_1].friends && formal_4_345_0 in receiver.users[formal_4_345_1].friends && formal_5_347_0 in receiver.users[formal_5_347_1].friends && formal_6_349_0 in receiver.users[formal_6_349_1].friends);

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 5030 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assert {:keepAssertion} {} == receiver.users[formal_6_709_0].requests;
    }
2024-09-24 12:56:02.9878 DEBUG Using integer programming to estimating the distance to {} == this.users[8858].requests, {} == this.users[8858].friends, this.users[8858] == this.users[2], this.users.Keys == {2, 2, 8858, 8858}, receiver.IsValid.requires(), ¬(receiver == null), 2 in this.users, 8858 in this.users, true == this.IsValid()
2024-09-24 12:56:02.9878 TRACE Adding solver constraint for property {} == this.users[default0].requests from Undefined to True: (((AddUser * 1) + (AddUser * 0)) + ((RequestResponse * 0) + (RequestResponse * 0))) >= 1
2024-09-24 12:56:02.9878 TRACE Adding solver constraint for property {} == this.users[default0].requests from Undefined to True: (((AddUser * 1) + (AddUser * 0)) + ((RequestResponse * 0) + (RequestResponse * 1))) >= 1
2024-09-24 12:56:02.9878 TRACE Adding solver constraint for property {} == this.users[default0].friends from Undefined to True: ((AddUser * 1) + (AddUser * 0)) >= 1
2024-09-24 12:56:03.0172 TRACE Adding solver constraint for property {} == this.users[default0].friends from Undefined to True: ((AddUser * 1) + (AddUser * 0)) >= 1
2024-09-24 12:56:03.0172 TRACE Adding solver constraint for property default0 in this.users from False to True: ((AddUser * 1) + (AddUser * 0)) >= 2
2024-09-24 12:56:03.0172 TRACE Adding solver constraint for property default0 in this.users from False to True: ((AddUser * 1) + (AddUser * 0)) >= 2
2024-09-24 12:56:03.0172 TRACE Minimizing value: (((AddUser + RequestConnect) + RemoveUser) + RequestResponse)
2024-09-24 12:56:03.0172 DEBUG The integer programming gives the lower bound of 2 methods.
2024-09-24 12:56:03.0172 DEBUG In particular, need at least 2 calls to AddUser
2024-09-24 12:56:03.0172 DEBUG In particular, need at least -0 calls to RequestConnect
2024-09-24 12:56:03.0172 DEBUG In particular, need at least -0 calls to RemoveUser
2024-09-24 12:56:03.0172 DEBUG In particular, need at least -0 calls to RequestResponse
2024-09-24 12:56:03.0172 INFO The following method sequence is possible (heuristic=2): RemoveUser, AddUser, RequestConnect, RequestResponse, AddUser, RequestConnect, RequestResponse, RequestConnect, RequestResponse
2024-09-24 12:56:03.0172 INFO New state is {} == this.users[8858].requests, {} == this.users[8858].friends, this.users[8858] == this.users[2], this.users.Keys == {2, 2, 8858, 8858}, receiver.IsValid.requires(), ¬(receiver == null), 2 in this.users, 8858 in this.users, true == this.IsValid()
2024-09-24 12:56:03.0172 DEBUG Trying method sequence: RequestResponse, AddUser, RequestConnect, RequestResponse, AddUser, RequestConnect, RequestResponse, RequestConnect, RequestResponse
2024-09-24 12:56:03.0194 TRACE Verifying the body of the following method:
static method synthesized(formal_1_380_0: int, formal_2_1115_0: int, formal_2_1115_1: int, formal_4_248_0: bool, formal_5_1065_0: int, formal_6_709_0: int, argument_36_0_0: nat, argument_36_0_1: nat, argument_36_0_2: bool, receiver: SocialNetwork)
    modifies receiver {assume !(!(receiver == null) && 2 in receiver.users && receiver.users.Keys == {2, 2} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.users[2].friends && {} == receiver.users[2].requests);
assume true && receiver.IsValid() && argument_36_0_0 != argument_36_0_1 && argument_36_0_0 in receiver.users && argument_36_0_1 in receiver.users && argument_36_0_1 in receiver.users[argument_36_0_0].requests && argument_36_0_1 !in receiver.users[argument_36_0_0].friends && argument_36_0_0 !in receiver.users[argument_36_0_1].friends;
receiver.RequestResponse(argument_36_0_0, argument_36_0_1, argument_36_0_2);
assert {:keepAssertion} !(!(receiver == null) && 2 in receiver.users && receiver.users.Keys == {2, 2} && receiver.IsValid.requires() && true == receiver.IsValid() && {} == receiver.users[2].friends && {} == receiver.users[2].requests);}
2024-09-24 12:56:03.0194 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_380_0: int, formal_2_1115_0: int, formal_2_1115_1: int, formal_4_248_0: bool, formal_5_1065_0: int, formal_6_709_0: int, argument_36_0_0: nat, argument_36_0_1: nat, argument_36_0_2: bool, receiver: SocialNetwork)
      modifies receiver
    {
      assume {:formal} formal_1_380_0 == 2;
      assume {:formal} formal_2_1115_0 == 2;
      assume {:formal} formal_2_1115_1 == 2;
      assume {:formal} formal_4_248_0 == true;
      assume {:formal} formal_5_1065_0 == 2;
      assume {:formal} formal_6_709_0 == 2;
      assume !(!(receiver == null) && formal_1_380_0 in receiver.users && receiver.users.Keys == {formal_2_1115_0, formal_2_1115_1} && receiver.IsValid.requires() && formal_4_248_0 == receiver.IsValid() && {} == receiver.users[formal_5_1065_0].friends && {} == receiver.users[formal_6_709_0].requests);
      assume true && receiver.IsValid() && argument_36_0_0 != argument_36_0_1 && argument_36_0_0 in receiver.users && argument_36_0_1 in receiver.users && argument_36_0_1 in receiver.users[argument_36_0_0].requests && argument_36_0_1 !in receiver.users[argument_36_0_0].friends && argument_36_0_0 !in receiver.users[argument_36_0_1].friends;
      receiver.RequestResponse(argument_36_0_0, argument_36_0_1, argument_36_0_2);
      assert {:keepAssertion} !(!(receiver == null) && formal_1_380_0 in receiver.users && receiver.users.Keys == {formal_2_1115_0, formal_2_1115_1} && receiver.IsValid.requires() && formal_4_248_0 == receiver.IsValid() && {} == receiver.users[formal_5_1065_0].friends && {} == receiver.users[formal_6_709_0].requests);
    }
2024-09-24 12:56:03.3270 INFO Expanding method sequence AddUser, AddUser, RequestConnect, RequestResponse, AddUser, RequestConnect, RequestResponse, RequestConnect, RequestResponse -- estimated distance to start = 0, distance to end = 9
2024-09-24 12:56:03.3319 TRACE Verifying the body of the following method:
static method synthesized(formal_2_248_0: bool) returns (receiver: SocialNetwork) {assume true;
receiver := new SocialNetwork();
assert {:keepAssertion} !(!(receiver == null) && receiver.IsValid.requires() && true == receiver.IsValid() && map[] == receiver.users);}
2024-09-24 12:56:03.3319 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_248_0: bool) returns (receiver: SocialNetwork)
    {
      assume true;
      receiver := new SocialNetwork();
      assume {:formal} formal_2_248_0 == true;
      assert {:keepAssertion} !(!(receiver == null) && receiver.IsValid.requires() && formal_2_248_0 == receiver.IsValid() && map[] == receiver.users);
    }
2024-09-24 12:56:03.6552 TRACE Verifying the body of the following method:
static method synthesized(formal_2_248_0: bool) returns (receiver: SocialNetwork) {assume true;
receiver := new SocialNetwork();
assert {:keepAssertion} !(receiver == null) && receiver.IsValid.requires() && true == receiver.IsValid() && map[] == receiver.users;}
2024-09-24 12:56:03.6552 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_248_0: bool) returns (receiver: SocialNetwork)
    {
      assume true;
      receiver := new SocialNetwork();
      assume {:formal} formal_2_248_0 == true;
      assert {:keepAssertion} !(receiver == null) && receiver.IsValid.requires() && formal_2_248_0 == receiver.IsValid() && map[] == receiver.users;
    }
2024-09-24 12:56:03.9431 INFO Have found the following solution to a subproblem!
{
result := new SocialNetwork();
result.AddUser(2);
result.AddUser(1);
result.RequestConnect(1, 2);
result.RequestResponse(2, 1, true);
result.AddUser(0);
result.RequestConnect(0, 1);
result.RequestResponse(1, 0, true);
result.RequestConnect(0, 2);
result.RequestResponse(2, 0, true);
}
2024-09-24 12:56:03.9431 INFO Time spend on subproblem: 00:00:41.0688826
2024-09-24 12:56:03.9431 INFO Number of Regular queries to Dafny used to solve subproblem: 59 (00:00:27.9967699)
2024-09-24 12:56:03.9431 INFO Number of Simplify queries to Dafny used to solve subproblem: 21 (00:00:12.6251932)
2024-09-24 12:56:03.9431 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-24 12:56:03.9468 INFO Have found the following solution!
static method solution() returns (result:SocialNetwork)
ensures Goal(result)
{
result := new SocialNetwork();
result.AddUser(2);
result.AddUser(1);
result.RequestConnect(1, 2);
result.RequestResponse(2, 1, true);
result.AddUser(0);
result.RequestConnect(0, 1);
result.RequestResponse(1, 0, true);
result.RequestConnect(0, 2);
result.RequestResponse(2, 0, true);
}
2024-09-24 12:56:03.9468 INFO Total time spend on synthesis: 00:00:41.2936871
2024-09-24 12:56:03.9468 INFO Total number of Regular queries to Dafny: 59 (00:00:27.9967699)
2024-09-24 12:56:03.9468 INFO Total number of Simplify queries to Dafny: 21 (00:00:12.6251932)
2024-09-24 12:56:03.9468 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
