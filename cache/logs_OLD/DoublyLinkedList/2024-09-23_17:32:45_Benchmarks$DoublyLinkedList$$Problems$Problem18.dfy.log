2024-09-23 17:32:46.6055 DEBUG Using integer programming to estimating the distance to this.View() == [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], receiver.IsValid()
2024-09-23 17:32:46.6209 TRACE Minimizing value: (((PushBack + PushFront) + PopFront) + PopBack)
2024-09-23 17:32:46.6243 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-23 17:32:46.6243 DEBUG In particular, need at least -0 calls to PushBack
2024-09-23 17:32:46.6243 DEBUG In particular, need at least -0 calls to PushFront
2024-09-23 17:32:46.6243 DEBUG In particular, need at least -0 calls to PopFront
2024-09-23 17:32:46.6243 DEBUG In particular, need at least -0 calls to PopBack
2024-09-23 17:32:46.6243 INFO Initial heuristic value is 0
2024-09-23 17:32:46.6243 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 17:32:46.6672 TRACE Verifying the body of the following method:
static method synthesized(formal_1_729_0: int, formal_1_729_1: int, formal_1_729_2: int, formal_1_729_3: int, formal_1_729_4: int, formal_1_729_5: int, formal_1_729_6: int, formal_1_729_7: int, formal_1_729_8: int, formal_1_729_9: int, formal_1_729_10: int, formal_1_729_11: int, formal_1_729_12: int, formal_1_729_13: int, formal_1_729_14: int, formal_1_729_15: int, formal_1_729_16: int, formal_1_729_17: int) returns (receiver: List) {assume true;
receiver := new List();
assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);}
2024-09-23 17:32:46.6672 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_729_0: int, formal_1_729_1: int, formal_1_729_2: int, formal_1_729_3: int, formal_1_729_4: int, formal_1_729_5: int, formal_1_729_6: int, formal_1_729_7: int, formal_1_729_8: int, formal_1_729_9: int, formal_1_729_10: int, formal_1_729_11: int, formal_1_729_12: int, formal_1_729_13: int, formal_1_729_14: int, formal_1_729_15: int, formal_1_729_16: int, formal_1_729_17: int)
        returns (receiver: List)
    {
      assume true;
      receiver := new List();
      assume {:formal} formal_1_729_0 == 0;
      assume {:formal} formal_1_729_1 == 1;
      assume {:formal} formal_1_729_2 == 2;
      assume {:formal} formal_1_729_3 == 4;
      assume {:formal} formal_1_729_4 == 5;
      assume {:formal} formal_1_729_5 == 6;
      assume {:formal} formal_1_729_6 == 7;
      assume {:formal} formal_1_729_7 == 8;
      assume {:formal} formal_1_729_8 == 9;
      assume {:formal} formal_1_729_9 == 10;
      assume {:formal} formal_1_729_10 == 11;
      assume {:formal} formal_1_729_11 == 12;
      assume {:formal} formal_1_729_12 == 13;
      assume {:formal} formal_1_729_13 == 14;
      assume {:formal} formal_1_729_14 == 15;
      assume {:formal} formal_1_729_15 == 16;
      assume {:formal} formal_1_729_16 == 17;
      assume {:formal} formal_1_729_17 == 18;
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [formal_1_729_0, formal_1_729_1, formal_1_729_2, formal_1_729_3, formal_1_729_4, formal_1_729_5, formal_1_729_6, formal_1_729_7, formal_1_729_8, formal_1_729_9, formal_1_729_10, formal_1_729_11, formal_1_729_12, formal_1_729_13, formal_1_729_14, formal_1_729_15, formal_1_729_16, formal_1_729_17]);
    }
2024-09-23 17:32:47.7979 DEBUG Trying method sequence: PushBack
2024-09-23 17:32:47.8017 TRACE Verifying the body of the following method:
static method synthesized(formal_1_729_0: int, formal_1_729_1: int, formal_1_729_2: int, formal_1_729_3: int, formal_1_729_4: int, formal_1_729_5: int, formal_1_729_6: int, formal_1_729_7: int, formal_1_729_8: int, formal_1_729_9: int, formal_1_729_10: int, formal_1_729_11: int, formal_1_729_12: int, formal_1_729_13: int, formal_1_729_14: int, formal_1_729_15: int, formal_1_729_16: int, formal_1_729_17: int, argument_2_0_0: int, receiver: List)
    modifies receiver, receiver.Repr {assume !(receiver.IsValid() && receiver.View() == [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);
assume true && receiver.IsValid();
receiver.PushBack(argument_2_0_0);
assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);}
2024-09-23 17:32:47.8017 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_729_0: int, formal_1_729_1: int, formal_1_729_2: int, formal_1_729_3: int, formal_1_729_4: int, formal_1_729_5: int, formal_1_729_6: int, formal_1_729_7: int, formal_1_729_8: int, formal_1_729_9: int, formal_1_729_10: int, formal_1_729_11: int, formal_1_729_12: int, formal_1_729_13: int, formal_1_729_14: int, formal_1_729_15: int, formal_1_729_16: int, formal_1_729_17: int, argument_2_0_0: int, receiver: List)
      modifies receiver, receiver.Repr
    {
      assume {:formal} formal_1_729_0 == 0;
      assume {:formal} formal_1_729_1 == 1;
      assume {:formal} formal_1_729_2 == 2;
      assume {:formal} formal_1_729_3 == 4;
      assume {:formal} formal_1_729_4 == 5;
      assume {:formal} formal_1_729_5 == 6;
      assume {:formal} formal_1_729_6 == 7;
      assume {:formal} formal_1_729_7 == 8;
      assume {:formal} formal_1_729_8 == 9;
      assume {:formal} formal_1_729_9 == 10;
      assume {:formal} formal_1_729_10 == 11;
      assume {:formal} formal_1_729_11 == 12;
      assume {:formal} formal_1_729_12 == 13;
      assume {:formal} formal_1_729_13 == 14;
      assume {:formal} formal_1_729_14 == 15;
      assume {:formal} formal_1_729_15 == 16;
      assume {:formal} formal_1_729_16 == 17;
      assume {:formal} formal_1_729_17 == 18;
      assume !(receiver.IsValid() && receiver.View() == [formal_1_729_0, formal_1_729_1, formal_1_729_2, formal_1_729_3, formal_1_729_4, formal_1_729_5, formal_1_729_6, formal_1_729_7, formal_1_729_8, formal_1_729_9, formal_1_729_10, formal_1_729_11, formal_1_729_12, formal_1_729_13, formal_1_729_14, formal_1_729_15, formal_1_729_16, formal_1_729_17]);
      assume true && receiver.IsValid();
      receiver.PushBack(argument_2_0_0);
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [formal_1_729_0, formal_1_729_1, formal_1_729_2, formal_1_729_3, formal_1_729_4, formal_1_729_5, formal_1_729_6, formal_1_729_7, formal_1_729_8, formal_1_729_9, formal_1_729_10, formal_1_729_11, formal_1_729_12, formal_1_729_13, formal_1_729_14, formal_1_729_15, formal_1_729_16, formal_1_729_17]);
    }
2024-09-23 17:32:50.2091 TRACE Verifying the body of the following method:
static method synthesized(formal_3_684_0: int, formal_4_686_0: int, formal_5_773_0: int, formal_6_775_0: int, formal_7_777_0: int, formal_8_779_0: int, formal_9_781_0: int, formal_10_783_0: int, formal_11_688_0: int, formal_12_786_0: int, formal_13_788_0: int, formal_14_790_0: int, formal_15_792_0: int, formal_16_794_0: int, formal_17_796_0: int, formal_18_798_0: int, formal_19_0_0: int, formal_20_801_0: int, formal_21_803_0: int, formal_22_805_0: int, formal_23_807_0: int, formal_24_809_0: int, formal_25_811_0: int, formal_26_813_0: int, formal_27_815_0: int, formal_28_817_0: int, formal_29_819_0: int, formal_30_821_0: int, formal_31_823_0: int, formal_32_825_0: int, formal_33_827_0: int, formal_34_829_0: int, formal_35_831_0: int, formal_36_197_0: int, formal_37_834_0: int, formal_37_834_1: int, formal_38_836_0: int, formal_38_836_1: int, formal_39_838_0: int, formal_39_838_1: int, formal_40_840_0: int, formal_40_840_1: int, formal_41_842_0: int, formal_41_842_1: int, formal_42_844_0: int, formal_42_844_1: int, formal_43_846_0: int, formal_43_846_1: int, formal_44_848_0: int, formal_45_850_0: int, formal_46_852_0: int, formal_47_854_0: int, formal_47_854_1: int, formal_48_856_0: int, formal_48_856_1: int, formal_49_858_0: int, formal_49_858_1: int, formal_50_860_0: int, formal_50_860_1: int, formal_51_862_0: int, formal_51_862_1: int, formal_52_864_0: int, formal_52_864_1: int, formal_53_866_0: int, formal_53_866_1: int, formal_54_868_0: int, formal_54_868_1: int, formal_56_342_0: bool, formal_57_872_0: int, formal_57_872_1: int, formal_58_874_0: int, formal_59_876_0: int, formal_59_876_1: int, formal_60_878_0: int, formal_61_880_0: int, formal_61_880_1: int, formal_62_882_0: int, formal_62_882_1: int, formal_63_884_0: int, formal_63_884_1: int, formal_64_886_0: int, formal_64_886_1: int, formal_65_888_0: int, formal_65_888_1: int, formal_66_890_0: int, formal_66_890_1: int, formal_67_892_0: int, formal_67_892_1: int, formal_68_894_0: int, formal_68_894_1: int, formal_69_896_0: int, formal_69_896_1: int, formal_70_898_0: int, formal_70_898_1: int, formal_71_900_0: int, formal_71_900_1: int, formal_72_902_0: int, formal_73_904_0: int, formal_76_908_0: int, formal_76_908_1: int, formal_77_910_0: int, formal_77_910_1: int, formal_78_912_0: int, formal_78_912_1: int, formal_79_914_0: int, formal_79_914_1: int, formal_80_916_0: int, formal_80_916_1: int, formal_81_918_0: int, formal_81_918_1: int, formal_82_920_0: int, formal_82_920_1: int, formal_83_922_0: int, formal_83_922_1: int, formal_84_924_0: int, formal_84_924_1: int, formal_85_926_0: int, formal_85_926_1: int, formal_86_928_0: int, formal_86_928_1: int, formal_87_930_0: int, formal_87_930_1: int, formal_88_932_0: int, formal_88_932_1: int, formal_89_934_0: int, formal_89_934_1: int, formal_90_936_0: int, formal_90_936_1: int, formal_1_729_0: int, formal_1_729_1: int, formal_1_729_2: int, formal_1_729_3: int, formal_1_729_4: int, formal_1_729_5: int, formal_1_729_6: int, formal_1_729_7: int, formal_1_729_8: int, formal_1_729_9: int, formal_1_729_10: int, formal_1_729_11: int, formal_1_729_12: int, formal_1_729_13: int, formal_1_729_14: int, formal_1_729_15: int, formal_1_729_16: int, formal_1_729_17: int, argument_2_0_0: int, receiver: List, formal_0_765_0: int)
    modifies receiver, receiver.Repr {assume !(receiver == null);
assume !(receiver.head == null);
assume !(receiver.tail == null);
assume |receiver.Repr| > 0;
assume |receiver.Repr| > 1;
assume |receiver.Repr| > 11;
assume |receiver.Repr| > 12;
assume |receiver.Repr| > 13;
assume |receiver.Repr| > 14;
assume |receiver.Repr| > 15;
assume |receiver.Repr| > 16;
assume |receiver.Repr| > 2;
assume |receiver.Repr| > 4;
assume |receiver.Repr| > 5;
assume |receiver.Repr| > 6;
assume |receiver.Repr| > 7;
assume |receiver.Repr| > 8;
assume |receiver.Repr| > 9;
assume |receiver.Repr| > 10;
assume |receiver.Repr| > 3;
assume !(receiver.Repr[1] == null);
assume !(receiver.Repr[11] == null);
assume !(receiver.Repr[12] == null);
assume !(receiver.Repr[13] == null);
assume !(receiver.Repr[14] == null);

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 46218 LINES OF LOGS TO SAVE DISK SPACE *************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assert {:keepAssertion} receiver.head == receiver.tail;
      assert {:keepAssertion} null == receiver.head.next;
      assert {:keepAssertion} null == receiver.head.prev;
    }
2024-09-23 18:14:21.9328 DEBUG Using integer programming to estimating the distance to |this.Repr| > 0, |this.Repr| > 1, receiver.tail == receiver.head.next, this.tail == this.Repr[1], ¬(receiver.tail == null), receiver.head == receiver.tail.prev, this.head == this.Repr[0], ¬(receiver.head == null), receiver.IsValid.requires(), ¬(receiver == null), null == receiver.tail.next, null == receiver.head.prev, 2 == |this.Repr|, 57 == this.tail.value, 0 == this.head.value, true == this.IsValid()
2024-09-23 18:14:21.9358 TRACE Adding solver constraint for property |this.Repr| > default0 from False to True: (((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) >= 2
2024-09-23 18:14:21.9358 TRACE Adding solver constraint for property |this.Repr| > default0 from False to True: (((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) >= 2
2024-09-23 18:14:21.9358 TRACE Adding solver constraint for property this.tail == this.Repr[default0] from Undefined to True: (((((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) + ((PopFront * 0) + (PopFront * 0))) + ((PopBack * 0) + (PopBack * 0))) >= 1
2024-09-23 18:14:21.9358 TRACE Adding solver constraint for property this.tail == this.Repr[default0] from Undefined to True: (((((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) + ((PopFront * 0) + (PopFront * 1))) + ((PopBack * 0) + (PopBack * 1))) >= 1
2024-09-23 18:14:21.9358 TRACE Adding solver constraint for property this.head == this.Repr[default0] from Undefined to True: (((PushBack * 1) + (PushBack * 1)) + ((PushFront * 1) + (PushFront * 1))) >= 1
2024-09-23 18:14:21.9358 TRACE Adding solver constraint for property this.head == this.Repr[default0] from Undefined to True: (((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) >= 1
2024-09-23 18:14:21.9358 TRACE Adding solver constraint for property default0 == |this.Repr| from False to True: (((((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) + ((PopFront * 1) + (PopFront * 0))) + ((PopBack * 1) + (PopBack * 0))) >= 1
2024-09-23 18:14:21.9358 TRACE Adding solver constraint for property default0 == |this.Repr| from False to True: (((((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) + ((PopFront * 1) + (PopFront * 0))) + ((PopBack * 1) + (PopBack * 0))) >= 1
2024-09-23 18:14:21.9358 TRACE Minimizing value: (((PushBack + PushFront) + PopFront) + PopBack)
2024-09-23 18:14:21.9358 DEBUG The integer programming gives the lower bound of 2 methods.
2024-09-23 18:14:21.9358 DEBUG In particular, need at least 2 calls to PushBack
2024-09-23 18:14:21.9358 DEBUG In particular, need at least -0 calls to PushFront
2024-09-23 18:14:21.9358 DEBUG In particular, need at least 0 calls to PopFront
2024-09-23 18:14:21.9358 DEBUG In particular, need at least -0 calls to PopBack
2024-09-23 18:14:21.9358 INFO The following method sequence is possible (heuristic=2): PopBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack
2024-09-23 18:14:21.9358 INFO New state is |this.Repr| > 0, |this.Repr| > 1, receiver.tail == receiver.head.next, this.tail == this.Repr[1], ¬(receiver.tail == null), receiver.head == receiver.tail.prev, this.head == this.Repr[0], ¬(receiver.head == null), receiver.IsValid.requires(), ¬(receiver == null), null == receiver.tail.next, null == receiver.head.prev, 2 == |this.Repr|, 57 == this.tail.value, 0 == this.head.value, true == this.IsValid()
2024-09-23 18:14:21.9358 INFO Expanding method sequence PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack, PushBack -- estimated distance to start = 0, distance to end = 18
2024-09-23 18:14:21.9358 TRACE Verifying the body of the following method:
static method synthesized(formal_2_342_0: bool) returns (receiver: List) {assume true;
receiver := new List();
assert {:keepAssertion} !(!(receiver == null) && receiver.IsValid.requires() && true == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr);}
2024-09-23 18:14:21.9358 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_342_0: bool) returns (receiver: List)
    {
      assume true;
      receiver := new List();
      assume {:formal} formal_2_342_0 == true;
      assert {:keepAssertion} !(!(receiver == null) && receiver.IsValid.requires() && formal_2_342_0 == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr);
    }
2024-09-23 18:14:22.2394 TRACE Verifying the body of the following method:
static method synthesized(formal_2_342_0: bool) returns (receiver: List) {assume true;
receiver := new List();
assert {:keepAssertion} !(receiver == null) && receiver.IsValid.requires() && true == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr;}
2024-09-23 18:14:22.2394 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_342_0: bool) returns (receiver: List)
    {
      assume true;
      receiver := new List();
      assume {:formal} formal_2_342_0 == true;
      assert {:keepAssertion} !(receiver == null) && receiver.IsValid.requires() && formal_2_342_0 == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr;
    }
2024-09-23 18:14:22.5178 INFO Have found the following solution to a subproblem!
{
result := new List();
result.PushBack(0);
result.PushBack(1);
result.PushBack(2);
result.PushBack(4);
result.PushBack(5);
result.PushBack(6);
result.PushBack(7);
result.PushBack(8);
result.PushBack(9);
result.PushBack(10);
result.PushBack(11);
result.PushBack(12);
result.PushBack(13);
result.PushBack(14);
result.PushBack(15);
result.PushBack(16);
result.PushBack(17);
result.PushBack(18);
}
2024-09-23 18:14:22.5198 INFO Time spend on subproblem: 00:41:35.9244412
2024-09-23 18:14:22.5198 INFO Number of Regular queries to Dafny used to solve subproblem: 146 (00:08:30.3047288)
2024-09-23 18:14:22.5198 INFO Number of Simplify queries to Dafny used to solve subproblem: 71 (00:32:04.3033358)
2024-09-23 18:14:22.5198 INFO Number of Heuristic queries to Dafny used to solve subproblem: 128 (00:00:39.1331309)
2024-09-23 18:14:22.5228 INFO Have found the following solution!
static method solution() returns (result:List)
ensures Goal(result)
{
result := new List();
result.PushBack(0);
result.PushBack(1);
result.PushBack(2);
result.PushBack(4);
result.PushBack(5);
result.PushBack(6);
result.PushBack(7);
result.PushBack(8);
result.PushBack(9);
result.PushBack(10);
result.PushBack(11);
result.PushBack(12);
result.PushBack(13);
result.PushBack(14);
result.PushBack(15);
result.PushBack(16);
result.PushBack(17);
result.PushBack(18);
}
2024-09-23 18:14:22.5228 INFO Total time spend on synthesis: 00:41:36.2509566
2024-09-23 18:14:22.5228 INFO Total number of Regular queries to Dafny: 146 (00:08:30.3047288)
2024-09-23 18:14:22.5228 INFO Total number of Simplify queries to Dafny: 71 (00:32:04.3033358)
2024-09-23 18:14:22.5228 INFO Total number of Heuristic queries to Dafny: 128 (00:00:39.1331309)
