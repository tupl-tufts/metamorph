2024-09-23 13:46:27.6915 DEBUG Using integer programming to estimating the distance to this.View() == [0], receiver.IsValid()
2024-09-23 13:46:27.7056 TRACE Minimizing value: (((PushBack + PushFront) + PopFront) + PopBack)
2024-09-23 13:46:27.7090 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-23 13:46:27.7090 DEBUG In particular, need at least -0 calls to PushBack
2024-09-23 13:46:27.7090 DEBUG In particular, need at least -0 calls to PushFront
2024-09-23 13:46:27.7090 DEBUG In particular, need at least -0 calls to PopFront
2024-09-23 13:46:27.7090 DEBUG In particular, need at least -0 calls to PopBack
2024-09-23 13:46:27.7090 INFO Initial heuristic value is 0
2024-09-23 13:46:27.7111 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-23 13:46:27.7517 TRACE Verifying the body of the following method:
static method synthesized(formal_1_729_0: int) returns (receiver: List) {assume true;
receiver := new List();
assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [0]);}
2024-09-23 13:46:27.7517 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_729_0: int) returns (receiver: List)
    {
      assume true;
      receiver := new List();
      assume {:formal} formal_1_729_0 == 0;
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [formal_1_729_0]);
    }
2024-09-23 13:46:28.8830 DEBUG Trying method sequence: PushBack
2024-09-23 13:46:28.8869 TRACE Verifying the body of the following method:
static method synthesized(formal_1_729_0: int, argument_2_0_0: int, receiver: List)
    modifies receiver, receiver.Repr {assume !(receiver.IsValid() && receiver.View() == [0]);
assume true && receiver.IsValid();
receiver.PushBack(argument_2_0_0);
assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [0]);}
2024-09-23 13:46:28.8869 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_729_0: int, argument_2_0_0: int, receiver: List)
      modifies receiver, receiver.Repr
    {
      assume {:formal} formal_1_729_0 == 0;
      assume !(receiver.IsValid() && receiver.View() == [formal_1_729_0]);
      assume true && receiver.IsValid();
      receiver.PushBack(argument_2_0_0);
      assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [formal_1_729_0]);
    }
2024-09-23 13:46:29.3344 TRACE Verifying the body of the following method:
static method synthesized(formal_2_342_0: bool, formal_1_729_0: int, argument_2_0_0: int, receiver: List, formal_0_731_0: int)
    modifies receiver, receiver.Repr {assume !(receiver == null);
assume receiver.IsValid.requires();
assume true == receiver.IsValid();
assume null == receiver.head;
assume null == receiver.tail;
assume [] == receiver.Repr;
receiver.PushBack(0);
assert {:keepAssertion} receiver.IsValid() && receiver.View() == [0];}
2024-09-23 13:46:29.3346 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_342_0: bool, formal_1_729_0: int, argument_2_0_0: int, receiver: List, formal_0_731_0: int)
      modifies receiver, receiver.Repr
    {
      assume {:formal} formal_0_731_0 == 0;
      assume {:attribute 10} argument_2_0_0 == formal_0_731_0;
      assume {:formal} formal_2_342_0 == true;
      assume !(receiver == null);
      assume receiver.IsValid.requires();
      assume formal_2_342_0 == receiver.IsValid();
      assume null == receiver.head;
      assume null == receiver.tail;
      assume [] == receiver.Repr;
      receiver.PushBack(argument_2_0_0);
      assume {:formal} formal_1_729_0 == 0;
      assert {:keepAssertion} receiver.IsValid() && receiver.View() == [formal_1_729_0];
    }
2024-09-23 13:46:29.6705 DEBUG Trying simplification:
2024-09-23 13:46:29.6747 TRACE Verifying the body of the following method:
static method synthesized(formal_1_729_0: int, formal_2_342_0: bool, formal_0_731_0: int, argument_2_0_0: int, receiver: List)
    modifies receiver, receiver.Repr {receiver.PushBack(0);
assert {:keepAssertion} receiver.IsValid();
assert {:keepAssertion} receiver.View() == [0];}
2024-09-23 13:46:29.6747 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_729_0: int, formal_2_342_0: bool, formal_0_731_0: int, argument_2_0_0: int, receiver: List)
      modifies receiver, receiver.Repr
    {
      assume {:attribute 10} argument_2_0_0 == formal_0_731_0;
      assume {:formal} formal_0_731_0 == 0;
      receiver.PushBack(argument_2_0_0);
      assume {:formal} formal_1_729_0 == 0;
      assert {:keepAssertion} receiver.IsValid();
      assert {:keepAssertion} receiver.View() == [formal_1_729_0];
    }
2024-09-23 13:46:30.0926 DEBUG Using integer programming to estimating the distance to receiver.IsValid.requires(), ¬(receiver == null), null == receiver.tail, null == receiver.head, true == this.IsValid(), [] == receiver.Repr
2024-09-23 13:46:30.0926 TRACE Minimizing value: (((PushBack + PushFront) + PopFront) + PopBack)
2024-09-23 13:46:30.0950 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-23 13:46:30.0950 DEBUG In particular, need at least -0 calls to PushBack
2024-09-23 13:46:30.0950 DEBUG In particular, need at least -0 calls to PushFront
2024-09-23 13:46:30.0950 DEBUG In particular, need at least -0 calls to PopFront
2024-09-23 13:46:30.0950 DEBUG In particular, need at least -0 calls to PopBack
2024-09-23 13:46:30.0950 INFO The following method sequence is possible (heuristic=0): PushBack
2024-09-23 13:46:30.0950 INFO New state is receiver.IsValid.requires(), ¬(receiver == null), null == receiver.tail, null == receiver.head, true == this.IsValid(), [] == receiver.Repr
2024-09-23 13:46:30.0950 DEBUG Trying method sequence: PushFront
2024-09-23 13:46:30.0950 TRACE Verifying the body of the following method:
static method synthesized(formal_1_729_0: int, argument_3_0_0: int, receiver: List)
    modifies receiver, receiver.Repr {assume !(receiver.IsValid() && receiver.View() == [0]);
assume true && receiver.IsValid();
receiver.PushFront(argument_3_0_0);
assert {:keepAssertion} !(receiver.IsValid() && receiver.View() == [0]);}
2024-09-23 13:46:30.0950 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_729_0: int, argument_3_0_0: int, receiver: List)

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 199 LINES OF LOGS TO SAVE DISK SPACE ***************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume {:formal} formal_11_780_0 == 25;
      assume {:formal} formal_13_692_0 == 1;
      assume {:formal} formal_15_696_0 == 2;
      assume !(receiver == null);
      assume !(receiver.head == null);
      assume !(receiver.tail == null);
      assume |receiver.Repr| > formal_3_684_0;
      assume |receiver.Repr| > formal_4_686_0;
      assume formal_5_773_0 == receiver.head.value;
      assume receiver.head == receiver.Repr[formal_6_197_0];
      assume receiver.IsValid.requires();
      assume formal_8_342_0 == receiver.IsValid();
      assume null == receiver.tail.next;
      assume receiver.head == receiver.tail.prev;
      assume formal_11_780_0 == receiver.tail.value;
      assume receiver.tail == receiver.head.next;
      assume receiver.tail == receiver.Repr[formal_13_692_0];
      assume null == receiver.head.prev;
      assume formal_15_696_0 == |receiver.Repr|;
      var _ := receiver.PopBack();
      assume {:formal} formal_1_729_0 == 0;
      assert {:keepAssertion} receiver.IsValid() && receiver.View() == [formal_1_729_0];
    }
2024-09-23 13:46:32.8387 DEBUG Trying simplification:
2024-09-23 13:46:32.8387 TRACE Verifying the body of the following method:
static method synthesized(formal_1_729_0: int, receiver: List)
    modifies receiver, receiver.Repr {var _ := receiver.PopBack();
assert {:keepAssertion} receiver.IsValid();
assert {:keepAssertion} receiver.View() == [0];}
2024-09-23 13:46:32.8387 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_729_0: int, receiver: List)
      modifies receiver, receiver.Repr
    {
      var _ := receiver.PopBack();
      assume {:formal} formal_1_729_0 == 0;
      assert {:keepAssertion} receiver.IsValid();
      assert {:keepAssertion} receiver.View() == [formal_1_729_0];
    }
2024-09-23 13:46:33.1912 DEBUG Using integer programming to estimating the distance to |this.Repr| > 0, |this.Repr| > 1, receiver.tail == receiver.head.next, this.tail == this.Repr[1], ¬(receiver.tail == null), receiver.head == receiver.tail.prev, this.head == this.Repr[0], ¬(receiver.head == null), receiver.IsValid.requires(), ¬(receiver == null), null == receiver.tail.next, null == receiver.head.prev, 2 == |this.Repr|, 25 == this.tail.value, 0 == this.head.value, true == this.IsValid()
2024-09-23 13:46:33.1912 TRACE Adding solver constraint for property |this.Repr| > default0 from False to True: (((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) >= 2
2024-09-23 13:46:33.1912 TRACE Adding solver constraint for property |this.Repr| > default0 from False to True: (((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) >= 2
2024-09-23 13:46:33.1912 TRACE Adding solver constraint for property this.tail == this.Repr[default0] from Undefined to True: (((((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) + ((PopFront * 0) + (PopFront * 0))) + ((PopBack * 0) + (PopBack * 0))) >= 1
2024-09-23 13:46:33.1912 TRACE Adding solver constraint for property this.tail == this.Repr[default0] from Undefined to True: (((((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) + ((PopFront * 0) + (PopFront * 1))) + ((PopBack * 0) + (PopBack * 1))) >= 1
2024-09-23 13:46:33.1912 TRACE Adding solver constraint for property this.head == this.Repr[default0] from Undefined to True: (((PushBack * 1) + (PushBack * 1)) + ((PushFront * 1) + (PushFront * 1))) >= 1
2024-09-23 13:46:33.1912 TRACE Adding solver constraint for property this.head == this.Repr[default0] from Undefined to True: (((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) >= 1
2024-09-23 13:46:33.1912 TRACE Adding solver constraint for property default0 == |this.Repr| from False to True: (((((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) + ((PopFront * 1) + (PopFront * 0))) + ((PopBack * 1) + (PopBack * 0))) >= 1
2024-09-23 13:46:33.1912 TRACE Adding solver constraint for property default0 == |this.Repr| from False to True: (((((PushBack * 1) + (PushBack * 0)) + ((PushFront * 1) + (PushFront * 0))) + ((PopFront * 1) + (PopFront * 0))) + ((PopBack * 1) + (PopBack * 0))) >= 1
2024-09-23 13:46:33.1912 TRACE Minimizing value: (((PushBack + PushFront) + PopFront) + PopBack)
2024-09-23 13:46:33.1950 DEBUG The integer programming gives the lower bound of 2 methods.
2024-09-23 13:46:33.1950 DEBUG In particular, need at least 2 calls to PushBack
2024-09-23 13:46:33.1950 DEBUG In particular, need at least -0 calls to PushFront
2024-09-23 13:46:33.1950 DEBUG In particular, need at least 0 calls to PopFront
2024-09-23 13:46:33.1950 DEBUG In particular, need at least -0 calls to PopBack
2024-09-23 13:46:33.1950 INFO The following method sequence is possible (heuristic=2): PopBack
2024-09-23 13:46:33.1950 INFO New state is |this.Repr| > 0, |this.Repr| > 1, receiver.tail == receiver.head.next, this.tail == this.Repr[1], ¬(receiver.tail == null), receiver.head == receiver.tail.prev, this.head == this.Repr[0], ¬(receiver.head == null), receiver.IsValid.requires(), ¬(receiver == null), null == receiver.tail.next, null == receiver.head.prev, 2 == |this.Repr|, 25 == this.tail.value, 0 == this.head.value, true == this.IsValid()
2024-09-23 13:46:33.1950 INFO Expanding method sequence PushBack -- estimated distance to start = 0, distance to end = 1
2024-09-23 13:46:33.1950 TRACE Verifying the body of the following method:
static method synthesized(formal_2_342_0: bool) returns (receiver: List) {assume true;
receiver := new List();
assert {:keepAssertion} !(!(receiver == null) && receiver.IsValid.requires() && true == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr);}
2024-09-23 13:46:33.1950 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_342_0: bool) returns (receiver: List)
    {
      assume true;
      receiver := new List();
      assume {:formal} formal_2_342_0 == true;
      assert {:keepAssertion} !(!(receiver == null) && receiver.IsValid.requires() && formal_2_342_0 == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr);
    }
2024-09-23 13:46:33.5097 TRACE Verifying the body of the following method:
static method synthesized(formal_2_342_0: bool) returns (receiver: List) {assume true;
receiver := new List();
assert {:keepAssertion} !(receiver == null) && receiver.IsValid.requires() && true == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr;}
2024-09-23 13:46:33.5097 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_342_0: bool) returns (receiver: List)
    {
      assume true;
      receiver := new List();
      assume {:formal} formal_2_342_0 == true;
      assert {:keepAssertion} !(receiver == null) && receiver.IsValid.requires() && formal_2_342_0 == receiver.IsValid() && null == receiver.head && null == receiver.tail && [] == receiver.Repr;
    }
2024-09-23 13:46:33.7836 INFO Have found the following solution to a subproblem!
{
result := new List();
result.PushBack(0);
}
2024-09-23 13:46:33.7836 INFO Time spend on subproblem: 00:00:06.1043727
2024-09-23 13:46:33.7836 INFO Number of Regular queries to Dafny used to solve subproblem: 11 (00:00:04.4707067)
2024-09-23 13:46:33.7866 INFO Number of Simplify queries to Dafny used to solve subproblem: 4 (00:00:01.5267760)
2024-09-23 13:46:33.7866 INFO Number of Heuristic queries to Dafny used to solve subproblem: 0 (00:00:00)
2024-09-23 13:46:33.7866 INFO Have found the following solution!
static method solution() returns (result:List)
ensures Goal(result)
{
result := new List();
result.PushBack(0);
}
2024-09-23 13:46:33.7866 INFO Total time spend on synthesis: 00:00:06.4373995
2024-09-23 13:46:33.7866 INFO Total number of Regular queries to Dafny: 11 (00:00:04.4707067)
2024-09-23 13:46:33.7866 INFO Total number of Simplify queries to Dafny: 4 (00:00:01.5267760)
2024-09-23 13:46:33.7866 INFO Total number of Heuristic queries to Dafny: 0 (00:00:00)
