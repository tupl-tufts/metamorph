2025-02-25 20:30:55.2666 DEBUG Using integer programming to estimating the distance to receiver.exitCode == INTEGER_UNDERFLOW
2025-02-25 20:30:55.2826 TRACE Minimizing value: ((((((((((Push + Pop) + Add) + Sub) + Div) + Mul) + Jump) + Jz) + NOP) + Store) + Load)
2025-02-25 20:30:55.2841 DEBUG The integer programming gives the lower bound of 0 methods.
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Push
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Pop
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Add
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Sub
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Div
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Mul
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Jump
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Jz
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to NOP
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Store
2025-02-25 20:30:55.2841 DEBUG In particular, need at least -0 calls to Load
2025-02-25 20:30:55.2841 INFO Initial heuristic value is 0
2025-02-25 20:30:55.2853 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2025-02-25 20:30:55.3079 TRACE Verifying the body of the following method:
static method synthesized(argument_1_0_0: nat) returns (receiver: VM) {receiver := new VM(argument_1_0_0);
assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);}
2025-02-25 20:30:55.3079 TRACE Verifying the body of the following method (literal):
 static method synthesized(argument_1_0_0: nat) returns (receiver: VM)
    {
      assume true;
      receiver := new VM(argument_1_0_0);
      assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);
    }
2025-02-25 20:30:56.0239 DEBUG Trying method sequence: Push
2025-02-25 20:30:56.0277 TRACE Verifying the body of the following method:
static method synthesized(argument_2_0_0: nat, receiver: VM)
    modifies receiver {assume !(receiver.exitCode == INTEGER_UNDERFLOW);
assume true && receiver.IsValid() && receiver.IsRunning() && argument_2_0_0 <= MAX_WORD && receiver.pc > 0;
receiver.Push(argument_2_0_0);
assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);}
2025-02-25 20:30:56.0278 TRACE Verifying the body of the following method (literal):
 static method synthesized(argument_2_0_0: nat, receiver: VM)
      modifies receiver
    {
      assume !(receiver.exitCode == INTEGER_UNDERFLOW);
      assume true && receiver.IsValid() && receiver.IsRunning() && argument_2_0_0 <= MAX_WORD && receiver.pc > 0;
      receiver.Push(argument_2_0_0);
      assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);
    }
2025-02-25 20:30:56.3315 DEBUG Trying method sequence: Pop
2025-02-25 20:30:56.3354 TRACE Verifying the body of the following method:
static method synthesized(receiver: VM)
    modifies receiver {assume !(receiver.exitCode == INTEGER_UNDERFLOW);
assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
var _ := receiver.Pop();
assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);}
2025-02-25 20:30:56.3354 TRACE Verifying the body of the following method (literal):
 static method synthesized(receiver: VM)
      modifies receiver
    {
      assume !(receiver.exitCode == INTEGER_UNDERFLOW);
      assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
      var _ := receiver.Pop();
      assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);
    }
2025-02-25 20:30:56.6901 DEBUG Trying method sequence: Add
2025-02-25 20:30:56.6918 TRACE Verifying the body of the following method:
static method synthesized(receiver: VM)
    modifies receiver {assume !(receiver.exitCode == INTEGER_UNDERFLOW);
assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
receiver.Add();
assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);}
2025-02-25 20:30:56.6918 TRACE Verifying the body of the following method (literal):
 static method synthesized(receiver: VM)
      modifies receiver
    {
      assume !(receiver.exitCode == INTEGER_UNDERFLOW);
      assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
      receiver.Add();
      assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);
    }
2025-02-25 20:30:56.9990 DEBUG Trying method sequence: Sub
2025-02-25 20:30:57.0018 TRACE Verifying the body of the following method:
static method synthesized(receiver: VM)
    modifies receiver {assume !(receiver.exitCode == INTEGER_UNDERFLOW);
assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
receiver.Sub();
assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);}
2025-02-25 20:30:57.0018 TRACE Verifying the body of the following method (literal):
 static method synthesized(receiver: VM)
      modifies receiver
    {
      assume !(receiver.exitCode == INTEGER_UNDERFLOW);
      assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
      receiver.Sub();
      assert {:keepAssertion} !(receiver.exitCode == INTEGER_UNDERFLOW);
    }
2025-02-25 20:30:57.3872 TRACE Verifying the body of the following method:
static method synthesized(formal_1_1065_0: int, formal_2_1067_0: int, formal_4_1140_0: bool, formal_6_600_0: bool, formal_7_1165_0: int, formal_8_533_0: int, formal_9_1168_0: int, formal_10_1170_0: int, formal_10_1170_1: int, formal_11_1172_0: int, formal_11_1172_1: int, receiver: VM)
    modifies receiver {assume !(receiver == null);
assume |receiver.stack| > 0;
assume |receiver.stack| > 1;
assume receiver.IsRunning.requires();
assume true == receiver.IsRunning();
assume receiver.IsValid.requires();
assume true == receiver.IsValid();
assume 8366 == receiver.pc;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 4380 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume receiver.IsRunning.requires();
      assume formal_4_1140_0 == receiver.IsRunning();
      assume receiver.IsValid.requires();
      assume formal_6_600_0 == receiver.IsValid();
      assume formal_7_533_0 == |receiver.data|;
      assume receiver.exitCode == Imports.ExitCode.OK;
      receiver.Load(argument_81_0_0);
      assume {:formal} formal_1_1065_0 == 0;
      assume {:formal} formal_2_1197_0 == 64926;
      assume {:formal} formal_2_1197_1 == 0;
      assume {:formal} formal_3_201_0 == 1;
      assume {:formal} formal_5_1140_0 == true;
      assume {:formal} formal_7_600_0 == true;
      assume {:formal} formal_8_533_0 == 5;
      assume {:formal} formal_9_1205_0 == 8367;
      assert {:keepAssertion} !(receiver == null);
      assert {:keepAssertion} |receiver.stack| > formal_1_1065_0;
      assert {:keepAssertion} formal_2_1197_0 == receiver.stack[formal_2_1197_1];
      assert {:keepAssertion} formal_3_201_0 == |receiver.stack|;
      assert {:keepAssertion} receiver.IsRunning.requires();
      assert {:keepAssertion} formal_5_1140_0 == receiver.IsRunning();
      assert {:keepAssertion} receiver.IsValid.requires();
      assert {:keepAssertion} formal_7_600_0 == receiver.IsValid();
      assert {:keepAssertion} formal_8_533_0 == |receiver.data|;
      assert {:keepAssertion} formal_9_1205_0 == receiver.pc;
      assert {:keepAssertion} receiver.exitCode == Imports.ExitCode.OK;
    }
2025-02-25 20:31:34.9265 DEBUG Using integer programming to estimating the distance to |this.data| > 2, receiver.exitCode == Imports.ExitCode.OK, receiver.IsValid.requires(), receiver.IsRunning.requires(), Â¬(receiver == null), 5 == |this.data|, 8368 == this.pc, 64926 == this.data[2], true == this.IsValid(), true == this.IsRunning(), [] == receiver.stack
2025-02-25 20:31:34.9275 TRACE Minimizing value: ((((((((((Push + Pop) + Add) + Sub) + Div) + Mul) + Jump) + Jz) + NOP) + Store) + Load)
2025-02-25 20:31:34.9275 DEBUG The integer programming gives the lower bound of 0 methods.
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Push
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Pop
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Add
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Sub
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Div
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Mul
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Jump
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Jz
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to NOP
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Store
2025-02-25 20:31:34.9275 DEBUG In particular, need at least -0 calls to Load
2025-02-25 20:31:34.9275 INFO The following method sequence is possible (heuristic=0): Load, Push, Sub
2025-02-25 20:31:34.9275 INFO New state is |this.data| > 2, receiver.exitCode == Imports.ExitCode.OK, receiver.IsValid.requires(), receiver.IsRunning.requires(), Â¬(receiver == null), 5 == |this.data|, 8368 == this.pc, 64926 == this.data[2], true == this.IsValid(), true == this.IsRunning(), [] == receiver.stack
2025-02-25 20:31:34.9275 INFO Expanding method sequence Push, Push, Sub -- estimated distance to start = 0, distance to end = 3
2025-02-25 20:31:34.9303 TRACE Verifying the body of the following method:
static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_5_533_0: int, formal_7_1495_0: int, argument_82_0_0: nat) returns (receiver: VM) {receiver := new VM(argument_82_0_0);
assert {:keepAssertion} !(!(receiver == null) && receiver.IsRunning.requires() && true == receiver.IsRunning() && receiver.IsValid.requires() && true == receiver.IsValid() && 5 == |receiver.data| && [] == receiver.stack && 8368 == receiver.pc && receiver.exitCode == Imports.ExitCode.OK);}
2025-02-25 20:31:34.9303 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_5_533_0: int, formal_7_1495_0: int, argument_82_0_0: nat)
        returns (receiver: VM)
    {
      assume true;
      receiver := new VM(argument_82_0_0);
      assume {:formal} formal_2_1140_0 == true;
      assume {:formal} formal_4_600_0 == true;
      assume {:formal} formal_5_533_0 == 5;
      assume {:formal} formal_7_1495_0 == 8368;
      assert {:keepAssertion} !(!(receiver == null) && receiver.IsRunning.requires() && formal_2_1140_0 == receiver.IsRunning() && receiver.IsValid.requires() && formal_4_600_0 == receiver.IsValid() && formal_5_533_0 == |receiver.data| && [] == receiver.stack && formal_7_1495_0 == receiver.pc && receiver.exitCode == Imports.ExitCode.OK);
    }
2025-02-25 20:31:35.2286 TRACE Verifying the body of the following method:
static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_5_533_0: int, formal_7_1495_0: int, argument_82_0_0: nat, formal_0_1711_0: int) returns (receiver: VM) {receiver := new VM(8368);
assert {:keepAssertion} !(receiver == null) && receiver.IsRunning.requires() && true == receiver.IsRunning() && receiver.IsValid.requires() && true == receiver.IsValid() && 5 == |receiver.data| && [] == receiver.stack && 8368 == receiver.pc && receiver.exitCode == Imports.ExitCode.OK;}
2025-02-25 20:31:35.2286 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_5_533_0: int, formal_7_1495_0: int, argument_82_0_0: nat, formal_0_1711_0: int)
        returns (receiver: VM)
    {
      assume {:formal} formal_0_1711_0 == 8368;
      assume {:attribute 530} argument_82_0_0 == formal_0_1711_0;
      assume true;
      receiver := new VM(argument_82_0_0);
      assume {:formal} formal_2_1140_0 == true;
      assume {:formal} formal_4_600_0 == true;
      assume {:formal} formal_5_533_0 == 5;
      assume {:formal} formal_7_1495_0 == 8368;
      assert {:keepAssertion} !(receiver == null) && receiver.IsRunning.requires() && formal_2_1140_0 == receiver.IsRunning() && receiver.IsValid.requires() && formal_4_600_0 == receiver.IsValid() && formal_5_533_0 == |receiver.data| && [] == receiver.stack && formal_7_1495_0 == receiver.pc && receiver.exitCode == Imports.ExitCode.OK;
    }
2025-02-25 20:31:35.5043 INFO Have found the following solution to a subproblem!
{
result := new VM(8368);
result.Push(64926);
result.Push(449);
result.Sub();
}
2025-02-25 20:31:35.5049 INFO Time spend on subproblem: 00:00:40.2435320
2025-02-25 20:31:35.5049 INFO Number of Regular queries to Dafny used to solve subproblem: 59 (00:00:18.5093690)
2025-02-25 20:31:35.5049 INFO Number of Simplify queries to Dafny used to solve subproblem: 23 (00:00:08.0045840)
2025-02-25 20:31:35.5049 INFO Number of Heuristic queries to Dafny used to solve subproblem: 47 (00:00:13.5499690)
2025-02-25 20:31:35.5055 INFO Have found the following solution!
static method solution() returns (result:VM)
ensures fresh(result) && Goal(result)
{
result := new VM(8368);
result.Push(64926);
result.Push(449);
result.Sub();
}
2025-02-25 20:31:35.5055 INFO Total time spend on synthesis: 00:00:40.5017360
2025-02-25 20:31:35.5055 INFO Total number of Regular queries to Dafny: 59 (00:00:18.5093690)
2025-02-25 20:31:35.5055 INFO Total number of Simplify queries to Dafny: 23 (00:00:08.0045840)
2025-02-25 20:31:35.5055 INFO Total number of Heuristic queries to Dafny: 47 (00:00:13.5499690)
