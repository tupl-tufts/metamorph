2025-02-25 20:35:08.3180 DEBUG Using integer programming to estimating the distance to receiver.exitCode == STACK_UNDERFLOW
2025-02-25 20:35:08.3341 TRACE Minimizing value: ((((((((((Push + Pop) + Add) + Sub) + Div) + Mul) + Jump) + Jz) + NOP) + Store) + Load)
2025-02-25 20:35:08.3355 DEBUG The integer programming gives the lower bound of 0 methods.
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Push
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Pop
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Add
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Sub
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Div
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Mul
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Jump
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Jz
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to NOP
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Store
2025-02-25 20:35:08.3355 DEBUG In particular, need at least -0 calls to Load
2025-02-25 20:35:08.3355 INFO Initial heuristic value is 0
2025-02-25 20:35:08.3367 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2025-02-25 20:35:08.3605 TRACE Verifying the body of the following method:
static method synthesized(argument_1_0_0: nat) returns (receiver: VM) {receiver := new VM(argument_1_0_0);
assert {:keepAssertion} !(receiver.exitCode == STACK_UNDERFLOW);}
2025-02-25 20:35:08.3605 TRACE Verifying the body of the following method (literal):
 static method synthesized(argument_1_0_0: nat) returns (receiver: VM)
    {
      assume true;
      receiver := new VM(argument_1_0_0);
      assert {:keepAssertion} !(receiver.exitCode == STACK_UNDERFLOW);
    }
2025-02-25 20:35:09.0553 DEBUG Trying method sequence: Push
2025-02-25 20:35:09.0606 TRACE Verifying the body of the following method:
static method synthesized(argument_2_0_0: nat, receiver: VM)
    modifies receiver {assume !(receiver.exitCode == STACK_UNDERFLOW);
assume true && receiver.IsValid() && receiver.IsRunning() && argument_2_0_0 <= MAX_WORD && receiver.pc > 0;
receiver.Push(argument_2_0_0);
assert {:keepAssertion} !(receiver.exitCode == STACK_UNDERFLOW);}
2025-02-25 20:35:09.0606 TRACE Verifying the body of the following method (literal):
 static method synthesized(argument_2_0_0: nat, receiver: VM)
      modifies receiver
    {
      assume !(receiver.exitCode == STACK_UNDERFLOW);
      assume true && receiver.IsValid() && receiver.IsRunning() && argument_2_0_0 <= MAX_WORD && receiver.pc > 0;
      receiver.Push(argument_2_0_0);
      assert {:keepAssertion} !(receiver.exitCode == STACK_UNDERFLOW);
    }
2025-02-25 20:35:09.3927 DEBUG Trying method sequence: Pop
2025-02-25 20:35:09.3975 TRACE Verifying the body of the following method:
static method synthesized(receiver: VM)
    modifies receiver {assume !(receiver.exitCode == STACK_UNDERFLOW);
assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
var _ := receiver.Pop();
assert {:keepAssertion} !(receiver.exitCode == STACK_UNDERFLOW);}
2025-02-25 20:35:09.3975 TRACE Verifying the body of the following method (literal):
 static method synthesized(receiver: VM)
      modifies receiver
    {
      assume !(receiver.exitCode == STACK_UNDERFLOW);
      assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
      var _ := receiver.Pop();
      assert {:keepAssertion} !(receiver.exitCode == STACK_UNDERFLOW);
    }
2025-02-25 20:35:09.7639 TRACE Verifying the body of the following method:
static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_6_1164_0: int, formal_7_533_0: int, receiver: VM)
    modifies receiver {assume !(receiver == null);
assume receiver.IsRunning.requires();
assume true == receiver.IsRunning();
assume receiver.IsValid.requires();
assume true == receiver.IsValid();
assume [] == receiver.stack;
assume 1889 == receiver.pc;
assume 5 == |receiver.data|;
assume receiver.exitCode == Imports.ExitCode.OK;
var _ := receiver.Pop();
assert {:keepAssertion} receiver.exitCode == STACK_UNDERFLOW;}
2025-02-25 20:35:09.7639 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_6_1164_0: int, formal_7_533_0: int, receiver: VM)
      modifies receiver
    {
      assume {:formal} formal_2_1140_0 == true;
      assume {:formal} formal_4_600_0 == true;
      assume {:formal} formal_6_1164_0 == 1889;
      assume {:formal} formal_7_533_0 == 5;
      assume !(receiver == null);
      assume receiver.IsRunning.requires();
      assume formal_2_1140_0 == receiver.IsRunning();
      assume receiver.IsValid.requires();
      assume formal_4_600_0 == receiver.IsValid();
      assume [] == receiver.stack;
      assume formal_6_1164_0 == receiver.pc;
      assume formal_7_533_0 == |receiver.data|;
      assume receiver.exitCode == Imports.ExitCode.OK;
      var _ := receiver.Pop();
      assert {:keepAssertion} receiver.exitCode == STACK_UNDERFLOW;
    }
2025-02-25 20:35:10.0908 DEBUG Trying simplification:
2025-02-25 20:35:10.0926 TRACE Verifying the body of the following method:
static method synthesized(receiver: VM)
    modifies receiver {var _ := receiver.Pop();
assert {:keepAssertion} receiver.exitCode == STACK_UNDERFLOW;}
2025-02-25 20:35:10.0926 TRACE Verifying the body of the following method (literal):
 static method synthesized(receiver: VM)
      modifies receiver
    {

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 628 LINES OF LOGS TO SAVE DISK SPACE ***************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume {:attribute 89} argument_26_0_0 == formal_0_1218_0;
      assume {:formal} formal_2_1140_0 == true;
      assume {:formal} formal_4_600_0 == true;
      assume {:formal} formal_6_1183_0 == 1654;
      assume {:formal} formal_7_533_0 == 5;
      assume !(receiver == null);
      assume receiver.IsRunning.requires();
      assume formal_2_1140_0 == receiver.IsRunning();
      assume receiver.IsValid.requires();
      assume formal_4_600_0 == receiver.IsValid();
      assume [] == receiver.stack;
      assume formal_6_1183_0 == receiver.pc;
      assume formal_7_533_0 == |receiver.data|;
      assume receiver.exitCode == Imports.ExitCode.OK;
      receiver.Store(argument_26_0_0);
      assert {:keepAssertion} receiver.exitCode == STACK_UNDERFLOW;
    }
2025-02-25 20:35:20.3428 DEBUG Trying simplification:
2025-02-25 20:35:20.3447 TRACE Verifying the body of the following method:
static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_6_1183_0: int, formal_7_533_0: int, formal_0_1218_0: int, argument_26_0_0: nat, receiver: VM)
    modifies receiver {receiver.Store(5904);
assert {:keepAssertion} receiver.exitCode == STACK_UNDERFLOW;}
2025-02-25 20:35:20.3447 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_6_1183_0: int, formal_7_533_0: int, formal_0_1218_0: int, argument_26_0_0: nat, receiver: VM)
      modifies receiver
    {
      assume {:attribute 89} argument_26_0_0 == formal_0_1218_0;
      assume {:formal} formal_0_1218_0 == 5904;
      receiver.Store(argument_26_0_0);
      assert {:keepAssertion} receiver.exitCode == STACK_UNDERFLOW;
    }
2025-02-25 20:35:20.6527 DEBUG Trying method sequence: Load
2025-02-25 20:35:20.6551 TRACE Verifying the body of the following method:
static method synthesized(argument_27_0_0: nat, receiver: VM)
    modifies receiver {assume !(receiver.exitCode == STACK_UNDERFLOW);
assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
receiver.Load(argument_27_0_0);
assert {:keepAssertion} !(receiver.exitCode == STACK_UNDERFLOW);}
2025-02-25 20:35:20.6551 TRACE Verifying the body of the following method (literal):
 static method synthesized(argument_27_0_0: nat, receiver: VM)
      modifies receiver
    {
      assume !(receiver.exitCode == STACK_UNDERFLOW);
      assume true && receiver.IsValid() && receiver.IsRunning() && receiver.pc > 0;
      receiver.Load(argument_27_0_0);
      assert {:keepAssertion} !(receiver.exitCode == STACK_UNDERFLOW);
    }
2025-02-25 20:35:20.9303 INFO Expanding method sequence Pop -- estimated distance to start = 0, distance to end = 1
2025-02-25 20:35:20.9330 TRACE Verifying the body of the following method:
static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_6_1164_0: int, formal_7_533_0: int, argument_28_0_0: nat) returns (receiver: VM) {receiver := new VM(argument_28_0_0);
assert {:keepAssertion} !(!(receiver == null) && receiver.IsRunning.requires() && true == receiver.IsRunning() && receiver.IsValid.requires() && true == receiver.IsValid() && [] == receiver.stack && 1889 == receiver.pc && 5 == |receiver.data| && receiver.exitCode == Imports.ExitCode.OK);}
2025-02-25 20:35:20.9330 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_6_1164_0: int, formal_7_533_0: int, argument_28_0_0: nat)
        returns (receiver: VM)
    {
      assume true;
      receiver := new VM(argument_28_0_0);
      assume {:formal} formal_2_1140_0 == true;
      assume {:formal} formal_4_600_0 == true;
      assume {:formal} formal_6_1164_0 == 1889;
      assume {:formal} formal_7_533_0 == 5;
      assert {:keepAssertion} !(!(receiver == null) && receiver.IsRunning.requires() && formal_2_1140_0 == receiver.IsRunning() && receiver.IsValid.requires() && formal_4_600_0 == receiver.IsValid() && [] == receiver.stack && formal_6_1164_0 == receiver.pc && formal_7_533_0 == |receiver.data| && receiver.exitCode == Imports.ExitCode.OK);
    }
2025-02-25 20:35:21.2067 TRACE Verifying the body of the following method:
static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_6_1164_0: int, formal_7_533_0: int, argument_28_0_0: nat, formal_0_1232_0: int) returns (receiver: VM) {receiver := new VM(1889);
assert {:keepAssertion} !(receiver == null) && receiver.IsRunning.requires() && true == receiver.IsRunning() && receiver.IsValid.requires() && true == receiver.IsValid() && [] == receiver.stack && 1889 == receiver.pc && 5 == |receiver.data| && receiver.exitCode == Imports.ExitCode.OK;}
2025-02-25 20:35:21.2067 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_2_1140_0: bool, formal_4_600_0: bool, formal_6_1164_0: int, formal_7_533_0: int, argument_28_0_0: nat, formal_0_1232_0: int)
        returns (receiver: VM)
    {
      assume {:formal} formal_0_1232_0 == 1889;
      assume {:attribute 101} argument_28_0_0 == formal_0_1232_0;
      assume true;
      receiver := new VM(argument_28_0_0);
      assume {:formal} formal_2_1140_0 == true;
      assume {:formal} formal_4_600_0 == true;
      assume {:formal} formal_6_1164_0 == 1889;
      assume {:formal} formal_7_533_0 == 5;
      assert {:keepAssertion} !(receiver == null) && receiver.IsRunning.requires() && formal_2_1140_0 == receiver.IsRunning() && receiver.IsValid.requires() && formal_4_600_0 == receiver.IsValid() && [] == receiver.stack && formal_6_1164_0 == receiver.pc && formal_7_533_0 == |receiver.data| && receiver.exitCode == Imports.ExitCode.OK;
    }
2025-02-25 20:35:21.4732 INFO Have found the following solution to a subproblem!
{
result := new VM(1889);
var _ := result.Pop();
}
2025-02-25 20:35:21.4738 INFO Time spend on subproblem: 00:00:13.1609340
2025-02-25 20:35:21.4738 INFO Number of Regular queries to Dafny used to solve subproblem: 21 (00:00:06.5309490)
2025-02-25 20:35:21.4738 INFO Number of Simplify queries to Dafny used to solve subproblem: 7 (00:00:02.2542870)
2025-02-25 20:35:21.4738 INFO Number of Heuristic queries to Dafny used to solve subproblem: 15 (00:00:04.3029540)
2025-02-25 20:35:21.4744 INFO Have found the following solution!
static method solution() returns (result:VM)
ensures fresh(result) && Goal(result)
{
result := new VM(1889);
var _ := result.Pop();
}
2025-02-25 20:35:21.4744 INFO Total time spend on synthesis: 00:00:13.4041120
2025-02-25 20:35:21.4744 INFO Total number of Regular queries to Dafny: 21 (00:00:06.5309490)
2025-02-25 20:35:21.4744 INFO Total number of Simplify queries to Dafny: 7 (00:00:02.2542870)
2025-02-25 20:35:21.4744 INFO Total number of Heuristic queries to Dafny: 15 (00:00:04.3029540)
