2024-09-22 16:00:22.9260 DEBUG Using integer programming to estimating the distance to |this.data| == 5, this.data[0] == 0, this.data[1] == 1, this.data[2] == 2, this.data[3] == 3, this.data[4] == 4
2024-09-22 16:00:22.9417 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 16:00:22.9451 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 16:00:22.9451 DEBUG In particular, need at least -0 calls to Put
2024-09-22 16:00:22.9451 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 16:00:22.9451 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 16:00:22.9451 INFO Initial heuristic value is 0
2024-09-22 16:00:22.9472 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-22 16:00:22.9882 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, argument_1_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_1_0_0);
assert {:keepAssertion} !(|receiver.data| == 5 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3 && receiver.data[4] == 4);}
2024-09-22 16:00:22.9882 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, argument_1_0_0: nat)
        returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_1_0_0);
      assume {:formal} formal_0_107_0 == 5;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume {:formal} formal_3_113_0 == 2;
      assume {:formal} formal_3_113_1 == 2;
      assume {:formal} formal_4_115_0 == 3;
      assume {:formal} formal_4_115_1 == 3;
      assume {:formal} formal_5_117_0 == 4;
      assume {:formal} formal_5_117_1 == 4;
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1 && receiver.data[formal_4_115_0] == formal_4_115_1 && receiver.data[formal_5_117_0] == formal_5_117_1);
    }
2024-09-22 16:00:23.9734 DEBUG Trying method sequence: Put
2024-09-22 16:00:23.9776 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
    modifies receiver {assume !(|receiver.data| == 5 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3 && receiver.data[4] == 4);
assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
receiver.Put(argument_2_0_0, argument_2_0_1);
assert {:keepAssertion} !(|receiver.data| == 5 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3 && receiver.data[4] == 4);}
2024-09-22 16:00:23.9776 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_0_107_0 == 5;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume {:formal} formal_3_113_0 == 2;
      assume {:formal} formal_3_113_1 == 2;
      assume {:formal} formal_4_115_0 == 3;
      assume {:formal} formal_4_115_1 == 3;
      assume {:formal} formal_5_117_0 == 4;
      assume {:formal} formal_5_117_1 == 4;
      assume !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1 && receiver.data[formal_4_115_0] == formal_4_115_1 && receiver.data[formal_5_117_0] == formal_5_117_1);
      assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1 && receiver.data[formal_4_115_0] == formal_4_115_1 && receiver.data[formal_5_117_0] == formal_5_117_1);
    }
2024-09-22 16:00:24.2973 TRACE Verifying the body of the following method:
static method synthesized(formal_1_139_0: int, formal_2_141_0: int, formal_3_143_0: int, formal_4_145_0: int, formal_5_147_0: int, formal_6_149_0: int, formal_6_149_1: int, formal_7_151_0: int, formal_8_153_0: int, formal_8_153_1: int, formal_9_155_0: int, formal_9_155_1: int, formal_10_157_0: int, formal_10_157_1: int, formal_11_159_0: int, formal_11_159_1: int, formal_12_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_130_0: int)
    modifies receiver {assume !(receiver == null);
assume |receiver.data| > 3;
assume |receiver.data| > 0;
assume |receiver.data| > 1;
assume |receiver.data| > 2;
assume |receiver.data| > 4;
assume 14 == receiver.data[3];
assume 5 == |receiver.data|;
assume 0 == receiver.data[0];
assume 1 == receiver.data[1];
assume 2 == receiver.data[2];
assume 4 == receiver.data[4];
assume false == receiver.frozen;
receiver.Put(3, 3);
assert {:keepAssertion} |receiver.data| == 5 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3 && receiver.data[4] == 4;}
2024-09-22 16:00:24.2973 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_139_0: int, formal_2_141_0: int, formal_3_143_0: int, formal_4_145_0: int, formal_5_147_0: int, formal_6_149_0: int, formal_6_149_1: int, formal_7_151_0: int, formal_8_153_0: int, formal_8_153_1: int, formal_9_155_0: int, formal_9_155_1: int, formal_10_157_0: int, formal_10_157_1: int, formal_11_159_0: int, formal_11_159_1: int, formal_12_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_130_0: int)
      modifies receiver
    {
      assume {:formal} formal_0_130_0 == 3;
      assume {:attribute 21} argument_2_0_0 == formal_0_130_0;
      assume {:attribute 22} argument_2_0_1 == formal_0_130_0;
      assume {:formal} formal_1_139_0 == 3;
      assume {:formal} formal_2_141_0 == 0;
      assume {:formal} formal_3_143_0 == 1;
      assume {:formal} formal_4_145_0 == 2;
      assume {:formal} formal_5_147_0 == 4;
      assume {:formal} formal_6_149_0 == 14;
      assume {:formal} formal_6_149_1 == 3;
      assume {:formal} formal_7_151_0 == 5;
      assume {:formal} formal_8_153_0 == 0;
      assume {:formal} formal_8_153_1 == 0;
      assume {:formal} formal_9_155_0 == 1;
      assume {:formal} formal_9_155_1 == 1;
      assume {:formal} formal_10_157_0 == 2;
      assume {:formal} formal_10_157_1 == 2;
      assume {:formal} formal_11_159_0 == 4;
      assume {:formal} formal_11_159_1 == 4;
      assume {:formal} formal_12_99_0 == false;
      assume !(receiver == null);

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 2481 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      receiver.Unfreeze();
      assume {:formal} formal_1_139_0 == 3;
      assume {:formal} formal_3_99_0 == false;
      assume {:formal} formal_4_151_0 == 5;
      assert {:keepAssertion} !(receiver == null) && |receiver.data| > formal_1_139_0 && formal_3_99_0 == receiver.frozen && formal_4_151_0 == |receiver.data|;
    }
2024-09-22 16:00:41.8052 DEBUG Trying simplification:
2024-09-22 16:00:41.8052 TRACE Verifying the body of the following method:
static method synthesized(formal_1_151_0: int, formal_4_151_0: int, formal_1_139_0: int, formal_3_99_0: bool, receiver: Array)
    modifies receiver {assume !(receiver == null);
assume 5 == |receiver.data|;
receiver.Unfreeze();
assert {:keepAssertion} !(receiver == null);
assert {:keepAssertion} |receiver.data| > 3;
assert {:keepAssertion} false == receiver.frozen;
assert {:keepAssertion} 5 == |receiver.data|;}
2024-09-22 16:00:41.8052 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_151_0: int, formal_4_151_0: int, formal_1_139_0: int, formal_3_99_0: bool, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_1_151_0 == 5;
      assume !(receiver == null);
      assume formal_1_151_0 == |receiver.data|;
      receiver.Unfreeze();
      assume {:formal} formal_1_139_0 == 3;
      assume {:formal} formal_3_99_0 == false;
      assume {:formal} formal_4_151_0 == 5;
      assert {:keepAssertion} !(receiver == null);
      assert {:keepAssertion} |receiver.data| > formal_1_139_0;
      assert {:keepAssertion} formal_3_99_0 == receiver.frozen;
      assert {:keepAssertion} formal_4_151_0 == |receiver.data|;
    }
2024-09-22 16:00:41.9835 DEBUG Using integer programming to estimating the distance to ¬(receiver == null), 5 == |this.data|
2024-09-22 16:00:41.9880 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 16:00:41.9880 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 16:00:41.9880 DEBUG In particular, need at least -0 calls to Put
2024-09-22 16:00:41.9880 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 16:00:41.9880 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 16:00:41.9880 INFO The following method sequence is possible (heuristic=0): Unfreeze, Put, Put, Put, Put, Put, Put
2024-09-22 16:00:41.9880 INFO New state is ¬(receiver == null), 5 == |this.data|
2024-09-22 16:00:41.9880 INFO Expanding method sequence Unfreeze, Put, Put, Put, Put, Put, Put -- estimated distance to start = 0, distance to end = 7
2024-09-22 16:00:41.9911 TRACE Verifying the body of the following method:
static method synthesized(formal_1_151_0: int, argument_61_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_61_0_0);
assert {:keepAssertion} !(!(receiver == null) && 5 == |receiver.data|);}
2024-09-22 16:00:41.9911 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_151_0: int, argument_61_0_0: nat) returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_61_0_0);
      assume {:formal} formal_1_151_0 == 5;
      assert {:keepAssertion} !(!(receiver == null) && formal_1_151_0 == |receiver.data|);
    }
2024-09-22 16:00:42.2123 TRACE Verifying the body of the following method:
static method synthesized(formal_1_151_0: int, argument_61_0_0: nat, formal_0_119_0: int) returns (receiver: Array) {assume true;
receiver := new Array(5);
assert {:keepAssertion} !(receiver == null) && 5 == |receiver.data|;}
2024-09-22 16:00:42.2123 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_151_0: int, argument_61_0_0: nat, formal_0_119_0: int)
        returns (receiver: Array)
    {
      assume {:formal} formal_0_119_0 == 5;
      assume {:attribute 341} argument_61_0_0 == formal_0_119_0;
      assume true;
      receiver := new Array(argument_61_0_0);
      assume {:formal} formal_1_151_0 == 5;
      assert {:keepAssertion} !(receiver == null) && formal_1_151_0 == |receiver.data|;
    }
2024-09-22 16:00:42.4007 INFO Have found the following solution to a subproblem!
{
result := new Array(5);
result.Unfreeze();
result.Put(3, 14);
result.Put(4, 4);
result.Put(1, 1);
result.Put(2, 2);
result.Put(0, 0);
result.Put(3, 3);
}
2024-09-22 16:00:42.4007 INFO Time spend on subproblem: 00:00:19.4867177
2024-09-22 16:00:42.4036 INFO Number of Regular queries to Dafny used to solve subproblem: 36 (00:00:08.5715278)
2024-09-22 16:00:42.4036 INFO Number of Simplify queries to Dafny used to solve subproblem: 12 (00:00:02.5163621)
2024-09-22 16:00:42.4036 INFO Number of Heuristic queries to Dafny used to solve subproblem: 38 (00:00:08.1451553)
2024-09-22 16:00:42.4036 INFO Have found the following solution!
static method solution() returns (result:Array)
ensures Goal(result)
{
result := new Array(5);
result.Unfreeze();
result.Put(3, 14);
result.Put(4, 4);
result.Put(1, 1);
result.Put(2, 2);
result.Put(0, 0);
result.Put(3, 3);
}
2024-09-22 16:00:42.4036 INFO Total time spend on synthesis: 00:00:19.6253931
2024-09-22 16:00:42.4036 INFO Total number of Regular queries to Dafny: 36 (00:00:08.5715278)
2024-09-22 16:00:42.4036 INFO Total number of Simplify queries to Dafny: 12 (00:00:02.5163621)
2024-09-22 16:00:42.4036 INFO Total number of Heuristic queries to Dafny: 38 (00:00:08.1451553)
