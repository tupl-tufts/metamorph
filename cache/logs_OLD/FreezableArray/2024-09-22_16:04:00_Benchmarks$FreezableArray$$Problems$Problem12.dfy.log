2024-09-22 16:04:01.1275 DEBUG Using integer programming to estimating the distance to |this.data| == 12, this.data[0] == 0, this.data[1] == 1, this.data[10] == 10, this.data[11] == 11, this.data[2] == 2, this.data[3] == 3, this.data[4] == 4, this.data[5] == 5, this.data[6] == 6, this.data[7] == 7, this.data[8] == 8, this.data[9] == 9
2024-09-22 16:04:01.1430 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 16:04:01.1430 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 16:04:01.1430 DEBUG In particular, need at least -0 calls to Put
2024-09-22 16:04:01.1465 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 16:04:01.1465 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 16:04:01.1465 INFO Initial heuristic value is 0
2024-09-22 16:04:01.1465 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-22 16:04:01.1900 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, formal_6_119_0: int, formal_6_119_1: int, formal_7_121_0: int, formal_7_121_1: int, formal_8_123_0: int, formal_8_123_1: int, formal_9_125_0: int, formal_9_125_1: int, formal_10_127_0: int, formal_10_127_1: int, formal_11_129_0: int, formal_11_129_1: int, formal_12_131_0: int, formal_12_131_1: int, argument_1_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_1_0_0);
assert {:keepAssertion} !(|receiver.data| == 12 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3 && receiver.data[4] == 4 && receiver.data[5] == 5 && receiver.data[6] == 6 && receiver.data[7] == 7 && receiver.data[8] == 8 && receiver.data[9] == 9 && receiver.data[10] == 10 && receiver.data[11] == 11);}
2024-09-22 16:04:01.1900 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, formal_6_119_0: int, formal_6_119_1: int, formal_7_121_0: int, formal_7_121_1: int, formal_8_123_0: int, formal_8_123_1: int, formal_9_125_0: int, formal_9_125_1: int, formal_10_127_0: int, formal_10_127_1: int, formal_11_129_0: int, formal_11_129_1: int, formal_12_131_0: int, formal_12_131_1: int, argument_1_0_0: nat)
        returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_1_0_0);
      assume {:formal} formal_0_107_0 == 12;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume {:formal} formal_3_113_0 == 2;
      assume {:formal} formal_3_113_1 == 2;
      assume {:formal} formal_4_115_0 == 3;
      assume {:formal} formal_4_115_1 == 3;
      assume {:formal} formal_5_117_0 == 4;
      assume {:formal} formal_5_117_1 == 4;
      assume {:formal} formal_6_119_0 == 5;
      assume {:formal} formal_6_119_1 == 5;
      assume {:formal} formal_7_121_0 == 6;
      assume {:formal} formal_7_121_1 == 6;
      assume {:formal} formal_8_123_0 == 7;
      assume {:formal} formal_8_123_1 == 7;
      assume {:formal} formal_9_125_0 == 8;
      assume {:formal} formal_9_125_1 == 8;
      assume {:formal} formal_10_127_0 == 9;
      assume {:formal} formal_10_127_1 == 9;
      assume {:formal} formal_11_129_0 == 10;
      assume {:formal} formal_11_129_1 == 10;
      assume {:formal} formal_12_131_0 == 11;
      assume {:formal} formal_12_131_1 == 11;
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1 && receiver.data[formal_4_115_0] == formal_4_115_1 && receiver.data[formal_5_117_0] == formal_5_117_1 && receiver.data[formal_6_119_0] == formal_6_119_1 && receiver.data[formal_7_121_0] == formal_7_121_1 && receiver.data[formal_8_123_0] == formal_8_123_1 && receiver.data[formal_9_125_0] == formal_9_125_1 && receiver.data[formal_10_127_0] == formal_10_127_1 && receiver.data[formal_11_129_0] == formal_11_129_1 && receiver.data[formal_12_131_0] == formal_12_131_1);
    }
2024-09-22 16:04:02.2109 DEBUG Trying method sequence: Put
2024-09-22 16:04:02.2160 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, formal_6_119_0: int, formal_6_119_1: int, formal_7_121_0: int, formal_7_121_1: int, formal_8_123_0: int, formal_8_123_1: int, formal_9_125_0: int, formal_9_125_1: int, formal_10_127_0: int, formal_10_127_1: int, formal_11_129_0: int, formal_11_129_1: int, formal_12_131_0: int, formal_12_131_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
    modifies receiver {assume !(|receiver.data| == 12 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3 && receiver.data[4] == 4 && receiver.data[5] == 5 && receiver.data[6] == 6 && receiver.data[7] == 7 && receiver.data[8] == 8 && receiver.data[9] == 9 && receiver.data[10] == 10 && receiver.data[11] == 11);
assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
receiver.Put(argument_2_0_0, argument_2_0_1);
assert {:keepAssertion} !(|receiver.data| == 12 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3 && receiver.data[4] == 4 && receiver.data[5] == 5 && receiver.data[6] == 6 && receiver.data[7] == 7 && receiver.data[8] == 8 && receiver.data[9] == 9 && receiver.data[10] == 10 && receiver.data[11] == 11);}
2024-09-22 16:04:02.2160 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, formal_6_119_0: int, formal_6_119_1: int, formal_7_121_0: int, formal_7_121_1: int, formal_8_123_0: int, formal_8_123_1: int, formal_9_125_0: int, formal_9_125_1: int, formal_10_127_0: int, formal_10_127_1: int, formal_11_129_0: int, formal_11_129_1: int, formal_12_131_0: int, formal_12_131_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_0_107_0 == 12;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume {:formal} formal_3_113_0 == 2;
      assume {:formal} formal_3_113_1 == 2;
      assume {:formal} formal_4_115_0 == 3;
      assume {:formal} formal_4_115_1 == 3;
      assume {:formal} formal_5_117_0 == 4;
      assume {:formal} formal_5_117_1 == 4;
      assume {:formal} formal_6_119_0 == 5;
      assume {:formal} formal_6_119_1 == 5;
      assume {:formal} formal_7_121_0 == 6;
      assume {:formal} formal_7_121_1 == 6;
      assume {:formal} formal_8_123_0 == 7;
      assume {:formal} formal_8_123_1 == 7;
      assume {:formal} formal_9_125_0 == 8;
      assume {:formal} formal_9_125_1 == 8;
      assume {:formal} formal_10_127_0 == 9;
      assume {:formal} formal_10_127_1 == 9;
      assume {:formal} formal_11_129_0 == 10;
      assume {:formal} formal_11_129_1 == 10;
      assume {:formal} formal_12_131_0 == 11;
      assume {:formal} formal_12_131_1 == 11;
      assume !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1 && receiver.data[formal_4_115_0] == formal_4_115_1 && receiver.data[formal_5_117_0] == formal_5_117_1 && receiver.data[formal_6_119_0] == formal_6_119_1 && receiver.data[formal_7_121_0] == formal_7_121_1 && receiver.data[formal_8_123_0] == formal_8_123_1 && receiver.data[formal_9_125_0] == formal_9_125_1 && receiver.data[formal_10_127_0] == formal_10_127_1 && receiver.data[formal_11_129_0] == formal_11_129_1 && receiver.data[formal_12_131_0] == formal_12_131_1);
      assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1 && receiver.data[formal_4_115_0] == formal_4_115_1 && receiver.data[formal_5_117_0] == formal_5_117_1 && receiver.data[formal_6_119_0] == formal_6_119_1 && receiver.data[formal_7_121_0] == formal_7_121_1 && receiver.data[formal_8_123_0] == formal_8_123_1 && receiver.data[formal_9_125_0] == formal_9_125_1 && receiver.data[formal_10_127_0] == formal_10_127_1 && receiver.data[formal_11_129_0] == formal_11_129_1 && receiver.data[formal_12_131_0] == formal_12_131_1);
    }
2024-09-22 16:04:02.6116 TRACE Verifying the body of the following method:
static method synthesized(formal_1_174_0: int, formal_2_176_0: int, formal_3_178_0: int, formal_4_180_0: int, formal_5_182_0: int, formal_6_184_0: int, formal_7_186_0: int, formal_8_188_0: int, formal_9_190_0: int, formal_10_192_0: int, formal_11_194_0: int, formal_12_196_0: int, formal_13_198_0: int, formal_13_198_1: int, formal_14_200_0: int, formal_15_202_0: int, formal_15_202_1: int, formal_16_204_0: int, formal_16_204_1: int, formal_17_206_0: int, formal_17_206_1: int, formal_18_208_0: int, formal_18_208_1: int, formal_19_210_0: int, formal_19_210_1: int, formal_20_212_0: int, formal_20_212_1: int, formal_21_214_0: int, formal_21_214_1: int, formal_22_216_0: int, formal_22_216_1: int, formal_23_218_0: int, formal_23_218_1: int, formal_24_220_0: int, formal_24_220_1: int, formal_25_222_0: int, formal_25_222_1: int, formal_26_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, formal_5_117_0: int, formal_5_117_1: int, formal_6_119_0: int, formal_6_119_1: int, formal_7_121_0: int, formal_7_121_1: int, formal_8_123_0: int, formal_8_123_1: int, formal_9_125_0: int, formal_9_125_1: int, formal_10_127_0: int, formal_10_127_1: int, formal_11_129_0: int, formal_11_129_1: int, formal_12_131_0: int, formal_12_131_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_165_0: int)
    modifies receiver {assume !(receiver == null);
assume |receiver.data| > 10;
assume |receiver.data| > 0;
assume |receiver.data| > 9;
assume |receiver.data| > 11;
assume |receiver.data| > 1;
assume |receiver.data| > 2;
assume |receiver.data| > 3;
assume |receiver.data| > 4;
assume |receiver.data| > 5;
assume |receiver.data| > 6;
assume |receiver.data| > 7;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 8141 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

assert {:keepAssertion} 12 == |receiver.data|;
assert {:keepAssertion} false == receiver.frozen;}
2024-09-22 16:04:46.1918 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_200_0: int, formal_3_200_0: int, formal_1_174_0: int, formal_4_99_0: bool, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_1_200_0 == 12;
      assume !(receiver == null);
      assume formal_1_200_0 == |receiver.data|;
      receiver.Unfreeze();
      assume {:formal} formal_1_174_0 == 10;
      assume {:formal} formal_3_200_0 == 12;
      assume {:formal} formal_4_99_0 == false;
      assert {:keepAssertion} !(receiver == null);
      assert {:keepAssertion} |receiver.data| > formal_1_174_0;
      assert {:keepAssertion} formal_3_200_0 == |receiver.data|;
      assert {:keepAssertion} formal_4_99_0 == receiver.frozen;
    }
2024-09-22 16:04:46.3721 DEBUG Using integer programming to estimating the distance to ¬(receiver == null), 12 == |this.data|
2024-09-22 16:04:46.3775 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 16:04:46.3775 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 16:04:46.3786 DEBUG In particular, need at least -0 calls to Put
2024-09-22 16:04:46.3786 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 16:04:46.3786 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 16:04:46.3786 INFO The following method sequence is possible (heuristic=0): Unfreeze, Put, Put, Put, Put, Put, Put, Put, Put, Put, Put, Put, Put, Put
2024-09-22 16:04:46.3786 INFO New state is ¬(receiver == null), 12 == |this.data|
2024-09-22 16:04:46.3786 INFO Expanding method sequence Unfreeze, Put, Put, Put, Put, Put, Put, Put, Put, Put, Put, Put, Put, Put -- estimated distance to start = 0, distance to end = 14
2024-09-22 16:04:46.3786 TRACE Verifying the body of the following method:
static method synthesized(formal_1_200_0: int, argument_131_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_131_0_0);
assert {:keepAssertion} !(!(receiver == null) && 12 == |receiver.data|);}
2024-09-22 16:04:46.3786 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_200_0: int, argument_131_0_0: nat) returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_131_0_0);
      assume {:formal} formal_1_200_0 == 12;
      assert {:keepAssertion} !(!(receiver == null) && formal_1_200_0 == |receiver.data|);
    }
2024-09-22 16:04:46.6217 TRACE Verifying the body of the following method:
static method synthesized(formal_1_200_0: int, argument_131_0_0: nat, formal_0_133_0: int) returns (receiver: Array) {assume true;
receiver := new Array(12);
assert {:keepAssertion} !(receiver == null) && 12 == |receiver.data|;}
2024-09-22 16:04:46.6217 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_200_0: int, argument_131_0_0: nat, formal_0_133_0: int)
        returns (receiver: Array)
    {
      assume {:formal} formal_0_133_0 == 12;
      assume {:attribute 1013} argument_131_0_0 == formal_0_133_0;
      assume true;
      receiver := new Array(argument_131_0_0);
      assume {:formal} formal_1_200_0 == 12;
      assert {:keepAssertion} !(receiver == null) && formal_1_200_0 == |receiver.data|;
    }
2024-09-22 16:04:46.7841 INFO Have found the following solution to a subproblem!
{
result := new Array(12);
result.Unfreeze();
result.Put(10, 29);
result.Put(11, 11);
result.Put(6, 6);
result.Put(7, 7);
result.Put(1, 1);
result.Put(9, 9);
result.Put(3, 3);
result.Put(2, 2);
result.Put(8, 8);
result.Put(0, 0);
result.Put(4, 4);
result.Put(5, 5);
result.Put(10, 10);
}
2024-09-22 16:04:46.7841 INFO Time spend on subproblem: 00:00:45.6686493
2024-09-22 16:04:46.7872 INFO Number of Regular queries to Dafny used to solve subproblem: 71 (00:00:20.6877242)
2024-09-22 16:04:46.7872 INFO Number of Simplify queries to Dafny used to solve subproblem: 26 (00:00:05.5689826)
2024-09-22 16:04:46.7872 INFO Number of Heuristic queries to Dafny used to solve subproblem: 87 (00:00:18.6924653)
2024-09-22 16:04:46.7872 INFO Have found the following solution!
static method solution() returns (result:Array)
ensures Goal(result)
{
result := new Array(12);
result.Unfreeze();
result.Put(10, 29);
result.Put(11, 11);
result.Put(6, 6);
result.Put(7, 7);
result.Put(1, 1);
result.Put(9, 9);
result.Put(3, 3);
result.Put(2, 2);
result.Put(8, 8);
result.Put(0, 0);
result.Put(4, 4);
result.Put(5, 5);
result.Put(10, 10);
}
2024-09-22 16:04:46.7872 INFO Total time spend on synthesis: 00:00:45.8223484
2024-09-22 16:04:46.7872 INFO Total number of Regular queries to Dafny: 71 (00:00:20.6877242)
2024-09-22 16:04:46.7872 INFO Total number of Simplify queries to Dafny: 26 (00:00:05.5689826)
2024-09-22 16:04:46.7872 INFO Total number of Heuristic queries to Dafny: 87 (00:00:18.6924653)
