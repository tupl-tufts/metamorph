2024-09-22 15:59:50.4368 DEBUG Using integer programming to estimating the distance to |this.data| == 3, this.data[0] == 0, this.data[1] == 1, this.data[2] == 2
2024-09-22 15:59:50.4526 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 15:59:50.4561 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 15:59:50.4561 DEBUG In particular, need at least -0 calls to Put
2024-09-22 15:59:50.4561 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 15:59:50.4561 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 15:59:50.4561 INFO Initial heuristic value is 0
2024-09-22 15:59:50.4561 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-22 15:59:50.4988 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, argument_1_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_1_0_0);
assert {:keepAssertion} !(|receiver.data| == 3 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2);}
2024-09-22 15:59:50.4988 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, argument_1_0_0: nat)
        returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_1_0_0);
      assume {:formal} formal_0_107_0 == 3;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume {:formal} formal_3_113_0 == 2;
      assume {:formal} formal_3_113_1 == 2;
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1);
    }
2024-09-22 15:59:51.5054 DEBUG Trying method sequence: Put
2024-09-22 15:59:51.5098 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
    modifies receiver {assume !(|receiver.data| == 3 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2);
assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
receiver.Put(argument_2_0_0, argument_2_0_1);
assert {:keepAssertion} !(|receiver.data| == 3 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2);}
2024-09-22 15:59:51.5098 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_0_107_0 == 3;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume {:formal} formal_3_113_0 == 2;
      assume {:formal} formal_3_113_1 == 2;
      assume !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1);
      assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1);
    }
2024-09-22 15:59:51.8758 TRACE Verifying the body of the following method:
static method synthesized(formal_1_129_0: int, formal_2_131_0: int, formal_3_133_0: int, formal_4_135_0: int, formal_4_135_1: int, formal_5_137_0: int, formal_6_139_0: int, formal_6_139_1: int, formal_7_141_0: int, formal_7_141_1: int, formal_8_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_120_0: int)
    modifies receiver {assume !(receiver == null);
assume |receiver.data| > 1;
assume |receiver.data| > 0;
assume |receiver.data| > 2;
assume 25 == receiver.data[1];
assume 3 == |receiver.data|;
assume 0 == receiver.data[0];
assume 2 == receiver.data[2];
assume false == receiver.frozen;
receiver.Put(1, 1);
assert {:keepAssertion} |receiver.data| == 3 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2;}
2024-09-22 15:59:51.8758 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_129_0: int, formal_2_131_0: int, formal_3_133_0: int, formal_4_135_0: int, formal_4_135_1: int, formal_5_137_0: int, formal_6_139_0: int, formal_6_139_1: int, formal_7_141_0: int, formal_7_141_1: int, formal_8_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_120_0: int)
      modifies receiver
    {
      assume {:formal} formal_0_120_0 == 1;
      assume {:attribute 17} argument_2_0_0 == formal_0_120_0;
      assume {:attribute 18} argument_2_0_1 == formal_0_120_0;
      assume {:formal} formal_1_129_0 == 1;
      assume {:formal} formal_2_131_0 == 0;
      assume {:formal} formal_3_133_0 == 2;
      assume {:formal} formal_4_135_0 == 25;
      assume {:formal} formal_4_135_1 == 1;
      assume {:formal} formal_5_137_0 == 3;
      assume {:formal} formal_6_139_0 == 0;
      assume {:formal} formal_6_139_1 == 0;
      assume {:formal} formal_7_141_0 == 2;
      assume {:formal} formal_7_141_1 == 2;
      assume {:formal} formal_8_99_0 == false;
      assume !(receiver == null);
      assume |receiver.data| > formal_1_129_0;
      assume |receiver.data| > formal_2_131_0;
      assume |receiver.data| > formal_3_133_0;
      assume formal_4_135_0 == receiver.data[formal_4_135_1];
      assume formal_5_137_0 == |receiver.data|;
      assume formal_6_139_0 == receiver.data[formal_6_139_1];
      assume formal_7_141_0 == receiver.data[formal_7_141_1];
      assume formal_8_99_0 == receiver.frozen;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assume {:formal} formal_0_107_0 == 3;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume {:formal} formal_3_113_0 == 2;
      assume {:formal} formal_3_113_1 == 2;
      assert {:keepAssertion} |receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1;
    }

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 1370 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume {:formal} formal_2_19_0 == true;
      assume !(receiver == null);
      assume formal_1_137_0 == |receiver.data|;
      assume formal_2_19_0 == receiver.frozen;
      receiver.Unfreeze();
      assume {:formal} formal_1_133_0 == 2;
      assume {:formal} formal_3_137_0 == 3;
      assume {:formal} formal_4_99_0 == false;
      assert {:keepAssertion} !(receiver == null) && |receiver.data| > formal_1_133_0 && formal_3_137_0 == |receiver.data| && formal_4_99_0 == receiver.frozen;
    }
2024-09-22 16:00:03.6633 DEBUG Trying simplification:
2024-09-22 16:00:03.6633 TRACE Verifying the body of the following method:
static method synthesized(formal_1_137_0: int, formal_3_137_0: int, formal_1_133_0: int, formal_4_99_0: bool, receiver: Array)
    modifies receiver {assume !(receiver == null);
assume 3 == |receiver.data|;
receiver.Unfreeze();
assert {:keepAssertion} !(receiver == null);
assert {:keepAssertion} |receiver.data| > 2;
assert {:keepAssertion} 3 == |receiver.data|;
assert {:keepAssertion} false == receiver.frozen;}
2024-09-22 16:00:03.6633 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_137_0: int, formal_3_137_0: int, formal_1_133_0: int, formal_4_99_0: bool, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_1_137_0 == 3;
      assume !(receiver == null);
      assume formal_1_137_0 == |receiver.data|;
      receiver.Unfreeze();
      assume {:formal} formal_1_133_0 == 2;
      assume {:formal} formal_3_137_0 == 3;
      assume {:formal} formal_4_99_0 == false;
      assert {:keepAssertion} !(receiver == null);
      assert {:keepAssertion} |receiver.data| > formal_1_133_0;
      assert {:keepAssertion} formal_3_137_0 == |receiver.data|;
      assert {:keepAssertion} formal_4_99_0 == receiver.frozen;
    }
2024-09-22 16:00:03.8626 DEBUG Using integer programming to estimating the distance to ¬(receiver == null), 3 == |this.data|
2024-09-22 16:00:03.8626 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 16:00:03.8668 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 16:00:03.8668 DEBUG In particular, need at least -0 calls to Put
2024-09-22 16:00:03.8668 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 16:00:03.8668 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 16:00:03.8668 INFO The following method sequence is possible (heuristic=0): Unfreeze, Put, Put, Put, Put
2024-09-22 16:00:03.8668 INFO New state is ¬(receiver == null), 3 == |this.data|
2024-09-22 16:00:03.8668 INFO Expanding method sequence Unfreeze, Put, Put, Put, Put -- estimated distance to start = 0, distance to end = 5
2024-09-22 16:00:03.8668 TRACE Verifying the body of the following method:
static method synthesized(formal_1_137_0: int, argument_41_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_41_0_0);
assert {:keepAssertion} !(!(receiver == null) && 3 == |receiver.data|);}
2024-09-22 16:00:03.8668 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_137_0: int, argument_41_0_0: nat) returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_41_0_0);
      assume {:formal} formal_1_137_0 == 3;
      assert {:keepAssertion} !(!(receiver == null) && formal_1_137_0 == |receiver.data|);
    }
2024-09-22 16:00:04.0747 TRACE Verifying the body of the following method:
static method synthesized(formal_1_137_0: int, argument_41_0_0: nat, formal_0_115_0: int) returns (receiver: Array) {assume true;
receiver := new Array(3);
assert {:keepAssertion} !(receiver == null) && 3 == |receiver.data|;}
2024-09-22 16:00:04.0747 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_137_0: int, argument_41_0_0: nat, formal_0_115_0: int)
        returns (receiver: Array)
    {
      assume {:formal} formal_0_115_0 == 3;
      assume {:attribute 203} argument_41_0_0 == formal_0_115_0;
      assume true;
      receiver := new Array(argument_41_0_0);
      assume {:formal} formal_1_137_0 == 3;
      assert {:keepAssertion} !(receiver == null) && formal_1_137_0 == |receiver.data|;
    }
2024-09-22 16:00:04.2451 INFO Have found the following solution to a subproblem!
{
result := new Array(3);
result.Unfreeze();
result.Put(2, 2);
result.Put(1, 25);
result.Put(0, 0);
result.Put(1, 1);
}
2024-09-22 16:00:04.2451 INFO Time spend on subproblem: 00:00:13.8200722
2024-09-22 16:00:04.2467 INFO Number of Regular queries to Dafny used to solve subproblem: 26 (00:00:06.7287784)
2024-09-22 16:00:04.2467 INFO Number of Simplify queries to Dafny used to solve subproblem: 8 (00:00:01.6644656)
2024-09-22 16:00:04.2467 INFO Number of Heuristic queries to Dafny used to solve subproblem: 24 (00:00:05.2391693)
2024-09-22 16:00:04.2467 INFO Have found the following solution!
static method solution() returns (result:Array)
ensures Goal(result)
{
result := new Array(3);
result.Unfreeze();
result.Put(2, 2);
result.Put(1, 25);
result.Put(0, 0);
result.Put(1, 1);
}
2024-09-22 16:00:04.2467 INFO Total time spend on synthesis: 00:00:13.9650271
2024-09-22 16:00:04.2467 INFO Total number of Regular queries to Dafny: 26 (00:00:06.7287784)
2024-09-22 16:00:04.2467 INFO Total number of Simplify queries to Dafny: 8 (00:00:01.6644656)
2024-09-22 16:00:04.2467 INFO Total number of Heuristic queries to Dafny: 24 (00:00:05.2391693)
