2024-09-22 15:59:38.7468 DEBUG Using integer programming to estimating the distance to |this.data| == 2, this.data[0] == 0, this.data[1] == 1
2024-09-22 15:59:38.7629 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 15:59:38.7629 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 15:59:38.7629 DEBUG In particular, need at least -0 calls to Put
2024-09-22 15:59:38.7665 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 15:59:38.7665 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 15:59:38.7665 INFO Initial heuristic value is 0
2024-09-22 15:59:38.7665 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-22 15:59:38.8105 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, argument_1_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_1_0_0);
assert {:keepAssertion} !(|receiver.data| == 2 && receiver.data[0] == 0 && receiver.data[1] == 1);}
2024-09-22 15:59:38.8107 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, argument_1_0_0: nat)
        returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_1_0_0);
      assume {:formal} formal_0_107_0 == 2;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1);
    }
2024-09-22 15:59:39.8069 DEBUG Trying method sequence: Put
2024-09-22 15:59:39.8111 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
    modifies receiver {assume !(|receiver.data| == 2 && receiver.data[0] == 0 && receiver.data[1] == 1);
assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
receiver.Put(argument_2_0_0, argument_2_0_1);
assert {:keepAssertion} !(|receiver.data| == 2 && receiver.data[0] == 0 && receiver.data[1] == 1);}
2024-09-22 15:59:39.8111 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_0_107_0 == 2;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1);
      assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1);
    }
2024-09-22 15:59:40.1693 TRACE Verifying the body of the following method:
static method synthesized(formal_1_124_0: int, formal_2_126_0: int, formal_3_128_0: int, formal_3_128_1: int, formal_4_130_0: int, formal_5_132_0: int, formal_5_132_1: int, formal_6_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_118_0: int)
    modifies receiver {assume !(receiver == null);
assume |receiver.data| > 1;
assume |receiver.data| > 0;
assume 25 == receiver.data[1];
assume 2 == |receiver.data|;
assume 0 == receiver.data[0];
assume false == receiver.frozen;
receiver.Put(1, 1);
assert {:keepAssertion} |receiver.data| == 2 && receiver.data[0] == 0 && receiver.data[1] == 1;}
2024-09-22 15:59:40.1693 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_124_0: int, formal_2_126_0: int, formal_3_128_0: int, formal_3_128_1: int, formal_4_130_0: int, formal_5_132_0: int, formal_5_132_1: int, formal_6_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_118_0: int)
      modifies receiver
    {
      assume {:formal} formal_0_118_0 == 1;
      assume {:attribute 15} argument_2_0_0 == formal_0_118_0;
      assume {:attribute 16} argument_2_0_1 == formal_0_118_0;
      assume {:formal} formal_1_124_0 == 1;
      assume {:formal} formal_2_126_0 == 0;
      assume {:formal} formal_3_128_0 == 25;
      assume {:formal} formal_3_128_1 == 1;
      assume {:formal} formal_4_130_0 == 2;
      assume {:formal} formal_5_132_0 == 0;
      assume {:formal} formal_5_132_1 == 0;
      assume {:formal} formal_6_99_0 == false;
      assume !(receiver == null);
      assume |receiver.data| > formal_1_124_0;
      assume |receiver.data| > formal_2_126_0;
      assume formal_3_128_0 == receiver.data[formal_3_128_1];
      assume formal_4_130_0 == |receiver.data|;
      assume formal_5_132_0 == receiver.data[formal_5_132_1];
      assume formal_6_99_0 == receiver.frozen;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assume {:formal} formal_0_107_0 == 2;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assert {:keepAssertion} |receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1;
    }
2024-09-22 15:59:40.3834 DEBUG Trying simplification:
2024-09-22 15:59:40.3869 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_1_124_0: int, formal_2_126_0: int, formal_3_128_0: int, formal_3_128_1: int, formal_4_130_0: int, formal_5_132_0: int, formal_5_132_1: int, formal_6_99_0: bool, formal_0_118_0: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
    modifies receiver {receiver.Put(1, 1);
assert {:keepAssertion} |receiver.data| == 2;
assert {:keepAssertion} receiver.data[0] == 0;
assert {:keepAssertion} receiver.data[1] == 1;}
2024-09-22 15:59:40.3869 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_1_124_0: int, formal_2_126_0: int, formal_3_128_0: int, formal_3_128_1: int, formal_4_130_0: int, formal_5_132_0: int, formal_5_132_1: int, formal_6_99_0: bool, formal_0_118_0: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
      modifies receiver
    {
      assume {:attribute 16} argument_2_0_1 == formal_0_118_0;
      assume {:attribute 15} argument_2_0_0 == formal_0_118_0;

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 890 LINES OF LOGS TO SAVE DISK SPACE ***************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

    {
      assume {:formal} formal_1_130_0 == 2;
      assume {:formal} formal_2_19_0 == true;
      assume !(receiver == null);
      assume formal_1_130_0 == |receiver.data|;
      assume formal_2_19_0 == receiver.frozen;
      receiver.Unfreeze();
      assume {:formal} formal_1_126_0 == 0;
      assume {:formal} formal_3_130_0 == 2;
      assume {:formal} formal_4_99_0 == false;
      assert {:keepAssertion} !(receiver == null) && |receiver.data| > formal_1_126_0 && formal_3_130_0 == |receiver.data| && formal_4_99_0 == receiver.frozen;
    }
2024-09-22 15:59:48.7847 DEBUG Trying simplification:
2024-09-22 15:59:48.7847 TRACE Verifying the body of the following method:
static method synthesized(formal_1_130_0: int, formal_3_130_0: int, formal_1_126_0: int, formal_4_99_0: bool, receiver: Array)
    modifies receiver {assume !(receiver == null);
assume 2 == |receiver.data|;
receiver.Unfreeze();
assert {:keepAssertion} !(receiver == null);
assert {:keepAssertion} |receiver.data| > 0;
assert {:keepAssertion} 2 == |receiver.data|;
assert {:keepAssertion} false == receiver.frozen;}
2024-09-22 15:59:48.7847 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_130_0: int, formal_3_130_0: int, formal_1_126_0: int, formal_4_99_0: bool, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_1_130_0 == 2;
      assume !(receiver == null);
      assume formal_1_130_0 == |receiver.data|;
      receiver.Unfreeze();
      assume {:formal} formal_1_126_0 == 0;
      assume {:formal} formal_3_130_0 == 2;
      assume {:formal} formal_4_99_0 == false;
      assert {:keepAssertion} !(receiver == null);
      assert {:keepAssertion} |receiver.data| > formal_1_126_0;
      assert {:keepAssertion} formal_3_130_0 == |receiver.data|;
      assert {:keepAssertion} formal_4_99_0 == receiver.frozen;
    }
2024-09-22 15:59:48.9654 DEBUG Using integer programming to estimating the distance to ¬(receiver == null), 2 == |this.data|
2024-09-22 15:59:48.9688 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 15:59:48.9688 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 15:59:48.9688 DEBUG In particular, need at least -0 calls to Put
2024-09-22 15:59:48.9688 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 15:59:48.9688 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 15:59:48.9688 INFO The following method sequence is possible (heuristic=0): Unfreeze, Put, Put, Put
2024-09-22 15:59:48.9706 INFO New state is ¬(receiver == null), 2 == |this.data|
2024-09-22 15:59:48.9706 INFO Expanding method sequence Unfreeze, Put, Put, Put -- estimated distance to start = 0, distance to end = 4
2024-09-22 15:59:48.9706 TRACE Verifying the body of the following method:
static method synthesized(formal_1_130_0: int, argument_31_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_31_0_0);
assert {:keepAssertion} !(!(receiver == null) && 2 == |receiver.data|);}
2024-09-22 15:59:48.9706 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_130_0: int, argument_31_0_0: nat) returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_31_0_0);
      assume {:formal} formal_1_130_0 == 2;
      assert {:keepAssertion} !(!(receiver == null) && formal_1_130_0 == |receiver.data|);
    }
2024-09-22 15:59:49.1800 TRACE Verifying the body of the following method:
static method synthesized(formal_1_130_0: int, argument_31_0_0: nat, formal_0_113_0: int) returns (receiver: Array) {assume true;
receiver := new Array(2);
assert {:keepAssertion} !(receiver == null) && 2 == |receiver.data|;}
2024-09-22 15:59:49.1800 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_130_0: int, argument_31_0_0: nat, formal_0_113_0: int)
        returns (receiver: Array)
    {
      assume {:formal} formal_0_113_0 == 2;
      assume {:attribute 143} argument_31_0_0 == formal_0_113_0;
      assume true;
      receiver := new Array(argument_31_0_0);
      assume {:formal} formal_1_130_0 == 2;
      assert {:keepAssertion} !(receiver == null) && formal_1_130_0 == |receiver.data|;
    }
2024-09-22 15:59:49.3566 INFO Have found the following solution to a subproblem!
{
result := new Array(2);
result.Unfreeze();
result.Put(0, 0);
result.Put(1, 25);
result.Put(1, 1);
}
2024-09-22 15:59:49.3566 INFO Time spend on subproblem: 00:00:10.6217614
2024-09-22 15:59:49.3566 INFO Number of Regular queries to Dafny used to solve subproblem: 21 (00:00:05.3624308)
2024-09-22 15:59:49.3566 INFO Number of Simplify queries to Dafny used to solve subproblem: 6 (00:00:01.2848398)
2024-09-22 15:59:49.3566 INFO Number of Heuristic queries to Dafny used to solve subproblem: 17 (00:00:03.8102425)
2024-09-22 15:59:49.3586 INFO Have found the following solution!
static method solution() returns (result:Array)
ensures Goal(result)
{
result := new Array(2);
result.Unfreeze();
result.Put(0, 0);
result.Put(1, 25);
result.Put(1, 1);
}
2024-09-22 15:59:49.3586 INFO Total time spend on synthesis: 00:00:10.7671327
2024-09-22 15:59:49.3586 INFO Total number of Regular queries to Dafny: 21 (00:00:05.3624308)
2024-09-22 15:59:49.3586 INFO Total number of Simplify queries to Dafny: 6 (00:00:01.2848398)
2024-09-22 15:59:49.3586 INFO Total number of Heuristic queries to Dafny: 17 (00:00:03.8102425)
