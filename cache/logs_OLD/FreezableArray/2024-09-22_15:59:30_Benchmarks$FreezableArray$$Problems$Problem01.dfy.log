2024-09-22 15:59:30.8083 DEBUG Using integer programming to estimating the distance to |this.data| == 1, this.data[0] == 0
2024-09-22 15:59:30.8244 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 15:59:30.8279 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 15:59:30.8279 DEBUG In particular, need at least -0 calls to Put
2024-09-22 15:59:30.8279 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 15:59:30.8279 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 15:59:30.8279 INFO Initial heuristic value is 0
2024-09-22 15:59:30.8279 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-22 15:59:30.8710 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, argument_1_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_1_0_0);
assert {:keepAssertion} !(|receiver.data| == 1 && receiver.data[0] == 0);}
2024-09-22 15:59:30.8710 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, argument_1_0_0: nat)
        returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_1_0_0);
      assume {:formal} formal_0_107_0 == 1;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1);
    }
2024-09-22 15:59:31.8678 DEBUG Trying method sequence: Put
2024-09-22 15:59:31.8721 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
    modifies receiver {assume !(|receiver.data| == 1 && receiver.data[0] == 0);
assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
receiver.Put(argument_2_0_0, argument_2_0_1);
assert {:keepAssertion} !(|receiver.data| == 1 && receiver.data[0] == 0);}
2024-09-22 15:59:31.8721 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_0_107_0 == 1;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1);
      assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1);
    }
2024-09-22 15:59:32.2256 TRACE Verifying the body of the following method:
static method synthesized(formal_1_119_0: int, formal_2_121_0: int, formal_2_121_1: int, formal_3_0_0: int, formal_4_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_113_0: int)
    modifies receiver {assume !(receiver == null);
assume |receiver.data| > 0;
assume 19 == receiver.data[0];
assume 1 == |receiver.data|;
assume false == receiver.frozen;
receiver.Put(0, 0);
assert {:keepAssertion} |receiver.data| == 1 && receiver.data[0] == 0;}
2024-09-22 15:59:32.2256 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_119_0: int, formal_2_121_0: int, formal_2_121_1: int, formal_3_0_0: int, formal_4_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_113_0: int)
      modifies receiver
    {
      assume {:formal} formal_0_113_0 == 0;
      assume {:attribute 13} argument_2_0_0 == formal_0_113_0;
      assume {:attribute 14} argument_2_0_1 == formal_0_113_0;
      assume {:formal} formal_1_119_0 == 0;
      assume {:formal} formal_2_121_0 == 19;
      assume {:formal} formal_2_121_1 == 0;
      assume {:formal} formal_3_0_0 == 1;
      assume {:formal} formal_4_99_0 == false;
      assume !(receiver == null);
      assume |receiver.data| > formal_1_119_0;
      assume formal_2_121_0 == receiver.data[formal_2_121_1];
      assume formal_3_0_0 == |receiver.data|;
      assume formal_4_99_0 == receiver.frozen;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assume {:formal} formal_0_107_0 == 1;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assert {:keepAssertion} |receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1;
    }
2024-09-22 15:59:32.4393 DEBUG Trying simplification:
2024-09-22 15:59:32.4428 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_1_119_0: int, formal_2_121_0: int, formal_2_121_1: int, formal_3_0_0: int, formal_4_99_0: bool, formal_0_113_0: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
    modifies receiver {receiver.Put(0, 0);
assert {:keepAssertion} |receiver.data| == 1;
assert {:keepAssertion} receiver.data[0] == 0;}
2024-09-22 15:59:32.4428 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_1_119_0: int, formal_2_121_0: int, formal_2_121_1: int, formal_3_0_0: int, formal_4_99_0: bool, formal_0_113_0: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
      modifies receiver
    {
      assume {:attribute 14} argument_2_0_1 == formal_0_113_0;
      assume {:attribute 13} argument_2_0_0 == formal_0_113_0;
      assume {:formal} formal_0_113_0 == 0;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assume {:formal} formal_0_107_0 == 1;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assert {:keepAssertion} |receiver.data| == formal_0_107_0;
      assert {:keepAssertion} receiver.data[formal_1_109_0] == formal_1_109_1;
    }
2024-09-22 15:59:32.7567 TRACE Verifying the body of the following method:
static method synthesized(formal_0_119_0: int, argument_3_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_3_0_0);
assert {:keepAssertion} true;
assert {:keepAssertion} true;}
2024-09-22 15:59:32.7567 TRACE Verifying the body of the following method (literal):

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 428 LINES OF LOGS TO SAVE DISK SPACE ***************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

 static method synthesized(formal_1_0_0: int, formal_3_0_0: int, formal_2_19_0: bool, formal_1_119_0: int, formal_4_99_0: bool, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_1_0_0 == 1;
      assume {:formal} formal_2_19_0 == true;
      assume !(receiver == null);
      assume formal_1_0_0 == |receiver.data|;
      assume formal_2_19_0 == receiver.frozen;
      receiver.Unfreeze();
      assume {:formal} formal_1_119_0 == 0;
      assume {:formal} formal_3_0_0 == 1;
      assume {:formal} formal_4_99_0 == false;
      assert {:keepAssertion} !(receiver == null) && |receiver.data| > formal_1_119_0 && formal_3_0_0 == |receiver.data| && formal_4_99_0 == receiver.frozen;
    }
2024-09-22 15:59:37.0947 DEBUG Trying simplification:
2024-09-22 15:59:37.0947 TRACE Verifying the body of the following method:
static method synthesized(formal_1_0_0: int, formal_3_0_0: int, formal_1_119_0: int, formal_4_99_0: bool, receiver: Array)
    modifies receiver {assume !(receiver == null);
assume 1 == |receiver.data|;
receiver.Unfreeze();
assert {:keepAssertion} !(receiver == null);
assert {:keepAssertion} |receiver.data| > 0;
assert {:keepAssertion} 1 == |receiver.data|;
assert {:keepAssertion} false == receiver.frozen;}
2024-09-22 15:59:37.0947 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_0_0: int, formal_3_0_0: int, formal_1_119_0: int, formal_4_99_0: bool, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_1_0_0 == 1;
      assume !(receiver == null);
      assume formal_1_0_0 == |receiver.data|;
      receiver.Unfreeze();
      assume {:formal} formal_1_119_0 == 0;
      assume {:formal} formal_3_0_0 == 1;
      assume {:formal} formal_4_99_0 == false;
      assert {:keepAssertion} !(receiver == null);
      assert {:keepAssertion} |receiver.data| > formal_1_119_0;
      assert {:keepAssertion} formal_3_0_0 == |receiver.data|;
      assert {:keepAssertion} formal_4_99_0 == receiver.frozen;
    }
2024-09-22 15:59:37.2976 DEBUG Using integer programming to estimating the distance to ¬(receiver == null), 1 == |this.data|
2024-09-22 15:59:37.2999 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 15:59:37.2999 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 15:59:37.2999 DEBUG In particular, need at least -0 calls to Put
2024-09-22 15:59:37.2999 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 15:59:37.2999 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 15:59:37.2999 INFO The following method sequence is possible (heuristic=0): Unfreeze, Put, Put
2024-09-22 15:59:37.2999 INFO New state is ¬(receiver == null), 1 == |this.data|
2024-09-22 15:59:37.2999 INFO Expanding method sequence Unfreeze, Put, Put -- estimated distance to start = 0, distance to end = 3
2024-09-22 15:59:37.3026 TRACE Verifying the body of the following method:
static method synthesized(formal_1_0_0: int, argument_18_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_18_0_0);
assert {:keepAssertion} !(!(receiver == null) && 1 == |receiver.data|);}
2024-09-22 15:59:37.3026 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_0_0: int, argument_18_0_0: nat) returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_18_0_0);
      assume {:formal} formal_1_0_0 == 1;
      assert {:keepAssertion} !(!(receiver == null) && formal_1_0_0 == |receiver.data|);
    }
2024-09-22 15:59:37.5060 TRACE Verifying the body of the following method:
static method synthesized(formal_1_0_0: int, argument_18_0_0: nat, formal_0_111_0: int) returns (receiver: Array) {assume true;
receiver := new Array(1);
assert {:keepAssertion} !(receiver == null) && 1 == |receiver.data|;}
2024-09-22 15:59:37.5060 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_0_0: int, argument_18_0_0: nat, formal_0_111_0: int)
        returns (receiver: Array)
    {
      assume {:formal} formal_0_111_0 == 1;
      assume {:attribute 83} argument_18_0_0 == formal_0_111_0;
      assume true;
      receiver := new Array(argument_18_0_0);
      assume {:formal} formal_1_0_0 == 1;
      assert {:keepAssertion} !(receiver == null) && formal_1_0_0 == |receiver.data|;
    }
2024-09-22 15:59:37.6899 INFO Have found the following solution to a subproblem!
{
result := new Array(1);
result.Unfreeze();
result.Put(0, 19);
result.Put(0, 0);
}
2024-09-22 15:59:37.6912 INFO Time spend on subproblem: 00:00:06.8935395
2024-09-22 15:59:37.6912 INFO Number of Regular queries to Dafny used to solve subproblem: 16 (00:00:04.2136061)
2024-09-22 15:59:37.6912 INFO Number of Simplify queries to Dafny used to solve subproblem: 4 (00:00:00.9055539)
2024-09-22 15:59:37.6912 INFO Number of Heuristic queries to Dafny used to solve subproblem: 7 (00:00:01.6269977)
2024-09-22 15:59:37.6912 INFO Have found the following solution!
static method solution() returns (result:Array)
ensures Goal(result)
{
result := new Array(1);
result.Unfreeze();
result.Put(0, 19);
result.Put(0, 0);
}
2024-09-22 15:59:37.6912 INFO Total time spend on synthesis: 00:00:07.0399469
2024-09-22 15:59:37.6912 INFO Total number of Regular queries to Dafny: 16 (00:00:04.2136061)
2024-09-22 15:59:37.6912 INFO Total number of Simplify queries to Dafny: 4 (00:00:00.9055539)
2024-09-22 15:59:37.6912 INFO Total number of Heuristic queries to Dafny: 7 (00:00:01.6269977)
