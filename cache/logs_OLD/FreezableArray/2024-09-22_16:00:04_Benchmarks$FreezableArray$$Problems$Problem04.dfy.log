2024-09-22 16:00:05.3410 DEBUG Using integer programming to estimating the distance to |this.data| == 4, this.data[0] == 0, this.data[1] == 1, this.data[2] == 2, this.data[3] == 3
2024-09-22 16:00:05.3571 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 16:00:05.3606 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 16:00:05.3606 DEBUG In particular, need at least -0 calls to Put
2024-09-22 16:00:05.3606 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 16:00:05.3606 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 16:00:05.3606 INFO Initial heuristic value is 0
2024-09-22 16:00:05.3628 INFO Expanding method sequence  -- estimated distance to start = 0, distance to end = 0
2024-09-22 16:00:05.4047 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, argument_1_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_1_0_0);
assert {:keepAssertion} !(|receiver.data| == 4 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3);}
2024-09-22 16:00:05.4047 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, argument_1_0_0: nat)
        returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_1_0_0);
      assume {:formal} formal_0_107_0 == 4;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume {:formal} formal_3_113_0 == 2;
      assume {:formal} formal_3_113_1 == 2;
      assume {:formal} formal_4_115_0 == 3;
      assume {:formal} formal_4_115_1 == 3;
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1 && receiver.data[formal_4_115_0] == formal_4_115_1);
    }
2024-09-22 16:00:06.4119 DEBUG Trying method sequence: Put
2024-09-22 16:00:06.4163 TRACE Verifying the body of the following method:
static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
    modifies receiver {assume !(|receiver.data| == 4 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3);
assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
receiver.Put(argument_2_0_0, argument_2_0_1);
assert {:keepAssertion} !(|receiver.data| == 4 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3);}
2024-09-22 16:00:06.4163 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_0_107_0 == 4;
      assume {:formal} formal_1_109_0 == 0;
      assume {:formal} formal_1_109_1 == 0;
      assume {:formal} formal_2_111_0 == 1;
      assume {:formal} formal_2_111_1 == 1;
      assume {:formal} formal_3_113_0 == 2;
      assume {:formal} formal_3_113_1 == 2;
      assume {:formal} formal_4_115_0 == 3;
      assume {:formal} formal_4_115_1 == 3;
      assume !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1 && receiver.data[formal_4_115_0] == formal_4_115_1);
      assume true && argument_2_0_0 < |receiver.data| && !receiver.frozen;
      receiver.Put(argument_2_0_0, argument_2_0_1);
      assert {:keepAssertion} !(|receiver.data| == formal_0_107_0 && receiver.data[formal_1_109_0] == formal_1_109_1 && receiver.data[formal_2_111_0] == formal_2_111_1 && receiver.data[formal_3_113_0] == formal_3_113_1 && receiver.data[formal_4_115_0] == formal_4_115_1);
    }
2024-09-22 16:00:06.7683 TRACE Verifying the body of the following method:
static method synthesized(formal_1_134_0: int, formal_2_136_0: int, formal_3_138_0: int, formal_4_140_0: int, formal_5_142_0: int, formal_5_142_1: int, formal_6_144_0: int, formal_7_146_0: int, formal_7_146_1: int, formal_8_148_0: int, formal_8_148_1: int, formal_9_150_0: int, formal_9_150_1: int, formal_10_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_119_0: int)
    modifies receiver {assume !(receiver == null);
assume |receiver.data| > 0;
assume |receiver.data| > 1;
assume |receiver.data| > 2;
assume |receiver.data| > 3;
assume 15 == receiver.data[0];
assume 4 == |receiver.data|;
assume 1 == receiver.data[1];
assume 2 == receiver.data[2];
assume 3 == receiver.data[3];
assume false == receiver.frozen;
receiver.Put(0, 0);
assert {:keepAssertion} |receiver.data| == 4 && receiver.data[0] == 0 && receiver.data[1] == 1 && receiver.data[2] == 2 && receiver.data[3] == 3;}
2024-09-22 16:00:06.7683 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_134_0: int, formal_2_136_0: int, formal_3_138_0: int, formal_4_140_0: int, formal_5_142_0: int, formal_5_142_1: int, formal_6_144_0: int, formal_7_146_0: int, formal_7_146_1: int, formal_8_148_0: int, formal_8_148_1: int, formal_9_150_0: int, formal_9_150_1: int, formal_10_99_0: bool, formal_0_107_0: int, formal_1_109_0: int, formal_1_109_1: int, formal_2_111_0: int, formal_2_111_1: int, formal_3_113_0: int, formal_3_113_1: int, formal_4_115_0: int, formal_4_115_1: int, argument_2_0_0: nat, argument_2_0_1: int, receiver: Array, formal_0_119_0: int)
      modifies receiver
    {
      assume {:formal} formal_0_119_0 == 0;
      assume {:attribute 19} argument_2_0_0 == formal_0_119_0;
      assume {:attribute 20} argument_2_0_1 == formal_0_119_0;
      assume {:formal} formal_1_134_0 == 0;
      assume {:formal} formal_2_136_0 == 1;
      assume {:formal} formal_3_138_0 == 2;
      assume {:formal} formal_4_140_0 == 3;
      assume {:formal} formal_5_142_0 == 15;
      assume {:formal} formal_5_142_1 == 0;
      assume {:formal} formal_6_144_0 == 4;
      assume {:formal} formal_7_146_0 == 1;
      assume {:formal} formal_7_146_1 == 1;
      assume {:formal} formal_8_148_0 == 2;
      assume {:formal} formal_8_148_1 == 2;
      assume {:formal} formal_9_150_0 == 3;
      assume {:formal} formal_9_150_1 == 3;
      assume {:formal} formal_10_99_0 == false;
      assume !(receiver == null);
      assume |receiver.data| > formal_1_134_0;
      assume |receiver.data| > formal_2_136_0;
      assume |receiver.data| > formal_3_138_0;
      assume |receiver.data| > formal_4_140_0;
      assume formal_5_142_0 == receiver.data[formal_5_142_1];
      assume formal_6_144_0 == |receiver.data|;
      assume formal_7_146_0 == receiver.data[formal_7_146_1];
      assume formal_8_148_0 == receiver.data[formal_8_148_1];
      assume formal_9_150_0 == receiver.data[formal_9_150_1];

********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************** SKIPPING 1893 LINES OF LOGS TO SAVE DISK SPACE **************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************

      assume formal_1_144_0 == |receiver.data|;
      assume formal_2_19_0 == receiver.frozen;
      receiver.Unfreeze();
      assume {:formal} formal_1_140_0 == 3;
      assume {:formal} formal_3_144_0 == 4;
      assume {:formal} formal_4_99_0 == false;
      assert {:keepAssertion} !(receiver == null) && |receiver.data| > formal_1_140_0 && formal_3_144_0 == |receiver.data| && formal_4_99_0 == receiver.frozen;
    }
2024-09-22 16:00:21.2467 DEBUG Trying simplification:
2024-09-22 16:00:21.2467 TRACE Verifying the body of the following method:
static method synthesized(formal_1_144_0: int, formal_3_144_0: int, formal_1_140_0: int, formal_4_99_0: bool, receiver: Array)
    modifies receiver {assume !(receiver == null);
assume 4 == |receiver.data|;
receiver.Unfreeze();
assert {:keepAssertion} !(receiver == null);
assert {:keepAssertion} |receiver.data| > 3;
assert {:keepAssertion} 4 == |receiver.data|;
assert {:keepAssertion} false == receiver.frozen;}
2024-09-22 16:00:21.2467 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_144_0: int, formal_3_144_0: int, formal_1_140_0: int, formal_4_99_0: bool, receiver: Array)
      modifies receiver
    {
      assume {:formal} formal_1_144_0 == 4;
      assume !(receiver == null);
      assume formal_1_144_0 == |receiver.data|;
      receiver.Unfreeze();
      assume {:formal} formal_1_140_0 == 3;
      assume {:formal} formal_3_144_0 == 4;
      assume {:formal} formal_4_99_0 == false;
      assert {:keepAssertion} !(receiver == null);
      assert {:keepAssertion} |receiver.data| > formal_1_140_0;
      assert {:keepAssertion} formal_3_144_0 == |receiver.data|;
      assert {:keepAssertion} formal_4_99_0 == receiver.frozen;
    }
2024-09-22 16:00:21.4476 DEBUG Using integer programming to estimating the distance to ¬(receiver == null), 4 == |this.data|
2024-09-22 16:00:21.4511 TRACE Minimizing value: ((Put + Freeze) + Unfreeze)
2024-09-22 16:00:21.4511 DEBUG The integer programming gives the lower bound of 0 methods.
2024-09-22 16:00:21.4511 DEBUG In particular, need at least -0 calls to Put
2024-09-22 16:00:21.4511 DEBUG In particular, need at least -0 calls to Freeze
2024-09-22 16:00:21.4511 DEBUG In particular, need at least -0 calls to Unfreeze
2024-09-22 16:00:21.4511 INFO The following method sequence is possible (heuristic=0): Unfreeze, Put, Put, Put, Put, Put
2024-09-22 16:00:21.4511 INFO New state is ¬(receiver == null), 4 == |this.data|
2024-09-22 16:00:21.4511 INFO Expanding method sequence Unfreeze, Put, Put, Put, Put, Put -- estimated distance to start = 0, distance to end = 6
2024-09-22 16:00:21.4511 TRACE Verifying the body of the following method:
static method synthesized(formal_1_144_0: int, argument_51_0_0: nat) returns (receiver: Array) {assume true;
receiver := new Array(argument_51_0_0);
assert {:keepAssertion} !(!(receiver == null) && 4 == |receiver.data|);}
2024-09-22 16:00:21.4546 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_144_0: int, argument_51_0_0: nat) returns (receiver: Array)
    {
      assume true;
      receiver := new Array(argument_51_0_0);
      assume {:formal} formal_1_144_0 == 4;
      assert {:keepAssertion} !(!(receiver == null) && formal_1_144_0 == |receiver.data|);
    }
2024-09-22 16:00:21.6593 TRACE Verifying the body of the following method:
static method synthesized(formal_1_144_0: int, argument_51_0_0: nat, formal_0_117_0: int) returns (receiver: Array) {assume true;
receiver := new Array(4);
assert {:keepAssertion} !(receiver == null) && 4 == |receiver.data|;}
2024-09-22 16:00:21.6593 TRACE Verifying the body of the following method (literal):
 static method synthesized(formal_1_144_0: int, argument_51_0_0: nat, formal_0_117_0: int)
        returns (receiver: Array)
    {
      assume {:formal} formal_0_117_0 == 4;
      assume {:attribute 269} argument_51_0_0 == formal_0_117_0;
      assume true;
      receiver := new Array(argument_51_0_0);
      assume {:formal} formal_1_144_0 == 4;
      assert {:keepAssertion} !(receiver == null) && formal_1_144_0 == |receiver.data|;
    }
2024-09-22 16:00:21.8238 INFO Have found the following solution to a subproblem!
{
result := new Array(4);
result.Unfreeze();
result.Put(3, 3);
result.Put(2, 2);
result.Put(0, 15);
result.Put(1, 1);
result.Put(0, 0);
}
2024-09-22 16:00:21.8238 INFO Time spend on subproblem: 00:00:16.4949716
2024-09-22 16:00:21.8268 INFO Number of Regular queries to Dafny used to solve subproblem: 31 (00:00:07.5898504)
2024-09-22 16:00:21.8268 INFO Number of Simplify queries to Dafny used to solve subproblem: 10 (00:00:02.0776864)
2024-09-22 16:00:21.8268 INFO Number of Heuristic queries to Dafny used to solve subproblem: 31 (00:00:06.6196233)
2024-09-22 16:00:21.8268 INFO Have found the following solution!
static method solution() returns (result:Array)
ensures Goal(result)
{
result := new Array(4);
result.Unfreeze();
result.Put(3, 3);
result.Put(2, 2);
result.Put(0, 15);
result.Put(1, 1);
result.Put(0, 0);
}
2024-09-22 16:00:21.8268 INFO Total time spend on synthesis: 00:00:16.6413990
2024-09-22 16:00:21.8268 INFO Total number of Regular queries to Dafny: 31 (00:00:07.5898504)
2024-09-22 16:00:21.8268 INFO Total number of Simplify queries to Dafny: 10 (00:00:02.0776864)
2024-09-22 16:00:21.8268 INFO Total number of Heuristic queries to Dafny: 31 (00:00:06.6196233)
